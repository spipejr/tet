/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package reportfile;

import borfunction.GetComputerName;
import borfunction.btnFind;
import com.mysql.jdbc.PreparedStatement;
import dbutility.dbUtility;
import frmlist.ListBranch;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import javax.swing.text.JTextComponent;
import masterfile.NimbusFrame;
import utilities.DateChooser.DateUtil;
import utilititiesfunction.*;

/**
 *
 * @author s386
 */
public class setBudRjFile extends javax.swing.JDialog {

    /**
     * Creates new form setBudRjFile
     */
    Statement stmt ;
    dbUtility db = new dbUtility();
    ThaiUtilities cvth = new ThaiUtilities();
    getLanguage lang = new getLanguage();
    String frmName = "setmenulist";
    DecimalFormat DoubleFmt = new DecimalFormat("##,###,##0.00");
    btnFind btn = new btnFind();
    private String comname = new GetComputerName().getComputerName();
    public setBudRjFile(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        db.dbconnect();
        initable();
        
        tbl1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                setzeroincell();
             
            } 
        });
//        tbl1.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
//        Action action = new AbstractAction()
//{
//    public void actionPerformed(ActionEvent e)
//    {
//        TableCellListener tcl = (TableCellListener)e.getSource();
//
//        try {
//           
//          } catch (Exception ex) {
//             
//        }
//    }
//};
//
//    TableCellListener tcl = new TableCellListener(tbl1, action);

   
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        t_pname = new javax.swing.JTextField();
        btnsearch1 = new javax.swing.JButton();
        t_pcode = new javax.swing.JTextField();
        d_lblh1 = new javax.swing.JLabel();
        d_lblh2 = new javax.swing.JLabel();
        db_btnOK = new javax.swing.JButton();
        t_mcode = new javax.swing.JFormattedTextField();
        db_btnsave = new javax.swing.JButton();
        db_btncancle = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("บันทึกเป้าการขายของแต่ละสาขา (ตาม RJ Form)");

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        t_pname.setBackground(new java.awt.Color(249, 252, 186));
        t_pname.setEditable(false);
        t_pname.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        t_pname.setFocusable(false);

        btnsearch1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Windows-Magnifier-icon.png"))); // NOI18N
        btnsearch1.setFocusable(false);
        btnsearch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsearch1ActionPerformed(evt);
            }
        });

        t_pcode.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        t_pcode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                t_pcodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_pcodeFocusLost(evt);
            }
        });
        t_pcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                t_pcodeKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_pcodeKeyTyped(evt);
            }
        });

        d_lblh1.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        d_lblh1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        d_lblh1.setText("สาขา");
        d_lblh1.setName("d_lblh1"); // NOI18N

        d_lblh2.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        d_lblh2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        d_lblh2.setText("สำหรับปี (ค.ส)");
        d_lblh2.setName("d_lblh1"); // NOI18N

        db_btnOK.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        db_btnOK.setText("OK");
        db_btnOK.setName("db_btnOK"); // NOI18N
        db_btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                db_btnOKActionPerformed(evt);
            }
        });

        t_mcode.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy"))));
        t_mcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                t_mcodeKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(d_lblh2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(t_mcode, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(d_lblh1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(t_pcode, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnsearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(t_pname, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(db_btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(t_pname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(db_btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnsearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(t_pcode, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(d_lblh1)
                    .addComponent(t_mcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(d_lblh2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        db_btnsave.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        db_btnsave.setText("บันทึก (Save)");
        db_btnsave.setName("db_btnOK"); // NOI18N
        db_btnsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                db_btnsaveActionPerformed(evt);
            }
        });

        db_btncancle.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        db_btncancle.setText("ยกเลิก (Cancle)");
        db_btncancle.setName("db_btnOK"); // NOI18N
        db_btncancle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                db_btncancleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(db_btnsave, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(db_btncancle, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(143, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(db_btnsave, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(db_btncancle, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9))))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tbl1.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        tbl1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "แผนก", "รายการ", "Account", "SUB", "มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฏาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม", "ยอดรวมทั้งสิ้น", "null", "null", "null"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl1.setColumnSelectionAllowed(true);
        tbl1.setName("tbl1"); // NOI18N
        tbl1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl1MouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tbl1MouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbl1MouseReleased(evt);
            }
        });
        tbl1.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
                tbl1AncestorMoved(evt);
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
            }
        });
        tbl1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tbl1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tbl1FocusLost(evt);
            }
        });
        tbl1.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                tbl1HierarchyChanged(evt);
            }
        });
        tbl1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tbl1PropertyChange(evt);
            }
        });
        tbl1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbl1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbl1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbl1);
        tbl1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        tbl1.getColumnModel().getColumn(0).setPreferredWidth(50);
        tbl1.getColumnModel().getColumn(1).setPreferredWidth(175);
        tbl1.getColumnModel().getColumn(17).setMinWidth(0);
        tbl1.getColumnModel().getColumn(17).setPreferredWidth(0);
        tbl1.getColumnModel().getColumn(17).setMaxWidth(0);
        tbl1.getColumnModel().getColumn(18).setMinWidth(0);
        tbl1.getColumnModel().getColumn(18).setPreferredWidth(0);
        tbl1.getColumnModel().getColumn(18).setMaxWidth(0);
        tbl1.getColumnModel().getColumn(19).setMinWidth(0);
        tbl1.getColumnModel().getColumn(19).setPreferredWidth(0);
        tbl1.getColumnModel().getColumn(19).setMaxWidth(0);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1032)/2, (screenSize.height-796)/2, 1032, 796);
    }// </editor-fold>//GEN-END:initComponents

    private void btnsearch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsearch1ActionPerformed

        btnFindBran();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnsearch1ActionPerformed

    private void t_pcodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_pcodeFocusGained
        t_pcode.setText(t_pcode.getText());
        t_pcode.selectAll();
        // TODO add your handling code here:
    }//GEN-LAST:event_t_pcodeFocusGained

    private void t_pcodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_pcodeFocusLost
        if (!t_pcode.getText().equals("")) {
            setpname(t_pcode.getText());
        }
        t_pcode.select(0, 0);
        // TODO add your handling code here:
    }//GEN-LAST:event_t_pcodeFocusLost

    private void t_pcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_pcodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            db_btnOK.requestFocus();

        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            btnFindBran();
        }
    }//GEN-LAST:event_t_pcodeKeyPressed

    private void t_pcodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_pcodeKeyTyped
        if (t_pcode.getText().length() >= 13) {
            evt.consume();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_t_pcodeKeyTyped

    private void db_btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_db_btnOKActionPerformed
        
        settemp();
        ProcressSum();
        // TODO add your handling code here:
    }//GEN-LAST:event_db_btnOKActionPerformed

    private void db_btnsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_db_btnsaveActionPerformed
        if (!t_mcode.isFocusable()) {
            ProcressSum();
            save();
        }
        //deleteintbl3All();
        // TODO add your handling code here:
    }//GEN-LAST:event_db_btnsaveActionPerformed

    private void db_btncancleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_db_btncancleActionPerformed
        if (!t_mcode.isFocusable()) {
            int confirm = JOptionPane.showConfirmDialog(this, "คุณต้องการยกเลิกการป้อนข้อมูลหรือไม่...?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                clear();
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_db_btncancleActionPerformed

    private void tbl1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl1MouseClicked
        //indextbl = tbltable.getSelectedRow();
        int row = tbl1.getSelectedRow();
        int col = tbl1.getSelectedColumn();
        
            if (tbl1.editCellAt(row, col)) {
                Component editor = tbl1.getEditorComponent();
                editor.requestFocusInWindow();
                ((JTextComponent) editor).selectAll();
            }

        // TODO add your handling code here:
    }//GEN-LAST:event_tbl1MouseClicked

    private void tbl1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl1MouseReleased
        
        // TODO add your handling code here:
   }//GEN-LAST:event_tbl1MouseReleased

    private void tbl1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl1KeyPressed
//        int row = tbl1.getSelectedRow();
//        int col = tbl1.getSelectedColumn();
//        
//            if (tbl1.editCellAt(row, col)) {
//                Component editor = tbl1.getEditorComponent();
//                editor.requestFocusInWindow();
//                ((JTextComponent) editor).selectAll();
//            }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        setzeroincell();
        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_tbl1KeyPressed

    private void tbl1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl1KeyReleased

        // TODO add your handling code here:
   }//GEN-LAST:event_tbl1KeyReleased

    private void t_mcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_mcodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            t_pcode.requestFocus();

        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_t_mcodeKeyPressed

    private void tbl1AncestorMoved(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_tbl1AncestorMoved
        
        // TODO add your handling code here:
    }//GEN-LAST:event_tbl1AncestorMoved

    private void tbl1HierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_tbl1HierarchyChanged
        
        // TODO add your handling code here:
    }//GEN-LAST:event_tbl1HierarchyChanged

    private void tbl1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl1MouseExited
       
        // TODO add your handling code here:
    }//GEN-LAST:event_tbl1MouseExited

    private void tbl1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tbl1PropertyChange
        
        // TODO add your handling code here:
    }//GEN-LAST:event_tbl1PropertyChange

    private void tbl1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tbl1FocusGained
        setzeroincell();
        
        
       
        // TODO add your handling code here:
    }//GEN-LAST:event_tbl1FocusGained

    private void tbl1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tbl1FocusLost
      
        // TODO add your handling code here:
    }//GEN-LAST:event_tbl1FocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(setBudRjFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(setBudRjFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(setBudRjFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(setBudRjFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                setBudRjFile dialog = new setBudRjFile(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnsearch1;
    private javax.swing.JLabel d_lblh1;
    private javax.swing.JLabel d_lblh2;
    private javax.swing.JButton db_btnOK;
    private javax.swing.JButton db_btncancle;
    private javax.swing.JButton db_btnsave;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField t_mcode;
    private javax.swing.JTextField t_pcode;
    private javax.swing.JTextField t_pname;
    private javax.swing.JTable tbl1;
    // End of variables declaration//GEN-END:variables
    private void btnFindBran() {
        ListBranch f = new ListBranch(new NimbusFrame(), true);
        f.setVisible(true);
        if(!f.code.equals(""))
        {
            t_pcode.setText(f.code);
            setpname(t_pcode.getText());
        }
       
        t_pcode.requestFocus();
    }
    private void setpname(String code)
    {
        stmt = null;
    ResultSet rs = null;
    
   
    try {
        stmt = (Statement) dbUtility.con.createStatement();
        String sql = "";
            if(!db.Char_Set.equalsIgnoreCase("utf-8"))
            {
                
                sql = "select * from branfile "
                + "where code ='"+cvth.Unicode2ASCII(code)+"'";
                rs = stmt.executeQuery(sql);
                if(rs.next())
                {
                   t_pname.setText(cvth.ASCII2Unicode(rs.getString("name")));
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "ข้อมูลไม่ถูกต้อง กรุณากรอกข้อมูลให้ถูกต้อง");
                    t_pcode.setText("");
                    t_pname.setText("");
                    t_pcode.requestFocus();
                }
            
            }
            else
            {
                sql = "select * from branfile "
                + "where code ='"+code+"'";
                rs = stmt.executeQuery(sql);
                if(rs.next())
                {
                   t_pname.setText(rs.getString("name"));
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "ข้อมูลไม่ถูกต้อง กรุณากรอกข้อมูลให้ถูกต้อง");
                    t_pcode.setText("");
                    t_pname.setText("");
                    t_pcode.requestFocus();
                }
                
            }
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    }
    }
    private void settemp() {
        try {
            if(t_mcode.getText().equals(""))
            {
                JOptionPane.showMessageDialog(this, "ข้อมูลไม่ถูกต้อง กรุณาป้อนข้อมูลให้ถูกต้อง");
                t_mcode.requestFocus();
                return;
            }
            else if(Integer.parseInt(t_mcode.getText())<2000 || Integer.parseInt(t_mcode.getText())>2050)
            {
                JOptionPane.showMessageDialog(this, "ข้อมูลไม่ถูกต้อง ป้อนปี ค.ศ. ไม่ถูกต้อง");
                t_mcode.requestFocus();
                return;
            }
            else
            {
                if(t_pcode.getText().equals("")||!chkbran(t_pcode.getText()))
                {
                    JOptionPane.showMessageDialog(this, "ข้อมูลไม่ถูกต้อง กรุณาป้อนข้อมูลให้ถูกต้อง");
                    t_pcode.requestFocus();
                    return;
                }
                else
                {
                    LoadData();
                    setFocus(true);
                    tbl1.requestFocus();
                }
            }
            
            
            
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }
    
    private boolean chkbran(String code) {
        boolean chk = false;
        stmt = null;
        ResultSet rs = null;


        try {
            if (!db.Char_Set.equalsIgnoreCase("utf-8")) {
                stmt = (Statement) dbUtility.con.createStatement();
                String sql = "select * from branfile "
                        + "where code = '" + cvth.Unicode2ASCII(code) + "'";
                rs = stmt.executeQuery(sql);
                if (rs.next()) {
                    chk = true;
                }
            } else {
                stmt = (Statement) dbUtility.con.createStatement();
                String sql = "select * from branfile "
                        + "where code = '" + code + "'";
                rs = stmt.executeQuery(sql);
                if (rs.next()) {
                    chk = true;
                }

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
        return chk;
    }
    
    private void setFocus(boolean chk)
    {
    
    //t_pcode.setFocusable(chk);
    tbl1.setEnabled(chk);
    
    
    //db_btnsave.setEnabled(chk);
    if(chk==false)
    {
    t_mcode.setFocusable(true);
    t_mcode.setBackground(Color.WHITE);
    t_pcode.setFocusable(true);
    t_pcode.setBackground(Color.WHITE);
    db_btnOK.setEnabled(true);
    btnsearch1.setEnabled(true);
    }
    else
    {
    t_mcode.setBackground(new java.awt.Color(249,252,186));
    t_mcode.setFocusable(false);
    t_pcode.setBackground(new java.awt.Color(249,252,186));
    t_pcode.setFocusable(false);
    db_btnOK.setEnabled(false);
    btnsearch1.setEnabled(false);
    }
    }

    private void LoadData() {
        stmt = null;
        ResultSet rs = null;
        updatetemp1();
        deletetemp(comname);
        inserttemp1totemp2();
        try {
            
            
            if (!db.Char_Set.equalsIgnoreCase("utf-8")) {
                stmt = (Statement) dbUtility.con.createStatement();
                String sql = "select * from budrjfile where tyear = '"+t_mcode.getText()+"' and brcode = '"+t_pcode.getText()+"' ";
                rs = stmt.executeQuery(sql);
                    while (rs.next()) {
                        String sqltemp = "update temprjt2 set mon01=?"
                                + ",mon02=?,mon03=?,mon04=?,mon05=?"
                                + ",mon06=?,mon07=?,mon08=?"
                                + ",mon09=?,mon10=?,mon11=?"
                                + ",mon12=?,total=? where rjno = ? and comname = ?";
                            PreparedStatement prm = (PreparedStatement) db.con.prepareStatement(sqltemp);
                            prm.setDouble(1, rs.getDouble("mon01"));
                            prm.setDouble(2, rs.getDouble("mon02"));
                            prm.setDouble(3, rs.getDouble("mon03"));
                            prm.setDouble(4, rs.getDouble("mon04"));
                            prm.setDouble(5, rs.getDouble("mon05"));
                            prm.setDouble(6, rs.getDouble("mon06"));
                            prm.setDouble(7, rs.getDouble("mon07"));
                            prm.setDouble(8, rs.getDouble("mon08"));
                            prm.setDouble(9, rs.getDouble("mon09"));
                            prm.setDouble(10, rs.getDouble("mon10"));
                            prm.setDouble(11, rs.getDouble("mon11"));
                            prm.setDouble(12, rs.getDouble("mon12"));
                            prm.setDouble(13, rs.getDouble("total"));
                            prm.setDouble(14, rs.getDouble("rjno"));
                            prm.setString(15, comname);
                            prm.executeUpdate();

                    }
               
                
                
                showdataintbl();
            } else {
                
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }

    private void updatetemp1() {
        try {
            String sqltemp = "update temprjt1 set mon01=0,mon02=0,mon03=0,mon04=0,mon05=0,mon06=0,mon07=0,mon08=0"
                    + ",mon09=0,mon10=0,mon11=0,mon12=0,total=0";
                                PreparedStatement prm = (PreparedStatement) db.con.prepareStatement(sqltemp);
                                
                                prm.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(setBudRjFile.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void deletetemp(String comname) {
       if(!db.Char_Set.equalsIgnoreCase("utf-8"))
         {
            try {
                 String sqltemp = "delete from temprjt2 where comname = ?";
                  PreparedStatement prm = (PreparedStatement) db.con.prepareStatement(sqltemp);
                  prm.setString(1, comname);
                  prm.executeUpdate();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
         }
       else
       {
            try {
                 String sqltemp = "delete from temprjt2 where comname = ?";
                  PreparedStatement prm = (PreparedStatement) db.con.prepareStatement(sqltemp);
                  prm.setString(1, comname);
                  prm.executeUpdate();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
       }
    }
    
     private void deletebudrj(String year, String bran) {
       
            try {
                 String sqltemp = "delete from budrjfile where tyear = ? and brcode =?";
                  PreparedStatement prm = (PreparedStatement) db.con.prepareStatement(sqltemp);
                  prm.setString(1, year);
                  prm.setString(2, cvth.Unicode2ASCII(bran));
                  prm.executeUpdate();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
            
            try {
                 String sqltemp = "delete from budrjfile where tyear = ? and brcode =?";
                  PreparedStatement prm = (PreparedStatement) db.con.prepareStatement(sqltemp);
                  prm.setString(1, year);
                  prm.setString(2, bran);
                  prm.executeUpdate();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
           
    }

    private void inserttemp1totemp2() {
        try { 
       
            
                stmt = (Statement) dbUtility.con.createStatement();
                String sql = "select * from temprjt1 ";
                ResultSet rs = stmt.executeQuery(sql);
                    while (rs.next()) {
                        String sqltemp = "Insert Into temprjt2 (rjno,rjline,dept,account,sub,descname,process,get,comname) "
                                    + "Values (?,?,?,?,?,?,?,?,?)";
                            PreparedStatement prm = (PreparedStatement) db.con.prepareStatement(sqltemp);
                            prm.setString(1, rs.getString("rjno"));
                            prm.setString(2, rs.getString("rjline"));
                            prm.setString(3, rs.getString("dept"));
                            prm.setString(4, rs.getString("account"));
                            prm.setString(5, rs.getString("sub"));
                            prm.setString(6, rs.getString("descname"));
                            prm.setString(7, rs.getString("process"));
                            prm.setString(8, rs.getString("get"));
                            prm.setString(9, comname);
                            prm.executeUpdate();

                    }
               
            
          } catch (SQLException ex) {
                Logger.getLogger(setBudRjFile.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    private void removedataintble(JTable tbl)
    {
    DefaultTableModel tb = (DefaultTableModel) tbl.getModel();
     int cnt = tb.getRowCount();
        if (cnt > 0) {
            for (int i = 0; i < cnt; i++) {
                tb.removeRow(0);
            }
        }
    }
    private void insertBudRj()
    {
        try {
            
        if(!db.Char_Set.equalsIgnoreCase("utf-8"))
         {
        for(int i = 0 ; i<tbl1.getRowCount(); i++)
         {
            
                String sqltemp = "Insert Into budrjfile (brcode,tyear,dept,descname,account,sub,mon01,mon02,mon03,mon04,mon05,mon06,mon07,mon08,mon09,mon10,mon11,mon12,total,rjno,rjline) "
                                      + "Values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                              PreparedStatement prm = (PreparedStatement) db.con.prepareStatement(sqltemp);
                              prm.setString(1, t_pcode.getText());
                              prm.setString(2, t_mcode.getText());
                              prm.setString(3, cvth.Unicode2ASCII(tbl1.getValueAt(i, 0).toString()));
                              prm.setString(4, cvth.Unicode2ASCII(tbl1.getValueAt(i, 1).toString()));
                              prm.setString(5, cvth.Unicode2ASCII(tbl1.getValueAt(i, 2).toString()));
                              prm.setString(6, cvth.Unicode2ASCII(tbl1.getValueAt(i, 3).toString()));
                              prm.setDouble(7, Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 4).toString())));
                              prm.setDouble(8, Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 5).toString())));
                              prm.setDouble(9, Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 6).toString())));
                              prm.setDouble(10, Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 7).toString())));
                              prm.setDouble(11, Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 8).toString())));
                              prm.setDouble(12, Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 9).toString())));
                              prm.setDouble(13, Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 10).toString())));
                              prm.setDouble(14, Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 11).toString())));
                              prm.setDouble(15, Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 12).toString())));
                              prm.setDouble(16, Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 13).toString())));
                              prm.setDouble(17, Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 14).toString())));
                              prm.setDouble(18, Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 15).toString())));
                              prm.setDouble(19, Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 16).toString())));
                              prm.setString(20, cvth.Unicode2ASCII(tbl1.getValueAt(i, 17).toString()));
                              prm.setString(21, cvth.Unicode2ASCII(tbl1.getValueAt(i, 18).toString()));
                              prm.executeUpdate();
           
         }
            clear();
         }
        else
        {
            
        }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }
    private void showdataintbl() {
        stmt = null;
    ResultSet rs = null;
    
   
    removedataintble(tbl1);
    DefaultTableModel tb = (DefaultTableModel) tbl1.getModel() ;
    try {
        stmt = (Statement) dbUtility.con.createStatement();
        String sql = "";
       
         sql = "select * from temprjt2 where comname = '"+comname+"' order by rjline";
        
        rs = stmt.executeQuery(sql);
        while(rs.next())
        {
            if(!db.Char_Set.equalsIgnoreCase("utf-8"))
            {
                
            tb.addRow(new Object[]{cvth.ASCII2Unicode(rs.getString("dept")),
                                   cvth.ASCII2Unicode(rs.getString("descname")),
                                   cvth.ASCII2Unicode(rs.getString("account")),
                                   cvth.ASCII2Unicode(rs.getString("sub")),
                                   rs.getDouble("mon01"),
                                   rs.getDouble("mon02"),
                                   rs.getDouble("mon03"),
                                   rs.getDouble("mon04"),
                                   rs.getDouble("mon05"),
                                   rs.getDouble("mon06"),
                                   rs.getDouble("mon07"),
                                   rs.getDouble("mon08"),
                                   rs.getDouble("mon09"),
                                   rs.getDouble("mon10"),
                                   rs.getDouble("mon11"),
                                   rs.getDouble("mon12"),
                                   rs.getDouble("total"),
                                   rs.getString("rjno"),
                                   rs.getString("rjline"),
                                   rs.getString("get")
                                   
                                  });
      
            }
            else
            {
             tb.addRow(new Object[]{rs.getString("dept"),
                                   rs.getString("descname"),
                                   rs.getString("account"),
                                  rs.getString("sub"),
                                   rs.getDouble("mon01"),
                                   rs.getDouble("mon02"),
                                   rs.getDouble("mon03"),
                                   rs.getDouble("mon04"),
                                   rs.getDouble("mon05"),
                                   rs.getDouble("mon06"),
                                   rs.getDouble("mon07"),
                                   rs.getDouble("mon08"),
                                   rs.getDouble("mon09"),
                                   rs.getDouble("mon10"),
                                   rs.getDouble("mon11"),
                                   rs.getDouble("mon12"),
                                   rs.getDouble("total"),
                                   rs.getString("rjno"),
                                   rs.getString("rjline"),
                                   rs.getString("get")
                                   
                                   
                                  });
             
            }
            
        }
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    }
    }
    
    private void initable() {
        DefaultTableModel tb = (DefaultTableModel) tbl1.getModel();
        tbl1.setShowGrid(true);
        tbl1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tbl1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbl1.setRowSelectionAllowed(true);
        tbl1.setBackground(java.awt.Color.WHITE);
        tbl1.setGridColor(java.awt.Color.gray);
        JTableHeader header = tbl1.getTableHeader();
        header.setFont(new java.awt.Font("Norasi", java.awt.Font.BOLD, 14));
        //tblBtype.setFont(new java.awt.Font("Norasi", java.awt.Font.BOLD, 14));
        tbl1.setRowHeight(20);
        TableTestFormatRenderer t;
        t = new TableTestFormatRenderer(DoubleFmt);
        t.setHorizontalAlignment(SwingConstants.RIGHT);


        DefaultTableCellRenderer r;
        r = new DefaultTableCellRenderer();
        r.setHorizontalAlignment(SwingConstants.RIGHT);
        DefaultTableCellRenderer c;
        c = new DefaultTableCellRenderer();
        c.setHorizontalAlignment(SwingConstants.CENTER);
        DefaultTableCellRenderer l;
        l = new DefaultTableCellRenderer();
        l.setHorizontalAlignment(SwingConstants.LEFT);

        TableColumnModel tcm = tbl1.getColumnModel();
        tcm.getColumn(0).setCellRenderer(l);
        tcm.getColumn(1).setCellRenderer(l);
        tcm.getColumn(2).setCellRenderer(l);
        tcm.getColumn(3).setCellRenderer(l);
        
        //tcm.getColumn(7).setCellRenderer(FormatCell.color1());

    }

    private void save() {
        if(!t_mcode.isFocusable())
        {
            deletebudrj(t_mcode.getText(),t_pcode.getText());
            insertBudRj();
        }
    }
     private void clear()
     {
        setFocus(false);
         t_mcode.setText("");
        t_pcode.setText("");
        t_pname.setText("");
        t_mcode.requestFocus();
        removedataintble(tbl1);
        tbl1.removeEditor();
     }
//   class PositiveNumericCellEditor extends DefaultCellEditor {
//
//        Class[] argTypes = new Class[]{String.class};
//        java.lang.reflect.Constructor constructor;
//        Object value;
//
//        public PositiveNumericCellEditor() {
//            super(new JTextField());
//            getComponent().setName("Table.editor");
//            ((JTextField)getComponent()).setHorizontalAlignment(JTextField.RIGHT);
//        }
//
//        public boolean stopCellEditing() {
//            String s = (String)super.getCellEditorValue();
//            if ("".equals(s)) {
//                if (constructor.getDeclaringClass() == String.class) {
//                    value = s;
//                }
//                super.stopCellEditing();
//            }
//
//            try {
//                value = constructor.newInstance(new Object[]{s});
//                if (value instanceof Number && ((Number) value).doubleValue() > 0)
//                {
//                    return super.stopCellEditing();
//                } else {
//                    throw new RuntimeException("Input must be a positive number."); 
//                }
//            }
//            catch (Exception e) {
//                ((JComponent)getComponent()).setBorder(new LineBorder(Color.red));
//                return false;
//            }
//        }
//
//        public Component getTableCellEditorComponent(JTable table, Object value,
//                                                 boolean isSelected,
//                                                 int row, int column) {
//            this.value = null;
//            ((JComponent)getComponent()).setBorder(new LineBorder(Color.black));
//            try {
//                Class type = table.getColumnClass(column);
//                if (type == Object.class) {
//                    type = String.class;
//                }
//                constructor = type.getConstructor(argTypes);
//            }
//            catch (Exception e) {
//                return null;
//            }
//            return super.getTableCellEditorComponent(table, value, isSelected, row, column);
//        }
//
//        public Object getCellEditorValue() {
//            return value;
//        }
//    }
     private void setvalueincell(int row,int col)
     {
         String TempRjNo = "";
         double TVat = 0;
         double TTotal = 0;
         
         if(tbl1.getValueAt(row, 19).toString().equals("N"))
         {
            
         }
         else
         {
             for(int i = 0; i<tbl1.getRowCount();i++)
             {
                 if(tbl1.getValueAt(i, 17)!=null||!tbl1.getValueAt(i, 17).toString().equals(""))
                 {
                     TempRjNo = tbl1.getValueAt(i, 17).toString();
                     
                     double total =0;
                     total = Double.parseDouble(tbl1.getValueAt(i, 4).toString())
                             +Double.parseDouble(tbl1.getValueAt(i, 5).toString())
                             +Double.parseDouble(tbl1.getValueAt(i, 6).toString())
                             +Double.parseDouble(tbl1.getValueAt(i, 7).toString())
                             +Double.parseDouble(tbl1.getValueAt(i, 8).toString())
                             +Double.parseDouble(tbl1.getValueAt(i, 9).toString())
                             +Double.parseDouble(tbl1.getValueAt(i, 10).toString())
                             +Double.parseDouble(tbl1.getValueAt(i, 11).toString())
                             +Double.parseDouble(tbl1.getValueAt(i, 12).toString())
                             +Double.parseDouble(tbl1.getValueAt(i, 13).toString())
                             +Double.parseDouble(tbl1.getValueAt(i, 14).toString())
                             +Double.parseDouble(tbl1.getValueAt(i, 15).toString());
                     
                     tbl1.setValueAt(total, i, 16);
                     ProcressSum();
                 }
             }
         }
     }
     private void ProcressSum()
     {
         String TRjNo = "";
         String TDept = "";
         String TProcess = "";
         int TempC = 0;
         String TVat = "";
          try {
        stmt = (Statement) dbUtility.con.createStatement();
        String sql = "";
       
         sql = "select * from temprjt2 where comname = '"+comname+"' order by rjline";
        
        ResultSet rs = stmt.executeQuery(sql);
        while(rs.next())
        {
            if(rs.getString("rjno")!=null)
            {
                TRjNo = rs.getString("rjno");
            }
            else
            {
                TRjNo = "";
            }
            
            if(rs.getString("dept")!=null)
            {
                TDept = rs.getString("dept");
            }
            else
            {
                TDept = "";
            }
            
            if(rs.getString("process")!=null)
            {
                TProcess = rs.getString("process");
            }
            else
            {
                TProcess = "";
            }
            
            if(TProcess.substring(0, 3).equals("SUM"))
            {
                SumRj(TRjNo,TProcess);
            }
            
        }
        
    } catch (Exception e) {
       // JOptionPane.showMessageDialog(this, e);
    }
         
     }

    private void SumRj(String TRjNo, String TProcess) {
        String XRjNo = "";
        int XPoint = 0;
        String XSign = "";
        double XSum1 = 0;
        double XSum2 = 0;
        double XSum3 = 0;
        double XSum4 = 0;
        double XSum5 = 0;
        double XSum6 = 0;
        double XSum7 = 0;
        double XSum8 = 0;
        double XSum9 = 0;
        double XSum10 = 0;
        double XSum11 = 0;
        double XSum12 = 0;
        double XTotal = 0;
        try {
            
       
        for(int i = 0; i<tbl1.getRowCount();i++)
        {
            XRjNo = tbl1.getValueAt(i, 17).toString();
            XPoint = TProcess.indexOf(XRjNo);
            if(XPoint>=0)
            {
                XSign = TProcess.substring(XPoint-1,XPoint);
                if(XSign.equals("-"))
                {
                    XSum1 -= Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 4).toString()));
                    XSum2 -= Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 5).toString()));
                    XSum3 -= Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 6).toString()));
                    XSum4 -= Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 7).toString()));
                    XSum5 -= Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 8).toString()));
                    XSum6 -= Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 9).toString()));
                    XSum7 -= Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 10).toString()));
                    XSum8 -= Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 11).toString()));
                    XSum9 -= Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 12).toString()));
                    XSum10 -= Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 13).toString()));
                    XSum11 -= Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 14).toString()));
                    XSum12 -= Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 15).toString()));
                    XTotal -= Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 16).toString()));
                }
                else
                {
                    XSum1 += Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 4).toString()));
                    XSum2 += Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 5).toString()));
                    XSum3 += Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 6).toString()));
                    XSum4 += Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 7).toString()));
                    XSum5 += Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 8).toString()));
                    XSum6 += Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 9).toString()));
                    XSum7 += Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 10).toString()));
                    XSum8 += Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 11).toString()));
                    XSum9 += Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 12).toString()));
                    XSum10 += Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 13).toString()));
                    XSum11 += Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 14).toString()));
                    XSum12 += Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 15).toString()));
                    XTotal += Double.parseDouble(PUtility.ConvertReal(tbl1.getValueAt(i, 16).toString()));
                }
            }
            
        }
        
        for(int i = 0; i<tbl1.getRowCount();i++)
        {
            
            if(TRjNo.equals(tbl1.getValueAt(i, 17)))
            {
                tbl1.setValueAt(XSum1, i, 4);
                tbl1.setValueAt(XSum2, i, 5);
                tbl1.setValueAt(XSum3, i, 6);
                tbl1.setValueAt(XSum4, i, 7);
                tbl1.setValueAt(XSum5, i, 8);
                tbl1.setValueAt(XSum6, i, 9);
                tbl1.setValueAt(XSum7, i, 10);
                tbl1.setValueAt(XSum8, i, 11);
                tbl1.setValueAt(XSum9, i, 12);
                tbl1.setValueAt(XSum10, i, 13);
                tbl1.setValueAt(XSum11, i, 14);
                tbl1.setValueAt(XSum12, i, 15);
                tbl1.setValueAt(XTotal, i, 16);
                return;
            }
            
        }
      } catch (Exception e) {
          Logger.getLogger(setBudRjFile.class.getName()).log(Level.SEVERE, null, e);
        }   
    }
    private void setzeroincell()
    {
           try {
        int row = tbl1.getSelectedRow();
        int col = tbl1.getSelectedColumn();
        if(row!=-1 && col != -1 && col>3)
        {
        String d = "";
        
                if(tbl1.getValueAt(row, col)!=null)
                {
                    d=tbl1.getValueAt(row, col).toString();
                    if(d.trim().equals(""))
                    {
                        tbl1.setValueAt(0, row, col);
                    }else if(d.equals("0.0"))
                    {
                        tbl1.setValueAt(0, row, col);
                    }
                }
                else
                {
                    tbl1.setValueAt(0, row, col);
                }
        setvalueincell(row,col);
        
        }
        } catch (Exception ex) {
                }
    }
}
