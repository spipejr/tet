/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package reportfile;

import com.mysql.jdbc.Statement;
import dbutility.dbUtility;
import java.awt.Font;
import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import jxl.write.WriteException;
import masterfile.senddatatobranch2;
import net.sf.jasperreports.view.save.JRSingleSheetXlsSaveContributor;
import org.jdesktop.swingx.JXTree;
import reportModel.reportLostDeptModel;
import reportModel.reportSumPluCostModel;
import system.os.utility.ClassPath;
import static system.os.utility.ClassPath.comp;
import utilititiesfunction.*;

/**
 *
 * @author s386
 */
public class rptLostDept extends javax.swing.JDialog {

    /**
     * Creates new form rptLostDept
     */
    public static String date1 = "", date2 = "", dept1 = "", dept2 = "", plu1 = "", plu2 = "", branch1 = "", branch2 = "", btype1 = "", btype2 = "", barea1 = "", barea2 = "", bsize1 = "", bsize2 = "", bplan1 = "", bplan2 = "", bstore1 = "", bstore2 = "", strday = "", company1 = "", company2 = "", brand1 = "", brand2 = "", bustype1 = "", bustype2 = "", code = "", name = "";
    private Font fontbold = new Font("Norasi", Font.BOLD, 14);
    private Font fontplain = new Font("Norasi", Font.PLAIN, 14);
    String frmName = "rptLostDept";
    ThaiUtilities cvth = new ThaiUtilities();
    private String condition = "";
    java.sql.Statement stmt;
    String CompName = "";

    public rptLostDept(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        inittbl();
        CompName = ClassPath.comp;
        getLanguage lang = new getLanguage();
        lang.setText(frmName, this, lang.getChklang());
        setTxt();
    }

    public rptLostDept() {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        db_btnPrint = new javax.swing.JButton();
        btnExit1 = new javax.swing.JButton();
        db_btnExel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new org.jdesktop.swingx.JXTreeTable();
        jPanel6 = new javax.swing.JPanel();
        lbldate = new javax.swing.JLabel();
        db_lblh1 = new javax.swing.JLabel();
        lbldept = new javax.swing.JLabel();
        db_lblh3 = new javax.swing.JLabel();
        db_btnExpand = new javax.swing.JButton();
        ProcessMsg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        db_btnPrint.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        db_btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Printer-icon.png"))); // NOI18N
        db_btnPrint.setText("พิมม์");
        db_btnPrint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        db_btnPrint.setIconTextGap(0);
        db_btnPrint.setName("db_btnPrint"); // NOI18N
        db_btnPrint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        db_btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                db_btnPrintActionPerformed(evt);
            }
        });

        btnExit1.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btnExit1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/LogOut-icon.png"))); // NOI18N
        btnExit1.setText("Exit");
        btnExit1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExit1.setIconTextGap(0);
        btnExit1.setName("db_btnExit"); // NOI18N
        btnExit1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExit1ActionPerformed(evt);
            }
        });

        db_btnExel.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        db_btnExel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Excel-icon.png"))); // NOI18N
        db_btnExel.setText("Exel File");
        db_btnExel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        db_btnExel.setIconTextGap(0);
        db_btnExel.setName("db_btnExel"); // NOI18N
        db_btnExel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        db_btnExel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                db_btnExelActionPerformed(evt);
            }
        });

        tbl.setName("tbl"); // NOI18N
        jScrollPane1.setViewportView(tbl);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbldate.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        lbldate.setText("-");
        lbldate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        db_lblh1.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        db_lblh1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        db_lblh1.setText("วันที่ (Date)");
        db_lblh1.setName("db_lblh1"); // NOI18N

        lbldept.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        lbldept.setText("-");
        lbldept.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        db_lblh3.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        db_lblh3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        db_lblh3.setText("แผนก");
        db_lblh3.setName("db_lblh3"); // NOI18N

        db_btnExpand.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        db_btnExpand.setText("Expand On/Off");
        db_btnExpand.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        db_btnExpand.setIconTextGap(0);
        db_btnExpand.setName("db_btnExpand"); // NOI18N
        db_btnExpand.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        db_btnExpand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                db_btnExpandActionPerformed(evt);
            }
        });

        ProcessMsg.setFont(new java.awt.Font("Norasi", 1, 16)); // NOI18N
        ProcessMsg.setForeground(new java.awt.Color(255, 51, 0));
        ProcessMsg.setText("Process Running");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(db_lblh1)
                        .addGap(18, 18, 18)
                        .addComponent(lbldate, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(db_lblh3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(lbldept, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(db_btnExpand)
                        .addGap(5, 5, 5))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(ProcessMsg)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(db_btnExpand)
                    .addComponent(lbldept, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(db_lblh1)
                        .addComponent(db_lblh3)
                        .addComponent(lbldate, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ProcessMsg)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(db_btnExel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(db_btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(btnExit1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(db_btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(db_btnExel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExit1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void db_btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_db_btnPrintActionPerformed

        // TODO add your handling code here:
  }//GEN-LAST:event_db_btnPrintActionPerformed

    private void btnExit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExit1ActionPerformed
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnExit1ActionPerformed

    private void db_btnExelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_db_btnExelActionPerformed

        Export2Excel test = new Export2Excel();
        JFileChooser chooser = new JFileChooser();
        setTxt();
        try {

            chooser.setSelectedFile(test.getDefaulepath());
            chooser.setFileFilter(new JRSingleSheetXlsSaveContributor(Locale.ENGLISH, null));
            int confirm = chooser.showSaveDialog(this);
            if (confirm == JFileChooser.APPROVE_OPTION) {
                File curFile = chooser.getSelectedFile();

                if (curFile.exists()) {
                    int confirm2 = JOptionPane.showConfirmDialog(this, "ข้อมูลนี้มีอยู่แล้ว คุณต้องการบันทึกรายการนี้หรือไม่...?", "Confirm", JOptionPane.YES_NO_OPTION);
                    if (confirm2 == JOptionPane.NO_OPTION) {
                        test.setDefaultpath(curFile);
                        db_btnExelActionPerformed(null);
                        return;
                    }
                }

                try {
                    test.setOutputFile(curFile.toString());
                    test.writeTreetableContditionNoSum(tbl, tbl.getColumnModel(), condition);
                    test.setDefaultpath(curFile);
                } catch (WriteException ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }

            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_db_btnExelActionPerformed

    private void db_btnExpandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_db_btnExpandActionPerformed
        if (tbl.isExpanded(0)) {
            tbl.collapseAll();
        } else {
            tbl.expandAll();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_db_btnExpandActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(rptLostDept.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(rptLostDept.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(rptLostDept.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(rptLostDept.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                rptLostDept dialog = new rptLostDept(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ProcessMsg;
    private javax.swing.JButton btnExit1;
    private javax.swing.JButton db_btnExel;
    private javax.swing.JButton db_btnExpand;
    private javax.swing.JButton db_btnPrint;
    private javax.swing.JLabel db_lblh1;
    private javax.swing.JLabel db_lblh3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbldate;
    private javax.swing.JLabel lbldept;
    private org.jdesktop.swingx.JXTreeTable tbl;
    // End of variables declaration//GEN-END:variables
private void inittbl() {
        Thread GenReport = new Thread(new rptLostDept.ProcessGen());
        GenReport.start();

    }

    private void getSaleData() {
        String d1 = "";
        String d2 = "";
        String Comp = "";
        try {
            InetAddress addr;
            addr = InetAddress.getLocalHost();
            Comp = addr.getHostName();
        } catch (UnknownHostException ex) {
            Logger.getLogger(ClassPath.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (!date1.equals("")) {
            try {
                Date d = Format.dateFmtShow.parse(date1);
                d1 = Format.dateFmtSql.format(d);
            } catch (ParseException ex) {
                Logger.getLogger(rptLostDept.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (!date2.equals("")) {
            try {
                Date dd = Format.dateFmtShow.parse(date2);
                d2 = Format.dateFmtSql.format(dd);
            } catch (ParseException ex) {
                Logger.getLogger(rptLostDept.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        String sql = "";
        // if (dbutility.dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
        sql = "select pgroup,sum(s_amt) as saleamt,b.code as BranchCode,btype as BTypeCode,"
                + "barea as BAreaCode,bplane as BplaneCode,bstore as BStoreCode,bsize as BSizeCode,"
                + "companycode as CompanyCode,brandcode as BrandCode,buscode as BustypeCode,"
                + "pgroup as PGroupCode  "
                + "from dplu d "
                + "left join product p on d.s_pcode=p.pcode "
                + "left join branfile b on b.code=d.s_bran "
                + "where "
                + "d.s_date>= '" + d1 + "' and d.s_date<='" + d2 + "' "
                + "and p.pgroup >='" + dept1 + "' and p.pgroup <= '" + dept2 + "' "
                + "and d.s_bran >= '" + branch1 + "' and d.s_bran <= '" + branch2 + "' "
                + "and b.btype >= '" + btype1 + "' and b.btype <= '" + btype2 + "' "
                + "and b.barea >= '" + barea1 + "' and b.barea <= '" + barea2 + "' "
                + "and b.bsize >= '" + bsize1 + "' and b.bsize <= '" + bsize2 + "' "
                + "and b.bplane >= '" + bplan1 + "' and b.bplane <= '" + bplan2 + "' "
                + "and b.bstore >= '" + bstore1 + "' and b.bstore <= '" + bstore2 + "' "
                + "and b.companycode >= '" + company1 + "' and b.companycode <= '" + company2 + "' "
                + "and b.brandcode >= '" + brand1 + "' and b.brandcode <= '" + brand2 + "' "
                + "and b.buscode >= '" + bustype1 + "' and b.buscode <= '" + bustype2 + "' "
                + "and locate(dayofweek(d.s_date),'" + strday + "')>0 "
                + "group by " + code + ",pgroup order by " + code + ",pgroup";
        //}
        ResultSet rs = null;
        Statement stmt;
        try {
            stmt = (Statement) dbUtility.con.createStatement();
            rs = stmt.executeQuery(sql);
            rs.last();
            int totrec = rs.getRow();
            int cur = 0;
            rs.first();
            if (rs.getRow() > 0) {
                do {
                    cur++;
                    ProcessMsg.setText("Process Sale Runing : " + cur + " /" + totrec);
                    String GCode = "";
                    if (!code.equals("PGroupCode")) {
                        GCode = rs.getString(code);
                    } else {
                        GCode = "Sum All....";
                    }
                    insertSale(Comp, GCode, rs.getString("pgroup"), rs.getDouble("saleamt"));
                } while (rs.next());
            }
        } catch (SQLException ex) {
            Logger.getLogger(rptSaleOfPlu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getLostData() {
        String d1 = "";
        String d2 = "";
        String Comp = "";
        try {
            InetAddress addr;
            addr = InetAddress.getLocalHost();
            Comp = addr.getHostName();
        } catch (UnknownHostException ex) {
            Logger.getLogger(ClassPath.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (!date1.equals("")) {
            try {
                Date d = Format.dateFmtShow.parse(date1);
                d1 = Format.dateFmtSql.format(d);
            } catch (ParseException ex) {
                Logger.getLogger(rptLostDept.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (!date2.equals("")) {
            try {
                Date dd = Format.dateFmtShow.parse(date2);
                d2 = Format.dateFmtSql.format(dd);
            } catch (ParseException ex) {
                Logger.getLogger(rptLostDept.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        String sql = "";
        //if (dbutility.dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
        sql = "select pgroup,sum(r_amount) as lostamt,b.code as BranchCode,btype as BTypeCode,"
                + "barea as BAreaCode,bplane as BplaneCode,bstore as BStoreCode,bsize as BSizeCode,"
                + "companycode as CompanyCode,brandcode as BrandCode,buscode as BustypeCode,"
                + "pgroup as PGroupCode  "
                + "from prolost d "
                + "left join product p on d.r_pcode=p.pcode "
                + "left join branfile b on b.code=d.s_bran "
                + "where "
                + "d.r_date>= '" + d1 + "' and d.r_date<='" + d2 + "' "
                + "and p.pgroup >='" + dept1 + "' and p.pgroup <= '" + dept2 + "' "
                + "and d.s_bran >= '" + branch1 + "' and d.s_bran <= '" + branch2 + "' "
                + "and b.btype >= '" + btype1 + "' and b.btype <= '" + btype2 + "' "
                + "and b.barea >= '" + barea1 + "' and b.barea <= '" + barea2 + "' "
                + "and b.bsize >= '" + bsize1 + "' and b.bsize <= '" + bsize2 + "' "
                + "and b.bplane >= '" + bplan1 + "' and b.bplane <= '" + bplan2 + "' "
                + "and b.bstore >= '" + bstore1 + "' and b.bstore <= '" + bstore2 + "' "
                + "and b.companycode >= '" + company1 + "' and b.companycode <= '" + company2 + "' "
                + "and b.brandcode >= '" + brand1 + "' and b.brandcode <= '" + brand2 + "' "
                + "and b.buscode >= '" + bustype1 + "' and b.buscode <= '" + bustype2 + "' "
                + "and locate(dayofweek(d.r_date),'" + strday + "')>0 "
                + "group by " + code + ",pgroup order by " + code + ",pgroup";
        //}
        ResultSet rs = null;
        Statement stmt;
        try {
            stmt = (Statement) dbUtility.con.createStatement();
            rs = stmt.executeQuery(sql);
            rs.last();
            int totrec = rs.getRow();
            int cur = 0;
            rs.first();
            if (rs.getRow() > 0) {
                do {
                    cur++;
                    ProcessMsg.setText("Process Waste Runing : " + cur + " /" + totrec);
                    String group = rs.getString("pgroup");
                    String GCode = "";
                    if (!code.equals("PGroupCode")) {
                        GCode = rs.getString(code);
                    } else {
                        GCode = "Sum All....";
                    }
                    if (!seekLost(Comp, GCode, group)) {
                        insertLost(Comp, GCode, rs.getString("pgroup"), rs.getDouble("lostamt"));
                    } else {
                        updateLost(Comp, GCode, group, rs.getDouble("lostamt"));
                    }
                } while (rs.next());
            }
        } catch (SQLException ex) {
            Logger.getLogger(rptSaleOfPlu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void insertSale(String Comp, String GCode, String DeptCode, double SaleAmt) {
        try {
            if (dbutility.dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
                stmt = (Statement) dbUtility.con.createStatement();
                String sql = "insert into tempsalelost (comp,gcode,deptcode,sale,gname,deptname) "
                        + "value (?,?,?,?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(sql);
                prm.setString(1, cvth.Unicode2ASCII(Comp));
                prm.setString(2, cvth.Unicode2ASCII(GCode));
                prm.setString(3, cvth.Unicode2ASCII(DeptCode));
                prm.setDouble(4, SaleAmt);
                prm.setString(5, getGroupName(code, GCode));
                prm.setString(6, PUtility.SeekGroupName(DeptCode));
                prm.executeUpdate();
            } else {
                stmt = (Statement) dbUtility.con.createStatement();
                String sql = "insert into tempsalelost (comp,gcode,deptcode,sale,gname,deptname) "
                        + "value (?,?,?,?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(sql);
                prm.setString(1, Comp);
                prm.setString(2, GCode);
                prm.setString(3, DeptCode);
                prm.setDouble(4, SaleAmt);
                 prm.setString(5, getGroupName(code, GCode));
                prm.setString(6, PUtility.SeekGroupName(DeptCode));
                prm.executeUpdate();
            }
            stmt.close();
        } catch (SQLException ex) {
            Logger.getLogger(rptSaleOfPlu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public String getGroupName(String code, String tcode) {
        String retval = "";
        if (code.equals("BranchCode")) {
            retval = PUtility.SeekBranchName(tcode);
        } else if (code.equals("BTypeCode")) {
            retval = PUtility.SeekBTypeName(tcode);
        } else if (code.equals("BAreaCode")) {
            retval = PUtility.SeekAreaName(tcode);
        } else if (code.equals("BSizeCode")) {
            retval = PUtility.SeekSizeName(tcode);
        } else if (code.equals("BPlaneCode")) {
            retval = PUtility.SeekPlaneName(tcode);
        } else if (code.equals("BStoreCode")) {
            retval = PUtility.SeekStoreName(tcode);
        } else if (code.equals("CompanyCode")) {
            retval = PUtility.SeekComName(tcode);
        } else if (code.equals("BrandCode")) {
            retval = PUtility.SeekBrandName(tcode);
        } else if (code.equals("BustypeCode")) {
            retval = PUtility.SeekBusTypeName(tcode);
        } else if (code.equals("PGroupCode")) {
            retval = PUtility.SeekGroupName(tcode);
        }
        return retval;
    }

    private void insertLost(String Comp, String GCode, String DeptCode, double LostAmt) {
        try {
            if (dbutility.dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
                stmt = (Statement) dbUtility.con.createStatement();
                String sql = "insert into tempsalelost (comp,gcode,deptcode,lost,gname,deptname) "
                        + "value (?,?,?,?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(sql);
                prm.setString(1, cvth.Unicode2ASCII(Comp));
                prm.setString(2, cvth.Unicode2ASCII(GCode));
                prm.setString(3, cvth.Unicode2ASCII(DeptCode));
                prm.setDouble(4, LostAmt);
                prm.setString(5, getGroupName(code, GCode));
                prm.setString(6, PUtility.SeekGroupName(DeptCode));
                prm.executeUpdate();
            } else {
                stmt = (Statement) dbUtility.con.createStatement();
                String sql = "insert into tempsalelost (comp,gcode,deptcode,lost,gname,deptname) "
                        + "value (?,?,?,?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(sql);
                prm.setString(1, Comp);
                prm.setString(2, GCode);
                prm.setString(3, DeptCode);
                prm.setDouble(4, LostAmt);
                prm.setString(5, getGroupName(code, GCode));
                prm.setString(6, PUtility.SeekGroupName(DeptCode));
                prm.executeUpdate();
            }
            stmt.close();
        } catch (SQLException ex) {
            Logger.getLogger(rptSaleOfPlu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updateLost(String Comp, String GCode, String DeptCode, double LostAmt) {
        try {
            if (dbutility.dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
                stmt = (Statement) dbUtility.con.createStatement();
                String sql = "update tempsalelost set lost=?  "
                        + "where comp='" + Comp + "' and gcode='" + GCode + "' and deptcode='" + DeptCode + "' ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(sql);
                prm.setDouble(1, LostAmt);
                prm.setString(2, cvth.Unicode2ASCII(Comp));
                prm.setString(3, cvth.Unicode2ASCII(GCode));
                prm.setString(4, cvth.Unicode2ASCII(DeptCode));
                prm.executeUpdate();
            } else {
                stmt = (Statement) dbUtility.con.createStatement();
                String sql = "update tempsalelost set lost=?  "
                        + "where comp=? and gcode=? and deptcode=? ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(sql);
                prm.setDouble(1, LostAmt);
                prm.setString(2, Comp);
                prm.setString(3, GCode);
                prm.setString(4, DeptCode);

                prm.executeUpdate();
            }
            stmt.close();
        } catch (SQLException ex) {
            Logger.getLogger(rptSaleOfPlu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean seekLost(String Comp, String GCode, String DeptCode) {
        boolean retval = false;
        stmt = null;
        ResultSet rs = null;
        try {
            stmt = (java.sql.Statement) dbUtility.con.createStatement();
            String sql = "select * from tempsalelost  "
                    + "where comp='" + Comp + "' and gcode='" + GCode + "' and deptcode='" + DeptCode + "' ";
            rs = stmt.executeQuery(sql);
            rs.first();
            if (rs.getRow() > 0) {
                retval = true;
            }
            rs.close();
        } catch (Exception e) {
        }
        return retval;
    }

    private void deleteTemp(String Comp) {
        stmt = null;
        ResultSet rs = null;
        try {
            stmt = (java.sql.Statement) dbUtility.con.createStatement();
            String sql = "delete from tempsalelost where comp=?";
            PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(sql);
            prm.setString(1, cvth.Unicode2ASCII(Comp));
            prm.executeUpdate();
        } catch (Exception e) {
        }
    }

    private void setTxt() {
        String date = "";
        String branch = "";
        String dept = "";
        String plu = "";
        if (!date1.equals("")) {
            date = date1 + " - ";
        } else {
            date = " - ";
        }

        if (!date2.equals("31/12/9999")) {
            date += date2;
        }

        if (!branch1.equals("")) {
            branch = branch1 + " - ";
        } else {
            branch = " - ";
        }

        if (!branch2.equals("ZZZ")) {
            branch += branch2;
        }

        if (!dept1.equals("")) {
            dept = dept1 + " - ";
        } else {
            dept = " - ";
        }

        if (!dept2.equals("ZZZZ")) {
            dept += dept2;
        }

        if (!plu1.equals("")) {
            plu = plu1 + " - ";
        } else {
            plu = " - ";
        }

        if (!plu2.equals("ZZZZZZZZZZZZZ")) {
            plu += plu2;
        }

        lbldate.setText(date);
        lbldept.setText(dept);

        condition = this.getTitle() + " Date : " + date + " Dept : " + dept;
    }

    class ProcessGen extends javax.swing.JDialog implements Runnable {

        @Override
        public void run() {
            try {
                TableColumnModel tcm = new DefaultTableColumnModel();

                TableColumn tc1 = new TableColumn(0, 300);
                tc1.setHeaderValue("");
                TableColumn tc2 = new TableColumn(1, 80);
                tc2.setHeaderValue("Dept");
                TableColumn tc3 = new TableColumn(2, 150);
                tc3.setHeaderValue("DeptName");
                TableColumn tc4 = new TableColumn(3, 100);
                tc4.setHeaderValue("Sale");
                TableColumn tc5 = new TableColumn(4, 100);
                tc5.setHeaderValue("Waste");
                TableColumn tc6 = new TableColumn(5, 100);
                tc6.setHeaderValue("Percent");

                tcm.addColumn(tc1);
                tcm.addColumn(tc2);
                tcm.addColumn(tc3);
                tcm.addColumn(tc4);
                tcm.addColumn(tc5);
                tcm.addColumn(tc6);

                tcm.getColumn(0).setCellRenderer(FormatCell.l());
                tcm.getColumn(1).setCellRenderer(FormatCell.l());
                tcm.getColumn(2).setCellRenderer(FormatCell.l());
                tcm.getColumn(3).setCellRenderer(FormatCell.color1());
                tcm.getColumn(4).setCellRenderer(FormatCell.color1());
                tcm.getColumn(5).setCellRenderer(FormatCell.color2());

                tbl.setEditable(false);//ห้ามแก้ไขตาราง
                tbl.setShowGrid(true);
                tbl.setFont(fontplain);
                tbl.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                tbl.setRowSelectionAllowed(true);
                tbl.setBackground(java.awt.Color.WHITE);
                tbl.setGridColor(java.awt.Color.gray);
                tbl.setRowHeight(24);

                tbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                String d1 = "";
                String d2 = "";
                if (!date1.equals("")) {
                    Date d = Format.dateFmtShow.parse(date1);
                    d1 = Format.dateFmtSql.format(d);
                }
                if (!date2.equals("")) {
                    Date dd = Format.dateFmtShow.parse(date2);
                    d2 = Format.dateFmtSql.format(dd);
                }
                String Comp = "";
                try {
                    InetAddress addr;
                    addr = InetAddress.getLocalHost();
                    Comp = addr.getHostName();
                } catch (UnknownHostException ex) {
                    Logger.getLogger(ClassPath.class.getName()).log(Level.SEVERE, null, ex);
                }
                deleteTemp(Comp);
                String sql = "";
                ProcessMsg.setText("Pleass Wait For Process............");
                getSaleData();
                getLostData();
                sql = "SELECT d.gcode,d.gname,d.deptcode,d.deptname,sale as eatqty,lost as eatamt "
                        + "FROM tempsalelost d "
                        + "left join groupfile on d.deptcode=groupcode "
                        + "where comp='" + Comp + "' "
                        + "order by gcode,deptcode ";

                reportLostDeptModel treemodel = new reportLostDeptModel(sql, code, name);
                tbl.setTreeTableModel(treemodel);
                tbl.setColumnModel(tcm);
                tbl.setRootVisible(true);
                ((JXTree) tbl.getCellRenderer(0, tbl.getHierarchicalColumn())).setFont(fontplain);
                setTxt();
                JTableHeader h = tbl.getTableHeader();
                h.setFont(fontbold);
                //   h.setReorderingAllowed(false);
                tbl.setLeafIcon(null);
            } catch (ParseException ex) {
                Logger.getLogger(rptSaleOfPlu.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(rptSaleOfPlu.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }
}
