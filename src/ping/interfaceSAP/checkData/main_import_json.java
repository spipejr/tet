/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ping.interfaceSAP.checkData;

import borfunction.btnFind;
import java.awt.Color;
import java.io.File;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JProgressBar;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;
import ping.interfaceSAP.entity.RESULTSAPXML;
import ping.interfaceSAP.entity.borpathsetup;
import ping.interfaceSAP.eventFocus;
import ping.interfaceSAP.formatDateNum;
import ping.interfaceSAP.showMessage;
import ping.interfaceSAP.utilitySAP;
import utilities.DateChooser.DateUtil;

/**
 *
 * @author soneping
 */
public class main_import_json extends javax.swing.JDialog {

    /**
     * Creates new form main_import_json
     */
    DefaultTableModel model;
    btnFind btnf = new btnFind();
    formatDateNum fdn = new formatDateNum();
    utilitySAP us = new utilitySAP();
    eventFocus ef = new eventFocus();
    ArrayList<String> listFile = new ArrayList<String>();
    ArrayList<String> listFileLost = new ArrayList<String>();
    borpathsetup bps = new borpathsetup();
    RESULTSAPXML rsx = new RESULTSAPXML();
    final String fixFileName = "RESULTSAPXML";
    final String fixFileNameLost = "ArticleLost";
    String mainPath = "";
    String mainPath_backup = "";

    public main_import_json(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        model = us.setTable(jTable1, "6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25", "0,1,2,3,4", "5");
        bps.seekBORPathSetup();
        mainPath = bps.getPath_resultsap();
        mainPath_backup = bps.getPath_resultsap_backup();

        clearForm();
        ef.setFocusSwing(txt_dateimport);
        ef.setFocusSwing(txt_date);
        ef.setFocusSwing(txt_branch1);
        ef.setFocusSwing(txt_branch2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txt_havedataimport = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btn_exit = new javax.swing.JButton();
        txt_dateimport = new javax.swing.JTextField();
        skbtn_dateimport = new javax.swing.JButton();
        btn_import = new javax.swing.JButton();
        progressB1 = new javax.swing.JProgressBar();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea_import = new javax.swing.JTextArea();
        txt_summaryimport = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        txt_date = new javax.swing.JTextField();
        skbtn_date = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        txt_branch1 = new javax.swing.JTextField();
        skbtn_branch1 = new javax.swing.JButton();
        skbtn_branch2 = new javax.swing.JButton();
        txt_branch2 = new javax.swing.JTextField();
        btn_process = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txt_totalbranch = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Import Result SAP From Branch");

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txt_havedataimport.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        txt_havedataimport.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_havedataimport.setText("txt_havedataimport");

        jLabel1.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        jLabel1.setText("Import Result SAP From Branch");

        btn_exit.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btn_exit.setText("Exit");
        btn_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_exitActionPerformed(evt);
            }
        });

        txt_dateimport.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        txt_dateimport.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_dateimport.setText("txt_dateimport");
        txt_dateimport.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_dateimportKeyPressed(evt);
            }
        });

        skbtn_dateimport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Date-and-Time-icon .png"))); // NOI18N
        skbtn_dateimport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skbtn_dateimportActionPerformed(evt);
            }
        });

        btn_import.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btn_import.setText("Import Data");
        btn_import.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_importActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_havedataimport, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_dateimport, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(skbtn_dateimport, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_import, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_havedataimport)
                    .addComponent(jLabel1)
                    .addComponent(txt_dateimport)
                    .addComponent(skbtn_dateimport, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_import, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(btn_exit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        progressB1.setFont(new java.awt.Font("Norasi", 0, 12)); // NOI18N

        jTabbedPane1.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N

        txtArea_import.setColumns(20);
        txtArea_import.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        txtArea_import.setRows(5);
        jScrollPane1.setViewportView(txtArea_import);

        txt_summaryimport.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        txt_summaryimport.setText("jTextField1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 944, Short.MAX_VALUE)
                    .addComponent(txt_summaryimport))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_summaryimport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Data Import", jPanel2);

        jPanel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_date.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        txt_date.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_date.setText("txt_date");
        txt_date.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_dateKeyPressed(evt);
            }
        });
        jPanel4.add(txt_date, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, 100, -1));

        skbtn_date.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Date-and-Time-icon .png"))); // NOI18N
        skbtn_date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skbtn_dateActionPerformed(evt);
            }
        });
        jPanel4.add(skbtn_date, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 30, 40, 34));

        jLabel2.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("วันที่");
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 40, 35));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "ช่วงสาขา", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Norasi", 0, 14))); // NOI18N
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_branch1.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        txt_branch1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_branch1.setText("001");
        txt_branch1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_branch1KeyPressed(evt);
            }
        });
        jPanel5.add(txt_branch1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 40, -1));

        skbtn_branch1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Windows-Magnifier-icon.png"))); // NOI18N
        skbtn_branch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skbtn_branch1ActionPerformed(evt);
            }
        });
        jPanel5.add(skbtn_branch1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, 40, 34));

        skbtn_branch2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Windows-Magnifier-icon.png"))); // NOI18N
        skbtn_branch2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skbtn_branch2ActionPerformed(evt);
            }
        });
        jPanel5.add(skbtn_branch2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 40, 34));

        txt_branch2.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        txt_branch2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_branch2.setText("001");
        txt_branch2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_branch2KeyPressed(evt);
            }
        });
        jPanel5.add(txt_branch2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 30, 40, -1));

        jPanel4.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 190, 80));

        btn_process.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btn_process.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Hourglass-icon.png"))); // NOI18N
        btn_process.setText("ประมวลผล");
        btn_process.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_processActionPerformed(evt);
            }
        });
        jPanel4.add(btn_process, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 150, 60));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "วันที่", "สาขา", "Site", "Conditiontype", "totolArticleLost", "ZGTINT04", "ZGTINT04_Error", "ZRTINT05", "ZRTINT05_Article", "ZRTINT05_Error", "ZRTINT08_303", "ZRTINT08_303_Article", "ZRTINT08_303_Error", "ZRTINT08_305", "ZRTINT08_305_Article", "ZRTINT08_305_Error", "ZRTINT10", "ZRTINT10_Article", "ZRTINT10_Error", "ZRTINT10_ZPOS", "ZRTINT15", "ZRTINT15_Article", "ZRTINT15_Error", "ZRTINT16", "ZRTINT16_Article", "ZRTINT16_Error"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(80);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(90);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(120);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(80);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(7).setPreferredWidth(80);
            jTable1.getColumnModel().getColumn(8).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(9).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(10).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(11).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(12).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(13).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(14).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(15).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(16).setPreferredWidth(80);
            jTable1.getColumnModel().getColumn(17).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(18).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(19).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(20).setPreferredWidth(80);
            jTable1.getColumnModel().getColumn(21).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(22).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(23).setPreferredWidth(80);
            jTable1.getColumnModel().getColumn(24).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(25).setPreferredWidth(130);
        }

        txt_totalbranch.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        txt_totalbranch.setText("jTextField1");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 968, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(txt_totalbranch))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txt_totalbranch, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("รายงานข้อมูลการรับเข้า", jPanel3);

        jMenu1.setText("Report");
        jMenu1.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N

        jMenuItem1.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jMenuItem1.setText("รายงานแสดงรายละเอียดข้อมูลการรับเข้า");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressB1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressB1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        setBounds(0, 0, 1010, 780);
    }// </editor-fold>//GEN-END:initComponents

    private void skbtn_dateimportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skbtn_dateimportActionPerformed
        DateUtil.showDateChooserDialog(txt_dateimport, skbtn_dateimport);
        txt_dateimport.requestFocus();
    }//GEN-LAST:event_skbtn_dateimportActionPerformed

    private void btn_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_exitActionPerformed
        dispose();
    }//GEN-LAST:event_btn_exitActionPerformed

    private void txt_dateimportKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_dateimportKeyPressed
        if (evt.getKeyCode() == evt.VK_F1) {
            skbtn_dateimportActionPerformed(null);
        } else if (evt.getKeyCode() == evt.VK_F5) {
            btn_importActionPerformed(null);
        } else if (evt.getKeyCode() == evt.VK_ESCAPE) {
            btn_exitActionPerformed(null);
        }
    }//GEN-LAST:event_txt_dateimportKeyPressed

    private void btn_importActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_importActionPerformed
        processImport();
    }//GEN-LAST:event_btn_importActionPerformed

    private void txt_dateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_dateKeyPressed
        if (evt.getKeyCode() == evt.VK_F1) {
            skbtn_dateActionPerformed(null);
        } else if (evt.getKeyCode() == evt.VK_F5) {
            btn_processActionPerformed(null);
        } else if (evt.getKeyCode() == evt.VK_ESCAPE) {
            btn_exitActionPerformed(null);
        }
    }//GEN-LAST:event_txt_dateKeyPressed

    private void skbtn_dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skbtn_dateActionPerformed
        DateUtil.showDateChooserDialog(txt_date, skbtn_date);
        txt_date.requestFocus();
    }//GEN-LAST:event_skbtn_dateActionPerformed

    private void txt_branch1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_branch1KeyPressed
        if (evt.getKeyCode() == evt.VK_F1) {
            skbtn_branch1ActionPerformed(null);
        } else if (evt.getKeyCode() == evt.VK_F5) {
            btn_processActionPerformed(null);
        } else if (evt.getKeyCode() == evt.VK_ESCAPE) {
            btn_exitActionPerformed(null);
        }
    }//GEN-LAST:event_txt_branch1KeyPressed

    private void skbtn_branch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skbtn_branch1ActionPerformed
        btnf.btnFindBranch(txt_branch1);
    }//GEN-LAST:event_skbtn_branch1ActionPerformed

    private void skbtn_branch2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skbtn_branch2ActionPerformed
        btnf.btnFindBranch(txt_branch2);
    }//GEN-LAST:event_skbtn_branch2ActionPerformed

    private void txt_branch2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_branch2KeyPressed
        if (evt.getKeyCode() == evt.VK_F1) {
            skbtn_branch2ActionPerformed(null);
        } else if (evt.getKeyCode() == evt.VK_F5) {
            btn_processActionPerformed(null);
        } else if (evt.getKeyCode() == evt.VK_ESCAPE) {
            btn_exitActionPerformed(null);
        }
    }//GEN-LAST:event_txt_branch2KeyPressed

    private void btn_processActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_processActionPerformed
        process();
    }//GEN-LAST:event_btn_processActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() == 2) {
            int row = jTable1.getSelectedRow();
            
            String date = jTable1.getValueAt(row, 0).toString();
            String branch = jTable1.getValueAt(row, 1).toString();
            
            main_browse_detail mbd = new main_browse_detail(null, true, date, branch);
            mbd.setVisible(true);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        main_import_detail frm = new main_import_detail(null, true);
        frm.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main_import_json.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main_import_json.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main_import_json.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main_import_json.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                main_import_json dialog = new main_import_json(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_exit;
    private javax.swing.JButton btn_import;
    private javax.swing.JButton btn_process;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JProgressBar progressB1;
    private javax.swing.JButton skbtn_branch1;
    private javax.swing.JButton skbtn_branch2;
    private javax.swing.JButton skbtn_date;
    private javax.swing.JButton skbtn_dateimport;
    private javax.swing.JTextArea txtArea_import;
    private javax.swing.JTextField txt_branch1;
    private javax.swing.JTextField txt_branch2;
    private javax.swing.JTextField txt_date;
    private javax.swing.JTextField txt_dateimport;
    private javax.swing.JTextField txt_havedataimport;
    private javax.swing.JTextField txt_summaryimport;
    private javax.swing.JTextField txt_totalbranch;
    // End of variables declaration//GEN-END:variables
    private void loadFileRESULTSAP(boolean open) {
        try {
            if (txt_dateimport.getText().trim().length() <= 0) {
                return;
            }
            String _date = fdn.convertDateshowToSQL(txt_dateimport.getText().trim());
            listFile = new ArrayList<String>();
            listFileLost = new ArrayList<String>();
            File folder = new File(mainPath);
            File[] listOfFiles = folder.listFiles();
            if (listOfFiles != null) {
                if (listOfFiles.length > 0) {
                    for (int i = 0; i < listOfFiles.length; i++) {
                        String pathToFile = listOfFiles[i].getAbsoluteFile().toString();
                        String fileName = listOfFiles[i].getName();

                        if ((fileName.indexOf(".csv") > 0)
                                && (fileName.substring(fileName.length() - 4, fileName.length()).equals(".csv"))) {
                            String[] spli = fileName.split("_");
                            String str = "";
                            String date = spli[0].substring(0, 4) + "-" + spli[0].substring(4, 6) + "-" + spli[0].substring(6, 8);
                            String branch = spli[1];

                            if (open) {
                                str = pathToFile + "||" + fileName + "||" + date + "||" + branch;
                                if ((fileName.indexOf(fixFileName) >= 0)) {
                                    listFile.add(str);
                                } else if ((fileName.indexOf(fixFileNameLost) >= 0)) {
                                    listFileLost.add(str);
                                }
                            } else if (_date.equals(date)) {
                                str = pathToFile + "||" + fileName + "||" + date + "||" + branch;
                                if ((fileName.indexOf(fixFileName) >= 0)) {
                                    listFile.add(str);
                                } else if ((fileName.indexOf(fixFileNameLost) >= 0)) {
                                    listFileLost.add(str);
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clearForm() {
        us.resetTable(model);

        us.closeTextFiled(txt_totalbranch, true);
        us.closeTextFiled(txt_havedataimport, true);
        us.closeTextFiled(txt_summaryimport, true);
        txt_dateimport.setText(fdn.dateFmtShow(fdn.nowDate()));
        txt_date.setText(fdn.dateFmtShow(fdn.nowDate()));
        us.openTextFiled(txt_dateimport, false, true);
        us.openTextFiled(txt_branch1, true, false);
        us.openTextFiled(txt_branch2, true, false);

        loadFileRESULTSAP(true);
        if (listFile.size() > 0) {
            txt_havedataimport.setText("Have Data");
            txt_havedataimport.setBackground(Color.GREEN);
        } else {
            txt_havedataimport.setText("No Data");
            txt_havedataimport.setBackground(Color.RED);
        }
    }

    private void processImport() {
        loadFileRESULTSAP(false);
        btn_import.setEnabled(false);
        jTabbedPane1.setSelectedIndex(0);
        new processMainThread(progressB1, txtArea_import).start();
        btn_import.setEnabled(true);
        us.openTextFiled(txt_dateimport, false, true);
    }

    private void process() {
        us.resetTable(model);
        String strdate = fdn.convertDateshowToSQL(txt_date.getText().trim());
        String branch1 = (txt_branch1.getText().trim());
        String branch2 = (txt_branch2.getText().trim().length() <= 0 ? "ZZZ" : txt_branch2.getText().trim());

        String sql = "select "
                + "rs.strdate as sdate, "
                + "rs.branchcode as bcode, "
                + "rs.sitecode as scode, "
                + "rs.sitecondition as scondi, "
                + "(case when rs.ZGLINT04_haveData = 'Y' then 'มีข้อมูล' else '-' end) as zglint04, "
                + "(case when rs.ZGLINT04_haveData = 'N' then '-' else rs.ZGLINT04_error end) as zglint04error, "
                + "(case when rs.ZRTINT05_haveData = 'Y' then 'มีข้อมูล' else '-' end) as zrtint05, "
                + "(case when rs.ZRTINT05_haveData = 'N' then '-' else rs.ZRTINT05_haveArticle end) as zrtint05article, "
                + "(case when rs.ZRTINT05_haveData = 'N' then '-' else rs.ZRTINT05_error end) as zrtint05error, "
                + "(case when rs.ZRTINT08_303_haveData = 'Y' then 'มีข้อมูล' else '-' end) as zrtint08303, "
                + "(case when rs.ZRTINT08_303_haveData = 'N' then '-' else rs.ZRTINT08_303_haveArticle end) as zrtint08303article, "
                + "(case when rs.ZRTINT08_303_haveData = 'N' then '-' else rs.ZRTINT08_303_error end) as zrtint08303error, "
                + "(case when rs.ZRTINT08_305_haveData = 'Y' then 'มีข้อมูล' else '-' end) as zrtint08305, "
                + "(case when rs.ZRTINT08_305_haveData = 'N' then '-' else rs.ZRTINT08_305_haveArticle end) as zrtint08305article, "
                + "(case when rs.ZRTINT08_305_haveData = 'N' then '-' else rs.ZRTINT08_305_error end) as zrtint08305error, "
                + "(case when rs.ZRTINT10_haveData = 'Y' then 'มีข้อมูล' else '-' end) as zrtint10, "
                + "(case when rs.ZRTINT10_haveData = 'N' then '-' else rs.ZRTINT10_haveArticle end) as zrtint10article, "
                + "(case when rs.ZRTINT10_haveData = 'N' then '-' else rs.ZRTINT10_error end) as zrtint10error, "
                + "(case when rs.ZRTINT10_haveData = 'N' then '0.00' else rs.ZRTINT10_zPOS end) as zrtint10zpos, "
                + "(case when rs.ZRTINT15_haveData = 'Y' then 'มีข้อมูล' else '-' end) as zrtint15, "
                + "(case when rs.ZRTINT15_haveData = 'N' then '-' else rs.ZRTINT15_haveArticle end) as zrtint15article, "
                + "(case when rs.ZRTINT15_haveData = 'N' then '-' else rs.ZRTINT15_error end) as zrtint15error, "
                + "(case when rs.ZRTINT16_haveData = 'Y' then 'มีข้อมูล' else '-' end) as zrtint16, "
                + "(case when rs.ZRTINT16_haveData = 'N' then '-' else rs.ZRTINT16_haveArticle end) as zrtint16article, "
                + "(case when rs.ZRTINT16_haveData = 'N' then '-' else rs.ZRTINT16_error end) as zrtint16error, "
                + "count(al.plu) as totolArticleLost "
                + "from resultsapxml rs "
                + "left join articlelost al on rs.strdate=al.strdate and rs.branchcode=al.branchcode "
                + "where rs.strdate=? and (rs.branchcode>=? and rs.branchcode<=?) "
                + "group by rs.strdate, rs.branchcode "
                + "order by rs.strdate, rs.ZRTINT10_zPOS desc, rs.branchtype, rs.branchcode";

        PreparedStatement ps = null;
        ResultSet rs = null;
        int branchByday = 0;
        try {
            ps = dbutility.dbUtility.con.prepareStatement(sql);
            ps.setString(1, strdate);
            ps.setString(2, branch1);
            ps.setString(3, branch2);
            rs = ps.executeQuery();
            rs.first();
            if (rs.getRow() != 0) {
                do {
                    branchByday++;
                    model.addRow(new Object[]{
                        fdn.convertDatesqlToShow(rs.getString("sdate")),
                        rs.getString("bcode"),
                        rs.getString("scode"),
                        rs.getString("scondi"),
                        rs.getString("totolArticleLost"),
                        rs.getString("zglint04"),
                        rs.getString("zglint04error"),
                        rs.getString("zrtint05"),
                        rs.getString("zrtint05article"),
                        rs.getString("zrtint05error"),
                        rs.getString("zrtint08303"),
                        rs.getString("zrtint08303article"),
                        rs.getString("zrtint08303error"),
                        rs.getString("zrtint08305"),
                        rs.getString("zrtint08305article"),
                        rs.getString("zrtint08305error"),
                        rs.getString("zrtint10"),
                        rs.getString("zrtint10article"),
                        rs.getString("zrtint10error"),
                        rs.getString("zrtint10zpos"),
                        rs.getString("zrtint15"),
                        rs.getString("zrtint15article"),
                        rs.getString("zrtint15error"),
                        rs.getString("zrtint16"),
                        rs.getString("zrtint16article"),
                        rs.getString("zrtint16error")
                    });
                } while(rs.next());
            }
            txt_totalbranch.setText("จำนวนสาขาที่มีการส่งข้อมูลเข้า(" + txt_date.getText().trim() + ")ทั้งหมด " + branchByday + " สาขา");
        } catch (Exception e) {
            e.printStackTrace();
            new showMessage().showMessageError(e.getMessage(), "main_import_json.process");
        } finally {
            closePS(ps);
            closeRS(rs);
        }
    }

    private void closePS(PreparedStatement ps) {
        try {
            if (ps != null) {
                ps.close();
                ps = null;
            }
        } catch (Exception e) {
        }
    }

    private void closeRS(ResultSet rs) {
        try {
            if (rs != null) {
                rs.close();
                rs = null;
            }
        } catch (Exception e) {
        }
    }
    
    class processMainThread extends Thread {

        JProgressBar _progress;
        JTextArea _area;

        public processMainThread(JProgressBar progress, JTextArea area) {
            super();
            _progress = progress;
            _area = area;
        }

        public void run() {
            _progress.setStringPainted(true);
            _progress.setString("Data " + listFile.size() + " / 0");
            _progress.setMaximum(listFile.size());
            _progress.setValue(0);

            splitData();

            _progress.setString("Import Data Complete");
        }

        void splitData() {
            jTabbedPane1.setSelectedIndex(0);
            File _f = null;
            try {
                for (int i = 0; i < listFileLost.size(); i++) {
                    String[] sp = listFileLost.get(i).split("\\|\\|");
                    String path2file = sp[0];
                    String fileName = sp[1];
                    String strdate = sp[2];
                    String branch = sp[3];

                    if (us.copyFileProcess(path2file, mainPath_backup + "/" + fileName)) {
                        _f = new File(path2file);
                        _f.delete();
                    }
                }
                int totalRec = 0;
                for (int i = 0; i < listFile.size(); i++) {
                    _progress.setString("Data " + listFile.size() + " / " + (i + 1));
                    _progress.setValue((i + 1));

                    String[] sp = listFile.get(i).split("\\|\\|");
                    String path2file = sp[0];
                    String fileName = sp[1];
                    String strdate = sp[2];
                    String branch = sp[3];

                    _area.append("File " + fileName + "\t\t" + "Date " + strdate + "\t\t" + "Branch " + branch + "\n");
                    _area.setCaretPosition(_area.getDocument().getLength());
                    rsx.readFile(path2file, strdate);
                    totalRec++;

                    if (us.copyFileProcess(path2file, mainPath_backup + "/" + fileName)) {
                        _f = new File(path2file);
                        _f.delete();
                    }
                    Thread.sleep(1500);
                }
                txt_summaryimport.setText("Import total " + totalRec + " Item(s)");
            } catch (Exception e) {
                new showMessage().showMessageError(e.getMessage(), "splitData");
            }
        }
    }
}
