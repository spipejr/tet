/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ping.interfaceSAP.mapMaster;

import dbutility.dbUtility;
import directory_utility.DirectoryUtility;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import static masterfile.PostData.OS;
import ping.interfaceSAP.entity.article;
import ping.interfaceSAP.entity.site;
import ping.interfaceSAP.eventFocus;
import ping.interfaceSAP.showMessage;
import ping.interfaceSAP.utilitySAP;
import system.os.utility.ClassPath;
import utilititiesfunction.Format;
import utilititiesfunction.ThaiUtilities;
import utilititiesfunction.UserLogin;

/**
 *
 * @author soneping
 */
public class imp_voiduser_csv extends javax.swing.JDialog {

    article ar = new article();
    site si = new site();
    utilitySAP us = new utilitySAP();
    eventFocus ef = new eventFocus();
    private Statement stmt;
    ThaiUtilities cvth = new ThaiUtilities();
    String DataPath = "";
    String BackupPath = "";
    String PathTemp = "";
    String PathConvert = "";
    static boolean processStop;
    static String FileCharset = "UTF-8";

    public imp_voiduser_csv(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        DataPath = ClassPath.datapath;
        BackupPath = ClassPath.backuppath;
        PathTemp = ClassPath.PathTemp;
        PathConvert = ClassPath.PathConvert;
        ef.setFocusSwing(txt_aritcle);

        jTabbedPane1.setSelectedIndex(0);
        jTabbedPane1.setFocusable(false);

        btn_article.setFocusable(false);
        btn_updateArticle.setFocusable(false);
        us.openTextFiled(txt_aritcle, true, true);
        areaArticle.setFocusable(false);
        areaArticle.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txt_aritcle = new javax.swing.JTextField();
        btn_article = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaArticle = new javax.swing.JTextArea();
        btn_updateArticle = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Import CSV File (User Void Control)");

        jTabbedPane1.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Norasi", 1, 15)); // NOI18N
        jLabel1.setText("Path to file");

        txt_aritcle.setFont(new java.awt.Font("Norasi", 1, 15)); // NOI18N
        txt_aritcle.setText("jTextField1");
        txt_aritcle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_aritcleKeyPressed(evt);
            }
        });

        btn_article.setFont(new java.awt.Font("Norasi", 1, 15)); // NOI18N
        btn_article.setText("...");
        btn_article.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_articleActionPerformed(evt);
            }
        });

        areaArticle.setColumns(20);
        areaArticle.setRows(5);
        jScrollPane1.setViewportView(areaArticle);

        btn_updateArticle.setFont(new java.awt.Font("Norasi", 1, 15)); // NOI18N
        btn_updateArticle.setText("Update");
        btn_updateArticle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateArticleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_aritcle, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_article, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
                    .addComponent(btn_updateArticle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_aritcle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_article, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_updateArticle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Void User Control", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        setSize(new java.awt.Dimension(651, 378));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_updateArticleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateArticleActionPerformed
        new processMainThread(txt_aritcle, areaArticle).start();
    }//GEN-LAST:event_btn_updateArticleActionPerformed

    private void btn_articleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_articleActionPerformed
        browsePathToFile(txt_aritcle, btn_article);
    }//GEN-LAST:event_btn_articleActionPerformed

    private void txt_aritcleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_aritcleKeyPressed
        if (evt.getKeyCode() == evt.VK_F1) {
            browsePathToFile(txt_aritcle, btn_article);
        } else if (evt.getKeyCode() == evt.VK_ESCAPE) {
            dispose();
        } else if (evt.getKeyCode() == evt.VK_F5) {
            btn_updateArticleActionPerformed(null);
        }
    }//GEN-LAST:event_txt_aritcleKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(imp_voiduser_csv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(imp_voiduser_csv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(imp_voiduser_csv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(imp_voiduser_csv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                imp_voiduser_csv dialog = new imp_voiduser_csv(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaArticle;
    private javax.swing.JButton btn_article;
    private javax.swing.JButton btn_updateArticle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField txt_aritcle;
    // End of variables declaration//GEN-END:variables
    private void browsePathToFile(JTextField txt, JButton btn) {
        JFileChooser chooser = new JFileChooser();
        chooser.setLocation(btn.getX(), btn.getY());
        chooser.setCurrentDirectory(new File("."));
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.showOpenDialog(null);
        File selectedPfile = chooser.getSelectedFile();
        try {
            txt.setText(selectedPfile.getCanonicalPath());
            txt.setFocusable(true);
            txt.requestFocus();
        } catch (IOException ex) {
            new showMessage().showMessageError(ex.getMessage(), "browsePathToFile");
        } finally {
            txt.requestFocus();
        }
    }

    public String GetDataFileName(String fBran, String ftype, Date fdate) {
        String ReturnVal = "";
        ReturnVal = PathTemp + "/" + ftype + Format.dateTextShort.format(fdate) + "." + fBran;
        return ReturnVal;
    }

    public void ConverCharSet(String inFile, String inCharsetName, String outFile, String outCharsetName) {
        DirectoryUtility dirUtil = new DirectoryUtility();
        try {
            dirUtil.getFileAndCreateDir(outFile);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        try {
            InputStreamReader in = new InputStreamReader(
                    new FileInputStream(inFile), inCharsetName);
            OutputStreamWriter out = new OutputStreamWriter(
                    new FileOutputStream(outFile), outCharsetName);
            int c = in.read();
            int n = 0;
            while (c != -1) {
                out.write(c);
                n++;
                c = in.read();
            }
            in.close();
            out.close();
        } catch (IOException e) {
            System.out.println(e.toString());
        }
    }

    private void processImport(JTextField path2file, JTextArea area) {
        String centFileName;
        if (OS.equalsIgnoreCase("linux")) {
            String inFile = path2file.getText();
            String inCharset = "TIS-620";
            String outFile = "/spapplication/temp/sur_csv.csv";
            String outCharset = "UTF-8";
            ConverCharSet(inFile, inCharset, outFile, outCharset);
            centFileName = outFile;
        } else {
            centFileName = path2file.getText();
        }
        //------------------------------------------
        int haveSAP = 0;
        int totalSAP = 0;
        int havePro = 0;
        int totalPro = 0;

        area.setText("");
        int tab = jTabbedPane1.getSelectedIndex();
        //String strPath2File = path2file.getText();
        String strPath2File = centFileName;
        String strFile = "";
        File fObject = null;
        if (strPath2File.length() <= 0) {
            path2file.requestFocus();
        } else {
            fObject = new File(centFileName);
            strFile = fObject.getName();

            int index = strFile.indexOf(".csv");
            if (strFile.substring(index, strFile.length()).equals(".csv")) {
                if (!fObject.canRead()) {
                    new showMessage().showMessageError("ไม่สามารถอ่านไฟล์ได้", "processImport(" + path2file + ")");
                } else {
                    try {
                        boolean eof = false;
                        FileReader file = new FileReader(centFileName);
                        BufferedReader buff = new BufferedReader(file);
                        while (!eof) {
                            String line = buff.readLine();
                            if (line == null) {
                                eof = true;
                            } else if (!line.equals("")) {
                                String StrS[] = line.split("\u0009", line.length());
                                insertNew(StrS);
                                area.append(line + "\n");
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        new showMessage().showMessageError(e.getMessage(), "processImport");
                    } finally {
                        area.append("\n");
                        area.append("\n");
                        area.append("=======================================");
                        area.append("\n");
                        if (tab == 0) {
                            area.append("Have Article " + haveSAP + " / " + totalSAP + "\n");
                            area.append("Have PLU " + havePro + " / " + totalPro + "\n");
                        } else {

                        }
                        area.setCaretPosition(area.getDocument().getLength());
                        new showMessage().showMessageInformation("Import Finish.", " Import ProcessImport");
//                        dispose();
                    }
                }
            } else {
                us.openTextFiled(path2file, false, true);
            }
        }
    }

    public boolean chkdata(String pk) {
        boolean chk = false;
        ResultSet rs = null;
        try {
            if (!dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
                stmt = (Statement) dbUtility.con.createStatement();
                String sql = "select * from voiduser where u_code ='" + cvth.Unicode2ASCII(pk) + "'";
                rs = stmt.executeQuery(sql);
                if (rs.next()) {
                    chk = true;
                }
            } else {
                stmt = (Statement) dbUtility.con.createStatement();
                String sql = "select * from voiduser where u_code ='" + pk + "'";
                rs = stmt.executeQuery(sql);
                if (rs.next()) {
                    chk = true;
                }
            }
        } catch (Exception e) {
        }
        return chk;
    }

    public void insertNew(String StrS[]) {
        if (chkdata(StrS[0])) {
            try {
                if (!dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
                    stmt = (Statement) dbUtility.con.createStatement();
                    String sql = "Update voiduser set u_name=?,u_position=?,u_phone=?,u_email=? "
                            + "where u_code = ?";
                    PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(sql);
                    prm.setString(1, cvth.Unicode2ASCII(StrS[1]));
                    prm.setString(2, cvth.Unicode2ASCII(StrS[2]));
                    prm.setString(3, cvth.Unicode2ASCII(StrS[3]));
                    prm.setString(4, cvth.Unicode2ASCII(StrS[4]));
                    prm.setString(5, cvth.Unicode2ASCII(StrS[0]));
                    prm.executeUpdate();
                } else {
                    stmt = (Statement) dbUtility.con.createStatement();
                    String sql = "Update voiduser set u_name=?,u_position=?,u_phone=?,u_email=? "
                            + "where u_code = ?";
                    PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(sql);
                    prm.setString(1, StrS[1]);
                    prm.setString(2, StrS[2]);
                    prm.setString(3, StrS[3]);
                    prm.setString(4, StrS[4]);
                    prm.setString(5, StrS[0]);
                    prm.executeUpdate();
                }
                stmt.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Update Void User Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            try {
                if (!dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
                    stmt = (Statement) dbUtility.con.createStatement();
                    String sql = "Insert into voiduser (u_code,u_name,u_position,u_phone,u_email) "
                            + " values(?,?,?,?,?)";
                    PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(sql);
                    prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                    prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                    prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                    prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                    prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                    prm.executeUpdate();
                } else {
                    stmt = (Statement) dbUtility.con.createStatement();
                    String sql = "Insert into voiduser (u_code,u_name,u_position,u_phone,u_email) "
                            + " values(?,?,?,?,?)";
                    PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(sql);
                    prm.setString(1, StrS[0]);
                    prm.setString(2, StrS[1]);
                    prm.setString(3, StrS[2]);
                    prm.setString(4, StrS[3]);
                    prm.setString(5, StrS[4]);
                    prm.executeUpdate();
                }
                stmt.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Insert Void User Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    class processMainThread extends Thread {

        JTextField path2file;
        JTextArea area;

        public processMainThread(JTextField path2file, JTextArea area) {
            super();
            this.path2file = path2file;
            this.area = area;
        }

        public void run() {
            processImport(this.path2file, this.area);
        }
    }

    private void checkuserconfig() {
        UserLogin userrec = UserLogin.userlogin;
        if (userrec.getTran8().equals("1")) {
            btn_updateArticle.setEnabled(false);
        } else {
            btn_updateArticle.setEnabled(true);
        }
    }
}
