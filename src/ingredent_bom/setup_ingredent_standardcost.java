/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ingredent_bom;

import dbutility.dbUtility;
import java.awt.Font;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import jxl.write.WriteException;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.save.JRSingleSheetXlsSaveContributor;
import report.Report;
import utilititiesfunction.Export2Excel;
import utilititiesfunction.ThaiUtilities;
import utilititiesfunction.UserLogin;

/**
 *
 * @author natee
 */
public class setup_ingredent_standardcost extends javax.swing.JDialog {

    /**
     * Creates new form setup_ingredent_standardcost
     */
    Statement stmt;
    ThaiUtilities cvth = new ThaiUtilities();
    dbUtility db = new dbUtility();
    formatDateNumber f = new formatDateNumber();
    showMessage msn = new showMessage();
    int rowEdit = 0;

    public setup_ingredent_standardcost(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        db.dbconnect();
        
        setTable();
        loadIngredian();
        checkuserconfig();

        txt_edit.setVisible(false);
        txt_total.setFocusable(false);
        txt_total.setBackground(f.colorDisable());
        txt_total.setEditable(false);
    }

    private void checkuserconfig() {
        //MenuName = Mast1
        UserLogin userrec = UserLogin.userlogin;
        if (userrec.getM214().equals("1")) {
            btn_save.setEnabled(false);
            btn_update.setEnabled(false);
            menuSave.setEnabled(false);
            tbltable.setEnabled(false);
            
        }
        if (userrec.getM214().equals("2")) {
            btn_save.setEnabled(true);
            btn_update.setEnabled(true);
            menuSave.setEnabled(true);
            tbltable.setEnabled(true);
        }
        if (userrec.getM214().equals("3")) {
            btn_save.setEnabled(true);
            btn_update.setEnabled(true);
            menuSave.setEnabled(true);
            tbltable.setEnabled(true);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btn_save = new javax.swing.JButton();
        btn_exit = new javax.swing.JButton();
        btn_cancel = new javax.swing.JButton();
        btn_print = new javax.swing.JButton();
        btn_excel = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbltable = new javax.swing.JTable();
        txt_edit = new javax.swing.JTextField();
        txt_total = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        menuSave = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("บันทึกต้นทุนวัตถุดิบ (สำหรับส่งข้อมูลให้ JDE)");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btn_save.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btn_save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/save-icon.png"))); // NOI18N
        btn_save.setText("บันทึกข้อมูล");
        btn_save.setFocusable(false);
        btn_save.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_save.setIconTextGap(0);
        btn_save.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        btn_exit.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btn_exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/LogOut-icon.png"))); // NOI18N
        btn_exit.setText("Exit");
        btn_exit.setFocusable(false);
        btn_exit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_exit.setIconTextGap(0);
        btn_exit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_exitActionPerformed(evt);
            }
        });

        btn_cancel.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btn_cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Cancel-icon.png"))); // NOI18N
        btn_cancel.setText("ยกเลิก");
        btn_cancel.setFocusable(false);
        btn_cancel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_cancel.setIconTextGap(0);
        btn_cancel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelActionPerformed(evt);
            }
        });

        btn_print.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btn_print.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Printer-icon.png"))); // NOI18N
        btn_print.setText("พิมพ์");
        btn_print.setFocusable(false);
        btn_print.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_print.setIconTextGap(0);
        btn_print.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_printActionPerformed(evt);
            }
        });

        btn_excel.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btn_excel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Excel-icon.png"))); // NOI18N
        btn_excel.setText("Excel");
        btn_excel.setFocusable(false);
        btn_excel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_excel.setIconTextGap(0);
        btn_excel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_excel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_excelActionPerformed(evt);
            }
        });

        btn_update.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btn_update.setText("Update");
        btn_update.setFocusable(false);
        btn_update.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_update.setIconTextGap(0);
        btn_update.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(btn_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_save, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 396, Short.MAX_VALUE)
                .addComponent(btn_update, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_excel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_print, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btn_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btn_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btn_save, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(btn_print, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(btn_excel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(btn_update, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        tbltable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "กลุ่ม", "รหัสวัตถุดิบ", "ชื่อวัตถุดิบ", "BOMAcc", "หน่วยนับหลัก", "ต้นทุนมาตรฐาน", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbltable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbltableMouseClicked(evt);
            }
        });
        tbltable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbltableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tbltable);
        tbltable.getColumnModel().getColumn(0).setPreferredWidth(200);
        tbltable.getColumnModel().getColumn(1).setPreferredWidth(140);
        tbltable.getColumnModel().getColumn(2).setPreferredWidth(300);
        tbltable.getColumnModel().getColumn(3).setPreferredWidth(150);
        tbltable.getColumnModel().getColumn(4).setPreferredWidth(85);
        tbltable.getColumnModel().getColumn(5).setPreferredWidth(120);
        tbltable.getColumnModel().getColumn(6).setMinWidth(0);
        tbltable.getColumnModel().getColumn(6).setPreferredWidth(0);
        tbltable.getColumnModel().getColumn(6).setMaxWidth(0);

        txt_edit.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        txt_edit.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_edit.setText("txt_edit");

        txt_total.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        txt_total.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_total.setText("txt_total");

        jMenu1.setText("ฟังก์ชั่น");
        jMenu1.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jMenuItem1.setText("ยกเลิก");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        menuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuSave.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        menuSave.setText("บันทึก");
        menuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(menuSave);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jMenuItem3.setText("พิมพ์");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator1);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jMenuItem4.setText("ออก");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 492, Short.MAX_VALUE)
                        .addComponent(txt_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_total, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_total, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1032)/2, (screenSize.height-796)/2, 1032, 796);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_exitActionPerformed
        tableEdit();
        if (rowEdit > 0) {
            int confirm = msn.showMessageConfirm("Yes", "No", "มีรายการที่แก้ไขอยู่ คุณต้องการบันทึกการแก้ไขหรือไม่ ...?");
            if (confirm == 0) {
                btnSave();
            }
        }
        dispose();
    }//GEN-LAST:event_btn_exitActionPerformed

    private void btn_printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_printActionPerformed
        btnPrint();
    }//GEN-LAST:event_btn_printActionPerformed

    private void btn_excelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_excelActionPerformed
        btnExcel();
    }//GEN-LAST:event_btn_excelActionPerformed

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        btnSave();
    }//GEN-LAST:event_btn_saveActionPerformed

    private void btn_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelActionPerformed
        loadIngredian();
    }//GEN-LAST:event_btn_cancelActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        btn_cancelActionPerformed(null);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void menuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveActionPerformed
        btn_saveActionPerformed(null);
    }//GEN-LAST:event_menuSaveActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        btn_printActionPerformed(null);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        btn_exitActionPerformed(null);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void tbltableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbltableKeyPressed
//        tableEdit();
    }//GEN-LAST:event_tbltableKeyPressed

    private void tbltableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbltableMouseClicked
//        tableEdit();
    }//GEN-LAST:event_tbltableMouseClicked

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        btnUpdateMaster();
    }//GEN-LAST:event_btn_updateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(setup_ingredent_standardcost.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(setup_ingredent_standardcost.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(setup_ingredent_standardcost.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(setup_ingredent_standardcost.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                setup_ingredent_standardcost dialog = new setup_ingredent_standardcost(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cancel;
    private javax.swing.JButton btn_excel;
    private javax.swing.JButton btn_exit;
    private javax.swing.JButton btn_print;
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_update;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem menuSave;
    private javax.swing.JTable tbltable;
    private javax.swing.JTextField txt_edit;
    private javax.swing.JTextField txt_total;
    // End of variables declaration//GEN-END:variables
    private DefaultTableModel model;
    boolean ISSAVE = false;

    private void setTable() {

        tbltable.setRowSelectionAllowed(true);
        tbltable.setColumnSelectionAllowed(true);
        tbltable.addKeyListener(new KeyListener() {

            public void keyTyped(KeyEvent ke) {
            }

            public void keyPressed(KeyEvent ke) {
                if (ke.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    int rowSelected = tbltable.getSelectedRow();
                    int colFix = tbltable.getSelectedColumn();
                    tbltable.clearSelection();
                    return;
                }
                int rowSelected = tbltable.getSelectedRow();
                int colFix = tbltable.getSelectedColumn();
//                int colFix = 3;
                if (ke.getKeyCode() == KeyEvent.VK_DOWN || ke.getKeyCode() == KeyEvent.VK_UP
                        || ke.getKeyCode() == KeyEvent.VK_RIGHT || ke.getKeyCode() == KeyEvent.VK_LEFT
                        /*|| ke.getKeyCode() == KeyEvent.VK_ENTER*/ || ke.getKeyCode() == KeyEvent.VK_TAB
                        || ke.getKeyCode() == KeyEvent.VK_CONTROL || ke.getKeyCode() == KeyEvent.VK_ALT
                        || ke.getKeyCode() == KeyEvent.VK_SHIFT || ke.getKeyCode() == KeyEvent.VK_CAPS_LOCK
                        || ke.getKeyCode() == KeyEvent.VK_BACK_SPACE || ke.getKeyCode() == KeyEvent.VK_DELETE) {

//                    if (rowSelected != -1)  {
//                    String msg = "" + tbltable.getValueAt(rowSelected, colFix).toString();
//                     if (msg.length() == 0) {
//                        if (tbltable.isCellEditable(rowSelected, colFix)) {
//                            tbltable.setValueAt("-", rowSelected, colFix);
//                        }
//                    }
//                    }
                    return;
                } else if (ke.getKeyCode() == KeyEvent.VK_ENTER) {
                    tableEdit();
                    return ;
                }
                String TempString = "0123456789.-";
                char curchar = ke.getKeyChar();
                if (TempString.indexOf("" + curchar) < 0) {
                    msn.showMessageWarning("กรุณาป้อนตัวเลขเท่านั้น...");
                    return;
                }
                tbltable.setRowSelectionInterval(rowSelected, rowSelected);
                tbltable.setColumnSelectionInterval(colFix, colFix);
                String msg = "" + tbltable.getValueAt(rowSelected, colFix);
                if (msg.length() > 0) {
                    if (tbltable.isCellEditable(rowSelected, colFix)) {
                        tbltable.setValueAt("", rowSelected, colFix);
                    }
                }
                ISSAVE = true;
            }

            public void keyReleased(KeyEvent ke) {
            }
        });

        tbltable.addMouseListener(new MouseListener() {

            public void mouseClicked(MouseEvent e) {
                int rowSelected = tbltable.getSelectedRow();
                int colFix = tbltable.getSelectedColumn();

                if (rowSelected == -1 || colFix == -1) {
                    return;
                }
                tbltable.setRowSelectionInterval(rowSelected, rowSelected);
                tbltable.setColumnSelectionInterval(colFix, colFix);
                tableEdit();
            }

            public void mousePressed(MouseEvent e) {
            }

            public void mouseReleased(MouseEvent e) {
            }

            public void mouseEntered(MouseEvent e) {
            }

            public void mouseExited(MouseEvent e) {
            }
        });

        tbltable.addFocusListener(new FocusListener() {

            public void focusGained(FocusEvent fe) {
            }

            public void focusLost(FocusEvent fe) {
                if (tbltable.isEditing()) {
                    tbltable.getCellEditor().stopCellEditing();
                }
//                btn_saveActionPerformed(null);
            }
        });
        model = (DefaultTableModel) tbltable.getModel();
        tbltable.setShowGrid(true);
        tbltable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tbltable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbltable.setRowSelectionAllowed(true);
        tbltable.setBackground(java.awt.Color.WHITE);
        tbltable.setGridColor(java.awt.Color.gray);
        tbltable.setRowHeight(24);
        tbltable.setFont(new Font("Norasi", Font.PLAIN, 14));
        JTableHeader tHeader = tbltable.getTableHeader();
        tHeader.setFont(new Font("Norasi", Font.BOLD, 14));
        DefaultTableCellRenderer l = new DefaultTableCellRenderer();
        l.setHorizontalAlignment(SwingConstants.LEFT);
        DefaultTableCellRenderer r = new DefaultTableCellRenderer();
        r.setHorizontalAlignment(SwingConstants.RIGHT);
        DefaultTableCellRenderer c = new DefaultTableCellRenderer();
        c.setHorizontalAlignment(SwingConstants.CENTER);
        TableColumnModel tcm = tbltable.getColumnModel();
        tcm.getColumn(0).setCellRenderer(l);
        tcm.getColumn(1).setCellRenderer(l);
        tcm.getColumn(2).setCellRenderer(l);
        tcm.getColumn(3).setCellRenderer(l);
        tcm.getColumn(4).setCellRenderer(r);
        tcm.getColumn(5).setCellRenderer(r);

        // =============== setFont Edit Cell ====================//
        final JTextField textField = new JTextField();
        textField.setFont(new Font("Norasi", Font.PLAIN, 14));
        textField.setFocusable(true);
//        textField.addActionListener(new java.awt.event.ActionListener() {
//
//            @Override
//            public void actionPerformed(ActionEvent ae) {
//                tableEdit();
//            }
//        });
//        textField.addFocusListener(new java.awt.event.FocusAdapter() {
//
//            public void focusGained(java.awt.event.FocusEvent evt) {
//                String data = f.convertDoubleString(textField.getText().trim());
//                if (data.length() > 0) {
//                    if (f.isNumberic(data)) {
//                        textField.setText(data);
//                    } else {
//                        textField.setText("0.0000");
//                    }
//                } else {
//                    textField.setText("0.0000");
//                }
//            }
//        });
//        textField.addKeyListener(new java.awt.event.KeyAdapter() {
//
//            public void keyPressed(java.awt.event.KeyEvent evt) {
//                String data = f.convertDoubleString(textField.getText().trim());
//                int row = tbltable.getSelectedRow();
//                int next = row + 1;
//                if (next > tbltable.getRowCount()) {
//                    next = 0;
//                }
//                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//                    tbltable.setRowSelectionInterval(4, next);
//                    tbltable.setFocusable(true);
//                    tbltable.requestFocus();
//                }
//            }
//        });
        DefaultCellEditor dce = new DefaultCellEditor(textField);
        tbltable.getColumnModel().getColumn(3).setCellEditor(dce);

    }

    private void clearTable() {
        int size = tbltable.getRowCount();
        for (int i = 0; i < size; i++) {
            model.removeRow(0);
        }
    }

    private void tableEdit() {
        int row = tbltable.getRowCount();

        for (int i = 0; i < row; i++) {
            String data = f.convertDoubleString(tbltable.getValueAt(i, 5).toString());
            if (data.length() > 0) {
                if (f.isNumberic(data)) {
                    Double real = Double.parseDouble(data);
                    tbltable.setValueAt(f.double4FmtShow(real), i, 5);
                } else {
                    tbltable.setValueAt("0.0000", i, 5);
                }
            } else {
                tbltable.setValueAt("0.0000", i, 5);
            }
        }

        int edit = 0;

        double oldpscost = 0.0000;
        double newpscost = 0.0000;

        for (int i = 0; i < row; i++) {
            String data1 = f.convertDoubleString(tbltable.getValueAt(i, 6).toString());
            String data2 = f.convertDoubleString(tbltable.getValueAt(i, 5).toString());

            oldpscost = Double.parseDouble(data1);
            newpscost = Double.parseDouble(data2);

            if (oldpscost != newpscost) {
                edit++;
            }
        }
        rowEdit = edit;
    }

    private void loadIngredian() {
        clearTable();
        new standardcostFactory();
        String sql = "select PCode,PDesc,PGroup,punit1,pscost,groupname,product.bomacc "
                + "from product "
                + "left join groupfile on PGroup=groupcode "
                + "where account='Y' "
                + "order by PGroup,PCode";
        try {
            stmt = (Statement) dbUtility.con.createStatement();
            int count = 0;

            if (!dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
                ResultSet rs = stmt.executeQuery(sql);
                while (rs.next()) {
                    count++;
                    String groupname = "";
                    if (rs.getString("groupname") != null) {
                        groupname = "( " + cvth.ASCII2Unicode(rs.getString("groupname")) + " )";
                    }
                    model.addRow(new Object[]{
                                cvth.ASCII2Unicode(rs.getString("PGroup")) + "      " + groupname,
                                cvth.ASCII2Unicode(rs.getString("PCode")),
                                cvth.ASCII2Unicode(rs.getString("PDesc")),
                                cvth.ASCII2Unicode(rs.getString("product.bomacc")),
                                cvth.ASCII2Unicode(rs.getString("punit1")),
                                f.double4FmtShow(rs.getDouble("pscost")),
                                f.double4FmtShow(rs.getDouble("pscost"))
                            });
                    new standardcostFactory(
                            cvth.ASCII2Unicode(rs.getString("PGroup")) + "      " + groupname,
                            cvth.ASCII2Unicode(rs.getString("PCode")),
                            cvth.ASCII2Unicode(rs.getString("PDesc")),
                            rs.getDouble("pscost"),
                            cvth.ASCII2Unicode(rs.getString("punit1")),
                            cvth.ASCII2Unicode(rs.getString("product.bomacc")));
                }
                rs.close();
                stmt.close();
            } else {
                ResultSet rs = stmt.executeQuery(sql);
                while (rs.next()) {
                    count++;
                    String groupname = "";
                    if (rs.getString("groupname") != null) {
                        groupname = "( " + (rs.getString("groupname")) + " )";
                    }
                    model.addRow(new Object[]{
                                f.double4FmtShow(rs.getDouble("pscost")),
                                (rs.getString("PGroup")) + "      " + groupname,
                                (rs.getString("PCode")),
                                (rs.getString("PDesc")),
                                (rs.getString("product.bomacc")),
                                (rs.getString("punit1")),
                                f.double4FmtShow(rs.getDouble("pscost")),
                                f.double4FmtShow(rs.getDouble("pscost"))
                            });
                    new standardcostFactory(
                            (rs.getString("PGroup")) + "      " + groupname,
                            (rs.getString("PCode")),
                            (rs.getString("PDesc")),
                            rs.getDouble("pscost"),
                            (rs.getString("punit1")),
                            (rs.getString("product.bomacc")));
                    rs.close();
                    stmt.close();
                }
            }
            if (count > 0) {
                tbltable.setRowSelectionInterval(0, 0);
                tbltable.setFocusable(true);
                tbltable.requestFocus();
            }
            txt_total.setText("วัตถุดิบทั้งหมด  " + f.intFmtShow(count) + "  รายการ");
            txt_edit.setText("แก้ไข  0  รายการ");
        } catch (Exception e) {
            msn.showMessageError("เกิดข้อผิดพลาดบางประการ");
            e.printStackTrace();
        }
    }

    private void btnPrint() {
        Report r = new Report();
        Map map = new HashMap();
        JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(
                standardcostFactory.createBeanCollection());

        String filename = "posbom_ingredent_standardcost";

        r.viewReportbean(filename, map, "ingredent_pscost", ds);
    }

    private void btnExcel() {

        int row = tbltable.getRowCount();

        for (int i = 0; i < row; i++) {
            tbltable.setValueAt("", i, 6);
        }

        Export2Excel test = new Export2Excel();
        JFileChooser chooser = new JFileChooser();
        File file;

        String alert_save = "ข้อมูลนี้มีอยู่แล้ว คุณต้องการบันทึกรายการนี้หรือไม่...?";
        String condition = "บันทึกต้นทุนวัตถุดิบ (สำหรับส่งข้อมูลให้ JDE)";

        try {
            file = new File(new File("excel.xls").getCanonicalPath());

            chooser.setSelectedFile(file);
            chooser.setFileFilter(new JRSingleSheetXlsSaveContributor(Locale.ENGLISH, null));



            int confirm2 = chooser.showSaveDialog(this);
            if (confirm2 == JFileChooser.APPROVE_OPTION) {


                File curFile = chooser.getSelectedFile();

                if (curFile.exists()) {
                    int confirm = JOptionPane.showConfirmDialog(this, alert_save, "Confirm", JOptionPane.YES_NO_OPTION);
                    if (confirm == JOptionPane.NO_OPTION) {
                        return;

                    }
                    try {
                        test.setOutputFile(curFile.toString());
                        test.writetableNoSum(tbltable, tbltable.getColumnModel(), condition);
                    } catch (IOException ex) {
                    } catch (WriteException ex) {
                    }
                } else {
                    try {
                        test.setOutputFile(curFile.toString());
                        test.writetableNoSum(tbltable, tbltable.getColumnModel(), condition);
                    } catch (IOException ex) {
                    } catch (WriteException ex) {
                    }
                }
            }



        } catch (IOException e) {
        }

        loadIngredian();
    }

    private void btnSave() {
//        tableEdit();

        int row = tbltable.getRowCount();
        int edit = 0;

        double oldpscost = 0.0000;
        double newpscost = 0.0000;

        for (int i = 0; i < row; i++) {
            String pcode = tbltable.getValueAt(i, 1).toString();
            String data1 = f.convertDoubleString(tbltable.getValueAt(i, 6).toString());
            String pscost = f.convertDoubleString(tbltable.getValueAt(i, 5).toString());

            oldpscost = Double.parseDouble(data1);
            newpscost = Double.parseDouble(pscost);

            if (oldpscost != newpscost) {
                edit++;
                updateStandardCost(pcode, newpscost);
            }
        }
        rowEdit = edit;
        msn.showMessageInformation("แก้ไขต้นทุนมาตรฐานทั้งหมด " + f.intFmtShow(edit) + " รายการ");
        loadIngredian();
    }

    private void updateStandardCost(String pcode, Double pscost) {
        String sql = "update product set pscost=? where pcode=?";
        try {
            if (!dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
                PreparedStatement pre = dbUtility.con.prepareStatement(sql);
                pre.setDouble(1, pscost);
                pre.setString(2, cvth.Unicode2ASCII(pcode));
                pre.executeUpdate();
                pre.close();
                pre = null;
            } else {
                PreparedStatement pre = dbUtility.con.prepareStatement(sql);
                pre.setDouble(1, pscost);
                pre.setString(2, (pcode));
                pre.executeUpdate();
                pre.close();
                pre = null;
            }
        } catch (Exception e) {
            msn.showMessageError("เกิดข้อผิดพลาดบางประการ");
            e.printStackTrace();
        }
    }
    
    private void updateAVGCost(String pcode, Double pacost) {
        String plastupdate = f.dateFmtSQL(f.nowDate());
        String plasttime = f.timeFmt(f.nowDate());
        UserLogin userrec = UserLogin.userlogin;
        String sql = "update product set pacost=?, plastupdate=?, plasttime=? ,puserupdate=?  where pcode=?";
        try {
            if (!dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
                PreparedStatement pre = dbUtility.con.prepareStatement(sql);
                pre.setDouble(1, pacost);
                pre.setString(2, cvth.Unicode2ASCII(plastupdate));
                pre.setString(3, cvth.Unicode2ASCII(plasttime));
                pre.setString(4, cvth.Unicode2ASCII(userrec.getUserName()));
                pre.setString(5, cvth.Unicode2ASCII(pcode));
                pre.executeUpdate();
                pre.close();
                pre = null;
            } else {
                PreparedStatement pre = dbUtility.con.prepareStatement(sql);
                pre.setDouble(1, pacost);
                pre.setString(2, (plastupdate));
                pre.setString(3, (plasttime));
                pre.setString(4, userrec.getUserName());
                pre.setString(5, (pcode));
                pre.executeUpdate();
                pre.close();
                pre = null;
            }
        } catch (Exception e) {
            msn.showMessageError("เกิดข้อผิดพลาดบางประการ");
            e.printStackTrace();
        }
    }

    private void btnUpdateMaster() {
        int row = tbltable.getRowCount();
        int edit = 0;

        double oldpscost = 0.0000;
        double newpacost = 0.0000;

        for (int i = 0; i < row; i++) {
            String pcode = tbltable.getValueAt(i, 1).toString();
            String pacost = f.convertDoubleString(tbltable.getValueAt(i, 5).toString());

            newpacost = Double.parseDouble(pacost);
            updateAVGCost(pcode, newpacost);
        }
        msn.showMessageInformation("Update Master ทั้งหมด " + row + " รายการ");
        loadIngredian();
    }
}
