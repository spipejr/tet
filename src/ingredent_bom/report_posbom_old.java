/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ingredent_bom;

import dbutility.dbUtility;
import frmlist.ListProduct;
import frmlist.listGroupfile;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import masterfile.NimbusFrame;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import report.Report;
import utilititiesfunction.ThaiUtilities;

/**
 *
 * @author natee
 */
public class report_posbom_old extends javax.swing.JDialog {

    /**
     * Creates new form report_posbom
     */
    ThaiUtilities cvth = new ThaiUtilities();
    dbUtility db = new dbUtility();
    formatDateNumber f = new formatDateNumber();
    showMessage msn = new showMessage();

    public report_posbom_old(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        db.dbconnect();
        setTable1();
        setTable2();
        clearAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        txt_pcode1 = new javax.swing.JTextField();
        btn_pcode1 = new javax.swing.JButton();
        txt_pcode2 = new javax.swing.JTextField();
        btn_pcode2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        txt_pgroup1 = new javax.swing.JTextField();
        btn_pgroup1 = new javax.swing.JButton();
        txt_pgroup2 = new javax.swing.JTextField();
        btn_pgroup2 = new javax.swing.JButton();
        btn_process = new javax.swing.JButton();
        btn_exit = new javax.swing.JButton();
        btn_print = new javax.swing.JButton();
        chk_detail = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbltable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbltable2 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        txt_ingredent = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        txt_totalplu = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "กำหนดรหัสสินค้า", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Norasi", 0, 14))); // NOI18N
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_pcode1.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        txt_pcode1.setText("txt_pcode1");
        txt_pcode1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_pcode1FocusGained(evt);
            }
        });
        txt_pcode1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_pcode1KeyPressed(evt);
            }
        });
        jPanel2.add(txt_pcode1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 110, 30));

        btn_pcode1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Windows-Magnifier-icon.png"))); // NOI18N
        btn_pcode1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pcode1ActionPerformed(evt);
            }
        });
        jPanel2.add(btn_pcode1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 30, 30));

        txt_pcode2.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        txt_pcode2.setText("txt_pcode2");
        txt_pcode2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_pcode2FocusGained(evt);
            }
        });
        txt_pcode2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_pcode2KeyPressed(evt);
            }
        });
        jPanel2.add(txt_pcode2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 40, 110, 30));

        btn_pcode2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Windows-Magnifier-icon.png"))); // NOI18N
        btn_pcode2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pcode2ActionPerformed(evt);
            }
        });
        jPanel2.add(btn_pcode2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, 30, 30));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 310, 90));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "กำหนดรหัสสินค้า", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Norasi", 0, 14))); // NOI18N
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_pgroup1.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        txt_pgroup1.setText("txt_pgroup1");
        txt_pgroup1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_pgroup1FocusGained(evt);
            }
        });
        txt_pgroup1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_pgroup1KeyPressed(evt);
            }
        });
        jPanel3.add(txt_pgroup1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 70, 30));

        btn_pgroup1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Windows-Magnifier-icon.png"))); // NOI18N
        btn_pgroup1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pgroup1ActionPerformed(evt);
            }
        });
        jPanel3.add(btn_pgroup1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, 30, 30));

        txt_pgroup2.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        txt_pgroup2.setText("txt_pgroup2");
        txt_pgroup2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_pgroup2FocusGained(evt);
            }
        });
        txt_pgroup2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_pgroup2KeyPressed(evt);
            }
        });
        jPanel3.add(txt_pgroup2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 70, 30));

        btn_pgroup2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Windows-Magnifier-icon.png"))); // NOI18N
        btn_pgroup2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pgroup2ActionPerformed(evt);
            }
        });
        jPanel3.add(btn_pgroup2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, 30, 30));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, 230, 90));

        btn_process.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btn_process.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Hourglass-icon.png"))); // NOI18N
        btn_process.setText("F5-ประมวลผล");
        btn_process.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_process.setIconTextGap(0);
        btn_process.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_process.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_processActionPerformed(evt);
            }
        });
        btn_process.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                btn_processFocusLost(evt);
            }
        });
        jPanel1.add(btn_process, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 30, 120, 65));

        btn_exit.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btn_exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/LogOut-icon.png"))); // NOI18N
        btn_exit.setText("ออก");
        btn_exit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_exit.setIconTextGap(0);
        btn_exit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_exitActionPerformed(evt);
            }
        });
        jPanel1.add(btn_exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 30, 100, 65));

        btn_print.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btn_print.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Printer-icon.png"))); // NOI18N
        btn_print.setText("พิมพ์");
        btn_print.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_print.setIconTextGap(0);
        btn_print.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_printActionPerformed(evt);
            }
        });
        jPanel1.add(btn_print, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 30, 100, 65));

        chk_detail.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        chk_detail.setText("แสดงรายละเอียดในการพิมพ์");
        jPanel1.add(chk_detail, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 0, 200, 30));

        tbltable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "รหัสสินค้า", "ชื่อสินค้า / รายการ", "หน่วยนับ", "ราคาขาย", "จำนวนส่วนผสม"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbltable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbltable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbltable1);
        tbltable1.getColumnModel().getColumn(0).setPreferredWidth(100);
        tbltable1.getColumnModel().getColumn(1).setPreferredWidth(300);
        tbltable1.getColumnModel().getColumn(2).setPreferredWidth(60);
        tbltable1.getColumnModel().getColumn(3).setPreferredWidth(80);
        tbltable1.getColumnModel().getColumn(4).setPreferredWidth(100);

        tbltable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "รหัสวัตถุดิบ", "ชื่อวัตถุดิบ / รายการ", "ปริมาณที่ใช้", "หน่วยที่ใช้", "Sale Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbltable2);
        tbltable2.getColumnModel().getColumn(0).setPreferredWidth(90);
        tbltable2.getColumnModel().getColumn(1).setPreferredWidth(300);
        tbltable2.getColumnModel().getColumn(2).setPreferredWidth(100);
        tbltable2.getColumnModel().getColumn(3).setPreferredWidth(80);
        tbltable2.getColumnModel().getColumn(4).setPreferredWidth(120);

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_ingredent.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        txt_ingredent.setText("txt_ingredent");
        jPanel4.add(txt_ingredent, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 200, 30));

        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_totalplu.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        txt_totalplu.setText("txt_totalplu");
        jPanel5.add(txt_totalplu, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 0, 200, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1032)/2, (screenSize.height-796)/2, 1032, 796);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_pcode1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pcode1ActionPerformed
        btnSearchProduct1();
    }//GEN-LAST:event_btn_pcode1ActionPerformed

    private void btn_pcode2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pcode2ActionPerformed
        btnSearchProduct2();
    }//GEN-LAST:event_btn_pcode2ActionPerformed

    private void btn_pgroup1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pgroup1ActionPerformed
        btnSearchgroupfile1();
    }//GEN-LAST:event_btn_pgroup1ActionPerformed

    private void btn_pgroup2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pgroup2ActionPerformed
        btnSearchgroupfile2();
    }//GEN-LAST:event_btn_pgroup2ActionPerformed

    private void btn_processActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_processActionPerformed
        btnProcess();
    }//GEN-LAST:event_btn_processActionPerformed

    private void btn_printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_printActionPerformed
        btnPrint();
    }//GEN-LAST:event_btn_printActionPerformed

    private void btn_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_exitActionPerformed
        dispose();
    }//GEN-LAST:event_btn_exitActionPerformed

    private void txt_pcode1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_pcode1FocusGained
        String data = txt_pcode1.getText().trim();

        if (data.length() > 0) {
            txt_pcode1.selectAll();
        } else {
            txt_pcode1.setText("0");
            txt_pcode1.selectAll();
            txt_pcode1.setText("");
        }
    }//GEN-LAST:event_txt_pcode1FocusGained

    private void txt_pcode2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_pcode2FocusGained
        String data = txt_pcode2.getText().trim();

        if (data.length() > 0) {
            txt_pcode2.selectAll();
        } else {
            txt_pcode2.setText("0");
            txt_pcode2.selectAll();
            txt_pcode2.setText("");
        }
    }//GEN-LAST:event_txt_pcode2FocusGained

    private void txt_pgroup1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_pgroup1FocusGained
        String data = txt_pgroup1.getText().trim();

        if (data.length() > 0) {
            txt_pgroup1.selectAll();
        } else {
            txt_pgroup1.setText("0");
            txt_pgroup1.selectAll();
            txt_pgroup1.setText("");
        }
    }//GEN-LAST:event_txt_pgroup1FocusGained

    private void txt_pgroup2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_pgroup2FocusGained
        String data = txt_pgroup2.getText().trim();

        if (data.length() > 0) {
            txt_pgroup2.selectAll();
        } else {
            txt_pgroup2.setText("0");
            txt_pgroup2.selectAll();
            txt_pgroup2.setText("");
        }
    }//GEN-LAST:event_txt_pgroup2FocusGained

    private void btn_processFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btn_processFocusLost
        btn_process.setFocusable(false);
    }//GEN-LAST:event_btn_processFocusLost

    private void txt_pcode1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_pcode1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txt_pcode2.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            dispose();
        } else if (evt.getKeyCode() == KeyEvent.VK_F5) {
            btnProcess();
        } else if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_P) {
            btnPrint();
        }
    }//GEN-LAST:event_txt_pcode1KeyPressed

    private void txt_pcode2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_pcode2KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txt_pgroup1.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txt_pcode1.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_F5) {
            btnProcess();
        } else if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_P) {
            btnPrint();
        }
    }//GEN-LAST:event_txt_pcode2KeyPressed

    private void txt_pgroup1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_pgroup1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txt_pgroup2.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txt_pcode2.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_F5) {
            btnProcess();
        } else if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_P) {
            btnPrint();
        }
    }//GEN-LAST:event_txt_pgroup1KeyPressed

    private void txt_pgroup2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_pgroup2KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btn_process.setFocusable(true);
            btn_process.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txt_pgroup1.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_F5) {
            btnProcess();
        } else if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_P) {
            btnPrint();
        }
    }//GEN-LAST:event_txt_pgroup2KeyPressed

    private void tbltable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbltable1MouseClicked
        int index = tbltable1.getSelectedRow();

        if (evt.getClickCount() == 1) {
            String pcode = tbltable1.getValueAt(index, 0).toString();
            loadDetail(pcode);
        }
    }//GEN-LAST:event_tbltable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(report_posbom_old.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(report_posbom_old.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(report_posbom_old.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(report_posbom_old.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                report_posbom_old dialog = new report_posbom_old(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_exit;
    private javax.swing.JButton btn_pcode1;
    private javax.swing.JButton btn_pcode2;
    private javax.swing.JButton btn_pgroup1;
    private javax.swing.JButton btn_pgroup2;
    private javax.swing.JButton btn_print;
    private javax.swing.JButton btn_process;
    private javax.swing.JCheckBox chk_detail;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbltable1;
    private javax.swing.JTable tbltable2;
    private javax.swing.JTextField txt_ingredent;
    private javax.swing.JTextField txt_pcode1;
    private javax.swing.JTextField txt_pcode2;
    private javax.swing.JTextField txt_pgroup1;
    private javax.swing.JTextField txt_pgroup2;
    private javax.swing.JTextField txt_totalplu;
    // End of variables declaration//GEN-END:variables
    private DefaultTableModel model1;
    private DefaultTableModel model2;

    private void setTable1() {

        model1 = (DefaultTableModel) tbltable1.getModel();
        tbltable1.setShowGrid(true);
        tbltable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tbltable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbltable1.setRowSelectionAllowed(true);
        tbltable1.setBackground(java.awt.Color.WHITE);
        tbltable1.setGridColor(java.awt.Color.gray);
        tbltable1.setRowHeight(24);
        tbltable1.setFont(new Font("Norasi", Font.PLAIN, 14));
        JTableHeader tHeader = tbltable1.getTableHeader();
        tHeader.setFont(new Font("Norasi", Font.BOLD, 14));
        DefaultTableCellRenderer l = new DefaultTableCellRenderer();
        l.setHorizontalAlignment(SwingConstants.LEFT);
        DefaultTableCellRenderer r = new DefaultTableCellRenderer();
        r.setHorizontalAlignment(SwingConstants.RIGHT);
        DefaultTableCellRenderer c = new DefaultTableCellRenderer();
        c.setHorizontalAlignment(SwingConstants.CENTER);
        TableColumnModel tcm = tbltable1.getColumnModel();
        tcm.getColumn(0).setCellRenderer(l);
        tcm.getColumn(1).setCellRenderer(l);
        tcm.getColumn(2).setCellRenderer(l);
        tcm.getColumn(3).setCellRenderer(r);
        tcm.getColumn(4).setCellRenderer(r);

    }

    private void clearTable1() {
        int size = tbltable1.getRowCount();
        for (int i = 0; i < size; i++) {
            model1.removeRow(0);
        }
    }

    private void setTable2() {

        model2 = (DefaultTableModel) tbltable2.getModel();
        tbltable2.setShowGrid(true);
        tbltable2.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tbltable2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbltable2.setRowSelectionAllowed(true);
        tbltable2.setBackground(java.awt.Color.WHITE);
        tbltable2.setGridColor(java.awt.Color.gray);
        tbltable2.setRowHeight(24);
        tbltable2.setFont(new Font("Norasi", Font.PLAIN, 14));
        JTableHeader tHeader = tbltable2.getTableHeader();
        tHeader.setFont(new Font("Norasi", Font.BOLD, 14));
        DefaultTableCellRenderer l = new DefaultTableCellRenderer();
        l.setHorizontalAlignment(SwingConstants.LEFT);
        DefaultTableCellRenderer r = new DefaultTableCellRenderer();
        r.setHorizontalAlignment(SwingConstants.RIGHT);
        DefaultTableCellRenderer c = new DefaultTableCellRenderer();
        c.setHorizontalAlignment(SwingConstants.CENTER);
        TableColumnModel tcm = tbltable2.getColumnModel();
        tcm.getColumn(0).setCellRenderer(l);
        tcm.getColumn(1).setCellRenderer(l);
        tcm.getColumn(2).setCellRenderer(r);
        tcm.getColumn(3).setCellRenderer(l);
        tcm.getColumn(4).setCellRenderer(l);

    }

    private void clearTable2() {
        int size = tbltable2.getRowCount();
        for (int i = 0; i < size; i++) {
            model2.removeRow(0);
        }
    }

    private void btnSearchProduct1() {
        ListProduct f = new ListProduct(new NimbusFrame(), true);
        f.setVisible(true);
        if (!f.code.equals("")) {
            txt_pcode1.setText(f.code);
            txt_pcode2.requestFocus();
        }

    }

    private void btnSearchProduct2() {
        ListProduct f = new ListProduct(new NimbusFrame(), true);
        f.setVisible(true);
        if (!f.code.equals("")) {
            txt_pcode2.setText(f.code);
            txt_pgroup1.requestFocus();
        }

    }

    private void btnSearchgroupfile1() {
        listGroupfile f = new listGroupfile(new NimbusFrame(), true);
        f.setVisible(true);
        if (!f.code.equals("")) {
            txt_pgroup1.setText(f.code);
            txt_pgroup2.requestFocus();
        }

    }

    private void btnSearchgroupfile2() {
        listGroupfile f = new listGroupfile(new NimbusFrame(), true);
        f.setVisible(true);
        if (!f.code.equals("")) {
            txt_pgroup2.setText(f.code);
            btn_process.setFocusable(true);
            btn_process.requestFocus();
        }

    }

    private void btnProcess() {
        String pcode1 = txt_pcode1.getText().trim();
        String pcode2 = txt_pcode2.getText().trim();
        String pgroup1 = txt_pgroup1.getText().trim();
        String pgroup2 = txt_pgroup2.getText().trim();

        clearTable1();
        clearTable2();
        
        if (pcode2.length() <= 0) {
            pcode2 = "ZZZZZZZZZZZZZZZZ";
        }
        if (pgroup2.length() <= 0) {
            pgroup2 = "ZZZZZ";
        }
        int count = 0;

        String sql = "select "
                + "b.pcode as pcode,    p.pdesc as pdesc,"
                + "p.punit1 as unit,    p.pprice11 as price,"
                + "count(b.plcode) as qty "
                + "from posbom b "
                + "left join product p on b.pcode=p.pcode "
                + "where (b.pcode>=? and b.pcode<=?) and (p.pgroup>=? and p.pgroup<=?) "
                + "group by b.pcode "
                + "order by p.pgroup, b.pcode";
        try {
            if (!dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
                PreparedStatement pre = dbUtility.con.prepareStatement(sql);
                pre.setString(1, cvth.Unicode2ASCII(pcode1));
                pre.setString(2, cvth.Unicode2ASCII(pcode2));
                pre.setString(3, cvth.Unicode2ASCII(pgroup1));
                pre.setString(4, cvth.Unicode2ASCII(pgroup2));
                ResultSet rs = pre.executeQuery();
                rs.first();
                if (rs.getRow() != 0) {
                    do {
                        count++;
                        String pcode = "";
                        String pdesc = "";
                        String unit = "";
                        Double price = 0.000;
                        int qty = 0;

                        if (rs.getString("pcode") != null) {
                            pcode = cvth.ASCII2Unicode(rs.getString("pcode"));
                        }
                        if (rs.getString("pdesc") != null) {
                            pdesc = cvth.ASCII2Unicode(rs.getString("pdesc"));
                        }
                        if (rs.getString("unit") != null) {
                            unit = cvth.ASCII2Unicode(rs.getString("unit"));
                        }
                        if (rs.getString("price") != null) {
                            price = rs.getDouble("price");
                        }
                        if (rs.getString("qty") != null) {
                            qty = rs.getInt("qty");
                        }

                        model1.addRow(new Object[]{
                                    pcode,
                                    pdesc,
                                    unit,
                                    f.double3Fmt(price),
                                    f.intFmtShow(qty)
                                });
                    } while (rs.next());
                }
                rs.close();
                pre.close();
                rs = null;
                pre = null;
            } else {
                PreparedStatement pre = dbUtility.con.prepareStatement(sql);
                pre.setString(1, (pcode1));
                pre.setString(2, (pcode2));
                pre.setString(3, (pgroup1));
                pre.setString(4, (pgroup1));
                ResultSet rs = pre.executeQuery();
                rs.first();
                if (rs.getRow() != 0) {
                    do {
                        count++;
                        String pcode = "";
                        String pdesc = "";
                        String unit = "";
                        Double price = 0.000;
                        int qty = 0;

                        if (rs.getString("pcode") != null) {
                            pcode = (rs.getString("pcode"));
                        }
                        if (rs.getString("pdesc") != null) {
                            pdesc = (rs.getString("pdesc"));
                        }
                        if (rs.getString("unit") != null) {
                            unit = (rs.getString("unit"));
                        }
                        if (rs.getString("price") != null) {
                            price = rs.getDouble("price");
                        }
                        if (rs.getString("qty") != null) {
                            qty = rs.getInt("qty");
                        }

                        model1.addRow(new Object[]{
                                    pcode,
                                    pdesc,
                                    unit,
                                    f.double3Fmt(price),
                                    f.intFmtShow(qty)
                                });
                    } while (rs.next());
                }
                rs.close();
                pre.close();
                rs = null;
                pre = null;
            }
        } catch (Exception e) {
            msn.showMessageError("<html>เกิดข้อผิดพลาดบางประการ<br>" + e + "</html>");
            e.printStackTrace();
            return;
        }

        txt_totalplu.setText("จำนวนรายการ " + f.intFmtShow(count) + " รายการ");
        if (count > 0) {
            tbltable1.setFocusable(true);
            tbltable1.requestFocus();
        }
    }

    private void btnPrint() {
        Report r = new Report();
        Map map = new HashMap();

        btnProcess();
//        int totalPLU = tbltable1.getRowCount();

        boolean detail = chk_detail.isSelected();
        String pcode1 = txt_pcode1.getText().trim();
        String pcode2 = txt_pcode2.getText().trim();
        String pgroup1 = txt_pgroup1.getText().trim();
        String pgroup2 = txt_pgroup2.getText().trim();

        if (pcode2.length() <= 0) {
            pcode2 = "ZZZZZZZZZZZZZZZZ";
        }
        if (pgroup2.length() <= 0) {
            pgroup2 = "ZZZZZ";
        }

        new bomFactory();
        String sql1 = "select "
                + "b.pcode as pcode,    p.pdesc as pdesc,"
                + "p.punit1 as unit,    p.pprice11 as price,"
                + "b.plcode as plcode,  b.pqty as qty,"
                + "p1.pdesc as plname,  p1.psubunit as subunit,"
                + "b.saletype as saletype, "
                + "b.formula as formula "
                + "from posbom b "
                + "left join product p on b.pcode=p.pcode "
                + "left join product p1 on b.plcode=p1.pcode "
                + "where (b.pcode>=? and b.pcode<=?) and (p.pgroup>=? and p.pgroup<=?) "
                + "order by p.pgroup, b.pcode";
        String sql2 = "select "
                + "b.pcode as pcode,    p.pdesc as pdesc,"
                + "p.punit1 as unit,    p.pprice11 as price,"
                + "count(b.plcode) as qty "
                + "from posbom b "
                + "left join product p on b.pcode=p.pcode "
                + "where (b.pcode>=? and b.pcode<=?) and (p.pgroup>=? and p.pgroup<=?) "
                + "group by b.pcode "
                + "order by p.pgroup, b.pcode";
        String sql = "";
        String filename = "";

        if (detail) {
            sql = sql1;
            filename = "report_bomdetail";
        } else {
            sql = sql2;
            filename = "report_bom";
        }
        try {
            if (!dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
                PreparedStatement pre = dbUtility.con.prepareStatement(sql);
                pre.setString(1, cvth.Unicode2ASCII(pcode1));
                pre.setString(2, cvth.Unicode2ASCII(pcode2));
                pre.setString(3, cvth.Unicode2ASCII(pgroup1));
                pre.setString(4, cvth.Unicode2ASCII(pgroup2));
                ResultSet rs = pre.executeQuery();
                rs.first();
                if (rs.getRow() != 0) {
                    do {
                        String pcode = "";
                        String pdesc = "";
                        String unit = "";
                        Double price = 0.000;
                        String plcode = "";
                        String plname = "";
                        Double pqty = 0.000;
                        String psubunit = "";
                        String saletype = "";
                        int formula = 0;
                        if (rs.getString("pcode") != null) {
                            pcode = cvth.ASCII2Unicode(rs.getString("pcode"));
                        }
                        if (rs.getString("pdesc") != null) {
                            pdesc = cvth.ASCII2Unicode(rs.getString("pdesc"));
                        }
                        if (rs.getString("unit") != null) {
                            unit = cvth.ASCII2Unicode(rs.getString("unit"));
                        }
                        if (rs.getString("price") != null) {
                            price = rs.getDouble("price");
                        }

                        if (detail) {
                            if (rs.getString("qty") != null) {
                                pqty = rs.getDouble("qty");
                            }
                            if (rs.getString("plcode") != null) {
                                plcode = cvth.ASCII2Unicode(rs.getString("plcode"));
                            }
                            if (rs.getString("plname") != null) {
                                plname = cvth.ASCII2Unicode(rs.getString("plname"));
                            }
                            if (rs.getString("subunit") != null) {
                                psubunit = cvth.ASCII2Unicode(rs.getString("subunit"));
                            }
                            if (rs.getString("saletype") != null) {
                                saletype = cvth.ASCII2Unicode(rs.getString("saletype"));
                            }
                            if (rs.getString("formula") != null) {
                                formula = rs.getInt("formula");
                            }

                            new bomFactory(pcode, pdesc, unit, price, 0, plcode, plname, pqty, psubunit, saletype, formula,"");
                        } else {
                            if (rs.getString("qty") != null) {
                                pqty = rs.getDouble("qty");
                            }
                            int qty = pqty.intValue();

                            new bomFactory(pcode, pdesc, unit, price, qty, plcode, plname, pqty, psubunit, saletype, formula,"");
                        }
                    } while (rs.next());
                }
                rs.close();
                pre.close();
                rs = null;
                pre = null;
            } else {
                PreparedStatement pre = dbUtility.con.prepareStatement(sql);
                pre.setString(1, (pcode1));
                pre.setString(2, (pcode2));
                pre.setString(3, (pgroup1));
                pre.setString(4, (pgroup2));
                ResultSet rs = pre.executeQuery();
                rs.first();
                if (rs.getRow() != 0) {
                    do {
                        String pcode = "";
                        String pdesc = "";
                        String unit = "";
                        Double price = 0.000;
                        String plcode = "";
                        String plname = "";
                        Double pqty = 0.000;
                        String psubunit = "";
                        String saletype = "";
                        int formula = 0;
                        if (rs.getString("pcode") != null) {
                            pcode = (rs.getString("pcode"));
                        }
                        if (rs.getString("pdesc") != null) {
                            pdesc = (rs.getString("pdesc"));
                        }
                        if (rs.getString("unit") != null) {
                            unit = (rs.getString("unit"));
                        }
                        if (rs.getString("price") != null) {
                            price = rs.getDouble("price");
                        }

                        if (detail) {
                            if (rs.getString("qty") != null) {
                                pqty = rs.getDouble("qty");
                            }
                            if (rs.getString("plcode") != null) {
                                plcode = (rs.getString("plcode"));
                            }
                            if (rs.getString("plname") != null) {
                                plname = (rs.getString("plname"));
                            }
                            if (rs.getString("subunit") != null) {
                                psubunit = (rs.getString("subunit"));
                            }
                            if (rs.getString("saletype") != null) {
                                saletype = (rs.getString("saletype"));
                            }
                            if (rs.getString("formula") != null) {
                                formula = rs.getInt("formula");
                            }

                            new bomFactory(pcode, pdesc, unit, price, 0, plcode, plname, pqty, psubunit, saletype, formula,"");
                        } else {
                            if (rs.getString("qty") != null) {
                                pqty = rs.getDouble("qty");
                            }
                            int qty = pqty.intValue();

                            new bomFactory(pcode, pdesc, unit, price, qty, plcode, plname, pqty, psubunit, saletype, formula,"");
                        }
                    } while (rs.next());
                }
                rs.close();
                pre.close();
                rs = null;
                pre = null;
            }
        } catch (Exception e) {
            msn.showMessageError("<html>เกิดข้อผิดพลาดบางประการ<br>" + e + "</html>");
            e.printStackTrace();
            return;
        }

        if (pcode1.equals("")) {
            pcode1 = "ไม่ระบุ";
        }
        if (pcode2.equals("ZZZZZZZZZZZZZZZZ")) {
            pcode2 = "ไม่ระบุ";
        }
        if (pgroup1.equals("")) {
            pgroup1 = "ไม่ระบุ";
        }
        if (pgroup2.equals("ZZZZZ")) {
            pgroup2 = "ไม่ระบุ";
        }

        JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(
                bomFactory.createBeanCollection());

        map.put("pcode1", pcode1);
        map.put("pcode2", pcode2);
        map.put("group1", pgroup1);
        map.put("group2", pgroup2);
//        map.put("totalplu", f.intFmtShow(totalPLU));
        map.put("totalplu", "0");
        r.viewReportbean(filename, map, "report_BOM", ds);
    }

    private void clearAll() {
        clearTable1();
        clearTable2();

        txt_pcode1.setText("");
        txt_pcode1.setFocusable(true);
        txt_pcode1.requestFocus();
        btn_pcode1.setEnabled(true);
        btn_pcode1.setFocusable(false);

        txt_pcode2.setText("");
        txt_pcode2.setFocusable(true);
        btn_pcode2.setEnabled(true);
        btn_pcode2.setFocusable(false);

        txt_pgroup1.setText("");
        txt_pgroup1.setFocusable(true);
        btn_pgroup1.setEnabled(true);
        btn_pgroup1.setFocusable(false);

        txt_pgroup2.setText("");
        txt_pgroup2.setFocusable(true);
        btn_pgroup2.setEnabled(true);
        btn_pgroup2.setFocusable(false);

        btn_process.setFocusable(false);
        btn_print.setFocusable(false);
        btn_exit.setFocusable(false);

        txt_totalplu.setText("จำนวนรายการ 0 รายการ");
        txt_totalplu.setFocusable(false);
        txt_totalplu.setEditable(false);
        txt_totalplu.setBackground(f.colorDisable());

        txt_ingredent.setText("จำนวนวัตถุดิบ 0 รายการ");
        txt_ingredent.setFocusable(false);
        txt_ingredent.setEditable(false);
        txt_ingredent.setBackground(f.colorDisable());

        chk_detail.setSelected(false);
        chk_detail.setFocusable(false);
    }

    private void loadDetail(String pcode) {
        clearTable2();
        String sql = "select b.plcode, p.pdesc, b.pqty, p.psubunit, b.saletype "
                + "from posbom b "
                + "left join product p on b.plcode=p.pcode "
                + "where b.pcode=? "
                + "order by b.plcode";

        int count = 0;
        try {
            if (!dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
                PreparedStatement pre = dbUtility.con.prepareStatement(sql);
                pre.setString(1, cvth.Unicode2ASCII(pcode));
                System.out.println("sql " + pre.toString());
                ResultSet rs = pre.executeQuery();
                rs.first();
                if (rs.getRow() != 0) {
                    do {
                        count++;
                        String pdesc = "";
                        String psubunit = "";
                        if (rs.getString("p.pdesc") != null) {
                            pdesc = cvth.ASCII2Unicode(rs.getString("p.pdesc"));
                        }
                        if (rs.getString("p.psubunit") != null) {
                            psubunit = cvth.ASCII2Unicode(rs.getString("p.psubunit"));
                        }
                        model2.addRow(new Object[]{
                                    cvth.ASCII2Unicode(rs.getString("b.plcode")),
                                    pdesc,
                                    f.double3Fmt(rs.getDouble("b.pqty")),
                                    psubunit,
                                    cvth.ASCII2Unicode(rs.getString("b.saletype"))
                                });
                    } while (rs.next());
                }
                rs.close();
                pre.close();
                rs = null;
                pre = null;
            } else {
                PreparedStatement pre = dbUtility.con.prepareStatement(sql);
                pre.setString(1, (pcode));
                ResultSet rs = pre.executeQuery();
                rs.first();
                if (rs.getRow() != 0) {
                    do {
                        count++;
                        String pdesc = "";
                        String psubunit = "";
                        if (rs.getString("p.pdesc") != null) {
                            pdesc = (rs.getString("p.pdesc"));
                        }
                        if (rs.getString("p.psubunit") != null) {
                            psubunit = (rs.getString("p.psubunit"));
                        }
                        model2.addRow(new Object[]{
                                    rs.getString("b.plcode"),
                                    pdesc,
                                    f.double3Fmt(rs.getDouble("b.pqty")),
                                    psubunit,
                                    (rs.getString("b.saletype"))
                                });
                    } while (rs.next());
                }
                rs.close();
                pre.close();
                rs = null;
                pre = null;
            }
        } catch (Exception e) {
            msn.showMessageError("<html>เกิดข้อผิดพลาดบางประการ<br>" + e + "</html>");
            e.printStackTrace();
            return;
        }

        txt_ingredent.setText("จำนวนวัตถุดิบ " + f.intFmtShow(count) + " รายการ");
    }
}
