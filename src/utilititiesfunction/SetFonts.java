/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package utilititiesfunction;

import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class SetFonts extends javax.swing.JDialog {
    private String chkpath="";
    private Object chkos;
    private int chk=0,chkk;
    private String fontname;
    String FormName ="setfonts";
    private int fontsize;
    getLanguage lang = new getLanguage();
    /**
     * Creates new form SetFonts
     */
    public SetFonts(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
             lang.setText(FormName, this, lang.getChklang());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listfont = new javax.swing.JList();
        sizefont = new javax.swing.JFormattedTextField();
        db_ok = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        db_exit = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listsizefonts = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        prelable = new javax.swing.JLabel();
        txt_fonts = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Font Chooser");
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        listfont.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listfont.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        listfont.setSelectedIndex(0);
        listfont.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listfontMouseClicked(evt);
            }
        });
        listfont.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                listfontKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                listfontKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(listfont);

        sizefont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizefontActionPerformed(evt);
            }
        });
        sizefont.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sizefontKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sizefontKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sizefontKeyTyped(evt);
            }
        });

        db_ok.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        db_ok.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Ok.png"))); // NOI18N
        db_ok.setText("ตกลง (OK)");
        db_ok.setName("db_ok"); // NOI18N
        db_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                db_okActionPerformed(evt);
            }
        });

        jLabel2.setText("Size :");
        jLabel2.setName("dbsize");

        jLabel1.setText("Fonts :");
        jLabel1.setName("dbfont");

        db_exit.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        db_exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Log-Out-icon.png"))); // NOI18N
        db_exit.setText("ออก (Exit)");
        db_exit.setName("db_exit"); // NOI18N
        db_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                db_exitActionPerformed(evt);
            }
        });

        listsizefonts.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "3", "5", "8", "10", "12", "14", "18", "20", "24", "36", "48" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listsizefonts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listsizefonts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listsizefontsMouseClicked(evt);
            }
        });
        listsizefonts.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                listsizefontsKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                listsizefontsKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(listsizefonts);

        jLabel3.setText("Preview");
        jLabel3.setName("dbpreview");

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        prelable.setText("Example     ทดสอบ");
        prelable.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(prelable, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(prelable, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        txt_fonts.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane1)
                                .addGap(39, 39, 39))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_fonts, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(58, 58, 58)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sizefont, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(61, 61, 61))
                    .addComponent(jLabel3)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(db_ok, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(db_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(34, 34, 34))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_fonts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(sizefont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(db_ok, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(db_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {sizefont, txt_fonts});

        jLabel4.setFont(new java.awt.Font("Norasi", 1, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Font Chooser");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 617, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-658)/2, (screenSize.height-525)/2, 658, 525);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        DefaultListModel model,model2;
      
      
        model = new DefaultListModel();
       
        listfont.setModel(model);
        GraphicsEnvironment e = GraphicsEnvironment.getLocalGraphicsEnvironment();
        Font[] allFonts = e.getAllFonts();
        
        for(int i = 0;i<allFonts.length;i++){
           // allFonts[i].getSize();
            model.add(i, allFonts[i].getFontName());
          //  model2.add(i,allFonts[i].getSize());
        }
        listfont.setSelectedIndex(0);
        listsizefonts.setSelectedIndex(0);
          fontname = listfont.getSelectedValue().toString();
          fontsize = Integer.parseInt(listsizefonts.getSelectedValue().toString());
           setfontopen(this.chk);
         //prelable1.setFont(f);
         txt_fonts.setText(fontname);
         sizefont.setText(fontsize+"");
    }//GEN-LAST:event_formWindowOpened

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
       
    }//GEN-LAST:event_formMouseClicked

    private void listfontMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listfontMouseClicked
         fontname = listfont.getSelectedValue().toString();
          fontsize = Integer.parseInt(listsizefonts.getSelectedValue().toString());
        Font f = new Font(fontname, WIDTH, fontsize);
       
        if(evt.getClickCount()==1){
           // System.out.print("sdf");
             prelable.setFont(f);
//              prelable1.setFont(f);
              txt_fonts.setText(fontname);
         }
    }//GEN-LAST:event_listfontMouseClicked

    private void listsizefontsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listsizefontsMouseClicked
        fontname = listfont.getSelectedValue().toString();
          fontsize = Integer.parseInt(listsizefonts.getSelectedValue().toString());
        Font f = new Font(fontname, WIDTH, fontsize);
       
        if(evt.getClickCount()==1){
           // System.out.print("sdf");
             prelable.setFont(f);
//              prelable1.setFont(f);
             sizefont.setText(fontsize+"");
         }
    }//GEN-LAST:event_listsizefontsMouseClicked

    private void listfontKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listfontKeyPressed
       /*  if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
              String fontsname = listfont.getSelectedValue().toString();
         int fontsize = Integer.parseInt(listsizefonts.getSelectedValue().toString());
        Font f = new Font(fontsname, WIDTH, fontsize);
          prelable.setFont(f);
           sizefont.setText(fontsize+"");
       
         }
         else if(evt.getKeyCode() == KeyEvent.VK_UP){
              String fontsname = listfont.getSelectedValue().toString();
         int fontsize = Integer.parseInt(listsizefonts.getSelectedValue().toString());
        Font f = new Font(fontsname, WIDTH, fontsize);
          prelable.setFont(f);
           sizefont.setText(fontsize+"");
         }*/
    }//GEN-LAST:event_listfontKeyPressed

    private void listsizefontsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listsizefontsKeyPressed
        /* if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
              String fontsname = listfont.getSelectedValue().toString();
         int fontsize = Integer.parseInt(listsizefonts.getSelectedValue().toString());
        Font f = new Font(fontsname, WIDTH, fontsize);
          prelable.setFont(f);
          sizefont.setText(fontsize+"");
       
         }
         else if(evt.getKeyCode() == KeyEvent.VK_UP){
              String fontsname = listfont.getSelectedValue().toString();
         int fontsize = Integer.parseInt(listsizefonts.getSelectedValue().toString());
        Font f = new Font(fontsname, WIDTH, fontsize);
          prelable.setFont(f);
           sizefont.setText(fontsize+"");
         }*/
    }//GEN-LAST:event_listsizefontsKeyPressed

    private void sizefontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizefontActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sizefontActionPerformed

    private void listsizefontsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listsizefontsKeyReleased
       if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
             fontname = listfont.getSelectedValue().toString();
         fontsize = Integer.parseInt(listsizefonts.getSelectedValue().toString());
        Font f = new Font(fontname, WIDTH, fontsize);
          prelable.setFont(f);
//           prelable1.setFont(f);
          sizefont.setText(fontsize+"");
       
         }
         else if(evt.getKeyCode() == KeyEvent.VK_UP){
              fontname = listfont.getSelectedValue().toString();
         fontsize = Integer.parseInt(listsizefonts.getSelectedValue().toString());
        Font f = new Font(fontname, WIDTH, fontsize);
          prelable.setFont(f);
         //  prelable1.setFont(f);
           sizefont.setText(fontsize+"");
         }
    }//GEN-LAST:event_listsizefontsKeyReleased

    private void listfontKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listfontKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
             fontname = listfont.getSelectedValue().toString();
          fontsize = Integer.parseInt(listsizefonts.getSelectedValue().toString());
        Font f = new Font(fontname, WIDTH, fontsize);
          prelable.setFont(f);
//           prelable1.setFont(f);
          txt_fonts.setText(fontname);
       
         }
         else if(evt.getKeyCode() == KeyEvent.VK_UP){
             fontname = listfont.getSelectedValue().toString();
          fontsize = Integer.parseInt(listsizefonts.getSelectedValue().toString());
        Font f = new Font(fontname, WIDTH, fontsize);
          prelable.setFont(f);
         //  prelable1.setFont(f);
           txt_fonts.setText(fontname);
         }
    }//GEN-LAST:event_listfontKeyReleased

    private void db_okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_db_okActionPerformed
      setTxtfont(fontname);
            setTxtsize(fontsize);
            setChkk(1);
            this.dispose();

        // TODO add your handling code here:
    }//GEN-LAST:event_db_okActionPerformed

    private void db_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_db_exitActionPerformed
        setChkk(0);
        this.dispose();
        // TODO add your handling code here:
        
    }//GEN-LAST:event_db_exitActionPerformed

    private void sizefontKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sizefontKeyPressed
        if ((evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9') || (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE)) {
            sizefont.setEditable(true);

        } else {
           sizefont.setEditable(false);
            //JOptionPane.showMessageDialog(null, "ไม่สามารถกรอกข้อมูลตัวหนังสือ\nกรุณากรอกข้อมูลใหม่");

        }
    }//GEN-LAST:event_sizefontKeyPressed

    private void sizefontKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sizefontKeyTyped
         if(sizefont.getText().length()>=2){
            evt.consume();

        }
    }//GEN-LAST:event_sizefontKeyTyped

    private void sizefontKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sizefontKeyReleased
          fontname = listfont.getSelectedValue().toString();
          if(sizefont.getText().equals("")){
              fontsize =0;
          }
          else
         fontsize = Integer.parseInt(sizefont.getText().toString());
        Font f = new Font(fontname, WIDTH, fontsize);
          prelable.setFont(f);
    }//GEN-LAST:event_sizefontKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SetFonts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SetFonts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SetFonts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SetFonts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                SetFonts dialog = new SetFonts(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton db_exit;
    private javax.swing.JButton db_ok;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList listfont;
    private javax.swing.JList listsizefonts;
    private javax.swing.JLabel prelable;
    private javax.swing.JFormattedTextField sizefont;
    private javax.swing.JTextField txt_fonts;
    // End of variables declaration//GEN-END:variables
    private Font[] getFontsall(){
         GraphicsEnvironment e = GraphicsEnvironment.getLocalGraphicsEnvironment();
        Font[] allFonts = e.getAllFonts();
        return allFonts;
    
    
    }
    public void writeToText(String pathFile, String[] data) {
        //System.out.println("write log: "+data);
       File file = new File(pathFile); 
       if(file.isFile()){
           //JOptionPane.showMessageDialog(this, "found");
       }
       else{
            JOptionPane.showMessageDialog(this, "not found");
       }
        PrintWriter writer = null;
        try {
            writer = new PrintWriter(file);
           
            for(int i=0;i<data.length;i++){
                if(i==data.length-1){
                     writer.write(data[i]);
                }
                else
                    writer.write(data[i]+":");
    
            }
             JOptionPane.showMessageDialog(this, "Saved");

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error Write File!");
        } finally {
            try {
                writer.close();
            } catch (Exception e) {
            }
        }

    }
    public void setTxtfont(String fontname){
        this.fontname = fontname;
    }
    public void setTxtsize(int fontsize){
        this.fontsize = fontsize;
    }
    public String getFontname(){
        return this.fontname;
    }
    public int getFontsize(){
        return this.fontsize;
    }
    public void setChk(int chk){
        this.chk = chk;
    }
    public void setChkk(int chkk){
        this.chkk = chkk;
    }
    public int getChkk(){
        return this.chkk;
    }
    public void setfontopen(int chk){
         String inFile = chkpath + "/spapplication/dbconfig/language/font.ini";
        String outFile = chkpath + "/spapplication/dbconfig/languageconvert/font.ini";
        String inCharset = "UTF-8";
        String outCharset = "TIS-620";
        String ArrayStr[] = new String [4];
        int sizefont[]= new int[4];
        String fontname [] = new String[4];
      /*  if (!chkos.equalsIgnoreCase("linux")) {
            ConverCharSet(inFile, inCharset, outFile, outCharset);
        } else {
            copyFile(inFile, outFile);
        }*/
        File fObject = new File(inFile);
        if (!fObject.canRead()) {
            JOptionPane.showMessageDialog(null, "กรุณากำหนด File font.ini");
            System.exit(0);
        } else {
            try {
                boolean eof = false;
                FileReader file = new FileReader(inFile);
                BufferedReader buff = new BufferedReader(file);
                while (!eof) {
                    String line = buff.readLine();
                    if (line == null) {
                        eof = true;
                    } else {
                        if (!line.equals("")) {
                            String TempStr = line;
                            ArrayStr = TempStr.split(":");

                           
                        }
                    }
                }
                for(int i = 0;i<ArrayStr.length;i++){
                int strleng = ArrayStr[i].length()-2;
                 sizefont[i] = Integer.parseInt(ArrayStr[i].substring(strleng));
                 fontname[i] = ArrayStr[i].substring(0,strleng);
               // System.out.print(fontname[i]+sizefont[i]);
                }
                if(chk==0){
             Font f = new Font(fontname[0], WIDTH, sizefont[0]);
                prelable.setFont(f);
                }
                else if(chk==1){
                     Font f = new Font(fontname[1], WIDTH, sizefont[1]);
                prelable.setFont(f);
                }
                 else if(chk==2){
                     Font f = new Font(fontname[2], WIDTH, sizefont[2]);
                prelable.setFont(f);
                }
                 else if(chk==3){
                     Font f = new Font(fontname[3], WIDTH, sizefont[3]);
                prelable.setFont(f);
                }
                buff.close();

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
