package EStamp;

import EStamp.EStampReport.Report_ES;
import borfunction.GetApplicationName;
import borfunction.GetUser;
import dbutility.dbUtility;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import jxl.write.WriteException;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.save.JRSingleSheetXlsSaveContributor;
import report.Report;
import utilititiesfunction.Export2Excel;
import utilititiesfunction.ThaiUtilities;
import utilititiesfunction.getLanguage;

public class dForm_showStampCampaign extends javax.swing.JDialog {

    dbUtility db = new dbUtility();
    ThaiUtilities cvth = new ThaiUtilities();
    PreparedStatement pre = null;
    PreparedStatement preUp = null;
    ResultSet rs = null;

    formatStamp f = new formatStamp();
    showMessage msn = new showMessage();

    getLanguage lang = new getLanguage();

    int countTotal = 0;

    public dForm_showStampCampaign(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        db.dbconnect();
        clearForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        db_lblh = new javax.swing.JLabel();
        db_lblh1 = new javax.swing.JLabel();
        txtSFrom = new javax.swing.JTextField();
        db_lblh2 = new javax.swing.JLabel();
        txtSTo = new javax.swing.JTextField();
        btnBrows1 = new javax.swing.JButton();
        btnBrows2 = new javax.swing.JButton();
        btnProcess = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        btnExcel = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblShow = new javax.swing.JTable();
        jPanel34 = new javax.swing.JPanel();
        lbl_countTotal = new javax.swing.JLabel();
        xb_lblCount3 = new javax.swing.JLabel();
        xb_lblCount4 = new javax.swing.JLabel();
        xb_lblCount1 = new javax.swing.JLabel();
        lbl_countCondition = new javax.swing.JLabel();
        xb_lblCount2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblShow1 = new javax.swing.JTable();
        jPanel35 = new javax.swing.JPanel();
        lbl_countTotal1 = new javax.swing.JLabel();
        xb_lblCount5 = new javax.swing.JLabel();
        xb_lblCount6 = new javax.swing.JLabel();
        xb_lblCount7 = new javax.swing.JLabel();
        lbl_countCondition1 = new javax.swing.JLabel();
        xb_lblCount8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("แสดงรายละเอียดในแสตมป์แคมเปญ");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        db_lblh.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        db_lblh.setText("กำหนดรหัสแสตมป์แคมเปญ");
        db_lblh.setName("db_lblh"); // NOI18N

        db_lblh1.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        db_lblh1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        db_lblh1.setText("จาก");
        db_lblh1.setName("db_lblh"); // NOI18N

        txtSFrom.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        txtSFrom.setText("txtSFrom");
        txtSFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSFromActionPerformed(evt);
            }
        });
        txtSFrom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSFromKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSFromKeyPressed(evt);
            }
        });

        db_lblh2.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        db_lblh2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        db_lblh2.setText("ถึง");
        db_lblh2.setName("db_lblh"); // NOI18N

        txtSTo.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        txtSTo.setText("txtSTo");
        txtSTo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSToKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSToKeyPressed(evt);
            }
        });

        btnBrows1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Windows-Magnifier-icon.png"))); // NOI18N
        btnBrows1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrows1ActionPerformed(evt);
            }
        });

        btnBrows2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Windows-Magnifier-icon.png"))); // NOI18N
        btnBrows2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrows2ActionPerformed(evt);
            }
        });

        btnProcess.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btnProcess.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Hourglass-icon.png"))); // NOI18N
        btnProcess.setText("F5-ประมวลผล");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(db_lblh, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(db_lblh1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(txtSFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBrows1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(db_lblh2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(txtSTo, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBrows2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnBrows2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnBrows1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(db_lblh)
                            .addComponent(db_lblh1)
                            .addComponent(txtSFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(db_lblh2)
                            .addComponent(txtSTo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnProcess, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnExit.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/LogOut-icon.png"))); // NOI18N
        btnExit.setText("Exit");
        btnExit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExit.setIconTextGap(0);
        btnExit.setName("db_btnExit"); // NOI18N
        btnExit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnPrint.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Printer-icon.png"))); // NOI18N
        btnPrint.setText("พิมพ์");
        btnPrint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPrint.setIconTextGap(0);
        btnPrint.setName("db_btnExit"); // NOI18N
        btnPrint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        btnExcel.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btnExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Excel-icon.png"))); // NOI18N
        btnExcel.setText("Excel File");
        btnExcel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExcel.setIconTextGap(0);
        btnExcel.setName("db_btnExit"); // NOI18N
        btnExcel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jTabbedPane1.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblShow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "รายละเอียดแคมเปญ", "รหัสแสตมป์โปรฯ", "ชื่อแสตมป์โปรฯ", "วันที่เริ่มต้น", "วันที่สิ้นสุด", "จำนวนซื้อ", "จำนวนแจก"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblShow);
        if (tblShow.getColumnModel().getColumnCount() > 0) {
            tblShow.getColumnModel().getColumn(0).setPreferredWidth(210);
            tblShow.getColumnModel().getColumn(1).setPreferredWidth(100);
            tblShow.getColumnModel().getColumn(2).setPreferredWidth(200);
            tblShow.getColumnModel().getColumn(3).setPreferredWidth(85);
            tblShow.getColumnModel().getColumn(4).setPreferredWidth(85);
            tblShow.getColumnModel().getColumn(5).setPreferredWidth(70);
            tblShow.getColumnModel().getColumn(6).setPreferredWidth(70);
        }

        jPanel4.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 12, 630, 470));

        jPanel34.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbl_countTotal.setFont(new java.awt.Font("Norasi", 1, 18)); // NOI18N
        lbl_countTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_countTotal.setText("0");

        xb_lblCount3.setFont(new java.awt.Font("Norasi", 1, 18)); // NOI18N
        xb_lblCount3.setText("จำนวนทั้งหมด");
        xb_lblCount3.setName("xb_lblCount3"); // NOI18N

        xb_lblCount4.setFont(new java.awt.Font("Norasi", 1, 18)); // NOI18N
        xb_lblCount4.setText("รายการ");
        xb_lblCount4.setName("xb_lblCount4"); // NOI18N

        xb_lblCount1.setFont(new java.awt.Font("Norasi", 1, 18)); // NOI18N
        xb_lblCount1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        xb_lblCount1.setText("จำนวนของแต่ละแคมเปญ");
        xb_lblCount1.setName("xb_lblCount1"); // NOI18N

        lbl_countCondition.setFont(new java.awt.Font("Norasi", 1, 18)); // NOI18N
        lbl_countCondition.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_countCondition.setText("0");

        xb_lblCount2.setFont(new java.awt.Font("Norasi", 1, 18)); // NOI18N
        xb_lblCount2.setText("รายการ");
        xb_lblCount2.setName("xb_lblCount2"); // NOI18N

        javax.swing.GroupLayout jPanel34Layout = new javax.swing.GroupLayout(jPanel34);
        jPanel34.setLayout(jPanel34Layout);
        jPanel34Layout.setHorizontalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel34Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(xb_lblCount1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_countCondition, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(xb_lblCount2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(xb_lblCount3, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_countTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(xb_lblCount4, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112))
        );
        jPanel34Layout.setVerticalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lbl_countCondition)
                .addComponent(xb_lblCount1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(xb_lblCount2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_countTotal)
                .addComponent(xb_lblCount3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(xb_lblCount4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 490, 630, -1));

        jTabbedPane1.addTab("โปรโมชั่่นสำหรับการแจกแต้ม", jPanel4);

        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblShow1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "รายละเอียดแคมเปญ", "รหัสแสตมป์โปรฯ", "ชื่อแสตมป์โปรฯ", "วันที่เริ่มต้น", "วันที่สิ้นสุด", "จำนวนสินค้าที่แลก", "จำนวนแต้มที่ใช้"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblShow1);
        if (tblShow1.getColumnModel().getColumnCount() > 0) {
            tblShow1.getColumnModel().getColumn(0).setPreferredWidth(210);
            tblShow1.getColumnModel().getColumn(1).setPreferredWidth(100);
            tblShow1.getColumnModel().getColumn(2).setPreferredWidth(200);
            tblShow1.getColumnModel().getColumn(3).setPreferredWidth(85);
            tblShow1.getColumnModel().getColumn(4).setPreferredWidth(85);
            tblShow1.getColumnModel().getColumn(5).setPreferredWidth(100);
            tblShow1.getColumnModel().getColumn(6).setPreferredWidth(110);
        }

        jPanel5.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 12, 630, 470));

        jPanel35.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbl_countTotal1.setFont(new java.awt.Font("Norasi", 1, 18)); // NOI18N
        lbl_countTotal1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_countTotal1.setText("0");

        xb_lblCount5.setFont(new java.awt.Font("Norasi", 1, 18)); // NOI18N
        xb_lblCount5.setText("จำนวนทั้งหมด");
        xb_lblCount5.setName("xb_lblCount3"); // NOI18N

        xb_lblCount6.setFont(new java.awt.Font("Norasi", 1, 18)); // NOI18N
        xb_lblCount6.setText("รายการ");
        xb_lblCount6.setName("xb_lblCount4"); // NOI18N

        xb_lblCount7.setFont(new java.awt.Font("Norasi", 1, 18)); // NOI18N
        xb_lblCount7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        xb_lblCount7.setText("จำนวนของแต่ละแคมเปญ");
        xb_lblCount7.setName("xb_lblCount1"); // NOI18N

        lbl_countCondition1.setFont(new java.awt.Font("Norasi", 1, 18)); // NOI18N
        lbl_countCondition1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_countCondition1.setText("0");

        xb_lblCount8.setFont(new java.awt.Font("Norasi", 1, 18)); // NOI18N
        xb_lblCount8.setText("รายการ");
        xb_lblCount8.setName("xb_lblCount2"); // NOI18N

        javax.swing.GroupLayout jPanel35Layout = new javax.swing.GroupLayout(jPanel35);
        jPanel35.setLayout(jPanel35Layout);
        jPanel35Layout.setHorizontalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel35Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(xb_lblCount7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_countCondition1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(xb_lblCount8, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(xb_lblCount5, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_countTotal1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(xb_lblCount6, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112))
        );
        jPanel35Layout.setVerticalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lbl_countCondition1)
                .addComponent(xb_lblCount7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(xb_lblCount8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_countTotal1)
                .addComponent(xb_lblCount5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(xb_lblCount6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 490, 630, -1));

        jTabbedPane1.addTab("โปรโมชั่นสำหรับการแลกแต้ม", jPanel5);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        list.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listMouseClicked(evt);
            }
        });
        list.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                listKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(list);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
//        ProcessPrint();
        ProcessPrintBean();
    }//GEN-LAST:event_btnPrintActionPerformed

    private void btnExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelActionPerformed
        ProcessExcel();
    }//GEN-LAST:event_btnExcelActionPerformed

    private void listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMouseClicked
        String Condition = list.getSelectedValue().toString();
        String _str[] = Condition.split("-");
        if (_str[0].equals("All")) {
            loadDataToList("All", "All");
            InsertToTemp("", "ZZZ");
        } else {
            loadDetailPoint(_str[0], _str[0]);
            loadDetailRedeem(_str[0], _str[0]);
            InsertToTemp(_str[0], _str[0]);
        }
    }//GEN-LAST:event_listMouseClicked

    private void listKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listKeyReleased

    }//GEN-LAST:event_listKeyReleased

    private void txtSFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSFromActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSFromActionPerformed

    private void btnBrows1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrows1ActionPerformed
        browsCampaign(txtSFrom);
    }//GEN-LAST:event_btnBrows1ActionPerformed

    private void btnBrows2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrows2ActionPerformed
        browsCampaign(txtSTo);
    }//GEN-LAST:event_btnBrows2ActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        loadDataToList(txtSFrom.getText().trim(), txtSTo.getText().trim());
        String campaignFrom = txtSFrom.getText().trim();
        String campaignTo = txtSTo.getText().trim();
        if (campaignTo.equals("")) {
            campaignTo = "ZZZ";
        }
        InsertToTemp(campaignFrom, campaignTo);
    }//GEN-LAST:event_btnProcessActionPerformed

    private void txtSFromKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSFromKeyTyped
        if (txtSFrom.getText().length() >= 6) {
            evt.consume();
        }
    }//GEN-LAST:event_txtSFromKeyTyped

    private void txtSToKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSToKeyTyped
        if (txtSTo.getText().length() >= 6) {
            evt.consume();
        }
    }//GEN-LAST:event_txtSToKeyTyped

    private void txtSFromKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSFromKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            txtSTo.requestFocus();
        }
        if (evt.getKeyCode() == evt.VK_ESCAPE) {
            txtSFrom.setText("");
        }
        if (evt.getKeyCode() == evt.VK_F1) {
            browsCampaign(txtSFrom);
        }
    }//GEN-LAST:event_txtSFromKeyPressed

    private void txtSToKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSToKeyPressed
        if (evt.getKeyCode() == evt.VK_ESCAPE) {
            txtSTo.setText("");
        }
        if (evt.getKeyCode() == evt.VK_F5) {
            loadDataToList(txtSFrom.getText().trim(), txtSTo.getText().trim());
        }
        if (evt.getKeyCode() == evt.VK_F1) {
            browsCampaign(txtSTo);
        }
    }//GEN-LAST:event_txtSToKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dForm_showStampCampaign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dForm_showStampCampaign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dForm_showStampCampaign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dForm_showStampCampaign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                dForm_showStampCampaign dialog = new dForm_showStampCampaign(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrows1;
    private javax.swing.JButton btnBrows2;
    private javax.swing.JButton btnExcel;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnProcess;
    private javax.swing.JLabel db_lblh;
    private javax.swing.JLabel db_lblh1;
    private javax.swing.JLabel db_lblh2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbl_countCondition;
    private javax.swing.JLabel lbl_countCondition1;
    private javax.swing.JLabel lbl_countTotal;
    private javax.swing.JLabel lbl_countTotal1;
    private javax.swing.JList list;
    private javax.swing.JTable tblShow;
    private javax.swing.JTable tblShow1;
    private javax.swing.JTextField txtSFrom;
    private javax.swing.JTextField txtSTo;
    private javax.swing.JLabel xb_lblCount1;
    private javax.swing.JLabel xb_lblCount2;
    private javax.swing.JLabel xb_lblCount3;
    private javax.swing.JLabel xb_lblCount4;
    private javax.swing.JLabel xb_lblCount5;
    private javax.swing.JLabel xb_lblCount6;
    private javax.swing.JLabel xb_lblCount7;
    private javax.swing.JLabel xb_lblCount8;
    // End of variables declaration//GEN-END:variables

    DefaultListModel modelList;
    DefaultTableModel model;
    DefaultTableModel modelRedeem;

    private void resetTable() {
        int rowCount = model.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            model.removeRow(0);
        }
    }

    private void setTable() {
        model = (DefaultTableModel) tblShow.getModel();
        tblShow.setShowGrid(true);
        tblShow.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblShow.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblShow.setRowSelectionAllowed(true);
        tblShow.setShowGrid(true);
        tblShow.setBackground(Color.WHITE);
        tblShow.setGridColor(Color.LIGHT_GRAY);

        JTableHeader header = tblShow.getTableHeader();
        header.setFont(new java.awt.Font("Norasi", java.awt.Font.BOLD, 14));
        tblShow.setFont(new java.awt.Font("Norasi", java.awt.Font.PLAIN, 14));
        tblShow.setRowHeight(25);
        tblShow.setAutoCreateRowSorter(true);

        ((DefaultTableCellRenderer) tblShow.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

        DecimalFormat DoubleFmt = new DecimalFormat("##,###,##0.00");
        DecimalFormat IntegerFmt = new DecimalFormat("##,###,##0");
        DecimalFormat PersentFmt = new DecimalFormat("#,##0.00%");

        TableColumnModel tcm = tblShow.getColumnModel();

        DefaultTableCellRenderer d;

        d = new DefaultTableCellRenderer();
        d.setHorizontalAlignment(SwingConstants.CENTER);
        tcm.getColumn(3).setCellRenderer(d);
        tcm.getColumn(4).setCellRenderer(d);

        d = new DefaultTableCellRenderer();
        d.setHorizontalAlignment(SwingConstants.LEFT);
        tcm.getColumn(0).setCellRenderer(d);
        tcm.getColumn(1).setCellRenderer(d);
        tcm.getColumn(2).setCellRenderer(d);

        d = new DefaultTableCellRenderer();
        d.setHorizontalAlignment(SwingConstants.RIGHT);
        tcm.getColumn(5).setCellRenderer(d);
        tcm.getColumn(6).setCellRenderer(d);

    }

    private void resetTable2() {
        int rowCount = modelRedeem.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            modelRedeem.removeRow(0);
        }
    }

    private void setTable2() {
        modelRedeem = (DefaultTableModel) tblShow1.getModel();
        tblShow1.setShowGrid(true);
        tblShow1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblShow1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblShow1.setRowSelectionAllowed(true);
        tblShow1.setShowGrid(true);
        tblShow1.setBackground(Color.WHITE);
        tblShow1.setGridColor(Color.LIGHT_GRAY);

        JTableHeader header = tblShow1.getTableHeader();
        header.setFont(new java.awt.Font("Norasi", java.awt.Font.BOLD, 14));
        tblShow1.setFont(new java.awt.Font("Norasi", java.awt.Font.PLAIN, 14));
        tblShow1.setRowHeight(25);
        tblShow1.setAutoCreateRowSorter(true);

        ((DefaultTableCellRenderer) tblShow1.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

        DecimalFormat DoubleFmt = new DecimalFormat("##,###,##0.00");
        DecimalFormat IntegerFmt = new DecimalFormat("##,###,##0");
        DecimalFormat PersentFmt = new DecimalFormat("#,##0.00%");

        TableColumnModel tcm = tblShow1.getColumnModel();

        DefaultTableCellRenderer d;

        d = new DefaultTableCellRenderer();
        d.setHorizontalAlignment(SwingConstants.CENTER);
        tcm.getColumn(3).setCellRenderer(d);
        tcm.getColumn(4).setCellRenderer(d);

        d = new DefaultTableCellRenderer();
        d.setHorizontalAlignment(SwingConstants.LEFT);
        tcm.getColumn(0).setCellRenderer(d);
        tcm.getColumn(1).setCellRenderer(d);
        tcm.getColumn(2).setCellRenderer(d);

        d = new DefaultTableCellRenderer();
        d.setHorizontalAlignment(SwingConstants.RIGHT);
        tcm.getColumn(5).setCellRenderer(d);
        tcm.getColumn(6).setCellRenderer(d);

    }

    private void clearForm() {
        txtSFrom.setText("");
        txtSTo.setText("");

        btnBrows1.setFocusable(false);
        btnBrows2.setFocusable(false);
        btnProcess.setFocusable(false);
        btnExcel.setFocusable(false);
        btnPrint.setFocusable(false);
        btnExit.setFocusable(false);

        setTable();
        setTable2();
        loadDataToList("All", "All");
        String campaignFrom = txtSFrom.getText().trim();
        String campaignTo = txtSTo.getText().trim();
        if (campaignTo.equals("")) {
            campaignTo = "ZZZ";
        }
        InsertToTemp(campaignFrom, campaignTo);
    }

    private void browsCampaign(JTextField txtOutput) {
        try {
            dBrows_Campaign frm = new dBrows_Campaign(null, true);
            frm.setVisible(true);
            if (frm.getSccode().length() > 0) {
                txtOutput.setText(frm.getSccode());
            }
        } catch (Exception e) {
            msn.showMessageWarning(e.getMessage());
        }
    }

    private void loadDataToList(String ConditionFrom, String ConditionTo) {
        String sql = "";
        if (ConditionFrom.equals("All") & ConditionTo.equals("All")) {
            sql = "select * from stampcampaign order by s_campaigncode";
        }

        modelList = new DefaultListModel();
        list.setModel(modelList);
        try {
            if (!db.Char_Set.equalsIgnoreCase("utf-8")) {
                if (!(ConditionFrom.equals("All")) & (!ConditionTo.equals("All"))) {
                    if (ConditionTo.equals("")) {
                        ConditionTo = "ZZZ";
                    }
                    sql = "select * from stampcampaign  "
                            + "where s_campaigncode >='" + cvth.ASCII2Unicode(ConditionFrom) + "' and s_campaigncode <='" + cvth.ASCII2Unicode(ConditionTo) + "' "
                            + "order by s_campaigncode";
                }
                pre = dbUtility.con.prepareStatement(sql);
                rs = pre.executeQuery();
                rs.first();
                if (rs.getRow() != 0) {
                    do {
                        if (rs.isFirst()) {
                            String all = "All";
                            modelList.addElement(all);
                        }
                        modelList.addElement(cvth.ASCII2Unicode(rs.getString("s_campaigncode")) + " - " + cvth.ASCII2Unicode(rs.getString("s_campaignname")));

                    } while (rs.next());
                } else {
                    String all = "All";
                    modelList.addElement(all);
                }
            } else {
                if (!(ConditionFrom.equals("All")) & (!ConditionTo.equals("All"))) {
                    if (ConditionTo.equals("")) {
                        ConditionTo = "ZZZ";
                    }
                }
                pre = dbUtility.con.prepareStatement(sql);
                rs = pre.executeQuery();
                rs.first();
                if (rs.getRow() != 0) {
                    do {
                        if (rs.isFirst()) {
                            String all = "All";
                            modelList.addElement(all);
                        }
                        modelList.addElement(rs.getString("s_campaigncode") + " - " + rs.getString("s_campaignname"));
                    } while (rs.next());
                } else {
                    String all = "All";
                    modelList.addElement(all);
                }
            }
            loadDetailPoint(ConditionFrom, ConditionTo);
            loadDetailRedeem(ConditionFrom, ConditionTo);
        } catch (Exception e) {
            e.printStackTrace();
            msn.showMessageError(e.getMessage());
        }
    }

    private void loadDetailPoint(String ConditionFrom, String ConditionTo) {
        resetTable();
        int countCondition = 0;
        String sql = "";
        try {
            if (ConditionFrom.equals("All") & ConditionTo.equals("All")) {
                sql = "select * from stampcampaign s "
                        + "left join stamppromotion sp on s.s_campaigncode = sp.sp_campaign "
                        + "where s.s_campaigncode is not null and sp.sp_campaign  is not null "
                        + "group by s.s_campaigncode,sp.sp_code "
                        + "order by s.s_campaigncode,sp.sp_code ";
                countTotal = 0;
            }
            if (!db.Char_Set.equalsIgnoreCase("utf-8")) {
                if (!(ConditionFrom.equals("All")) & (!ConditionTo.equals("All"))) {
                    if (ConditionTo.equals("")) {
                        ConditionTo = "ZZZ";
                    }
                    sql = "select * from stampcampaign s "
                            + "left join stamppromotion sp on s.s_campaigncode = sp.sp_campaign "
                            + "where s.s_campaigncode >='" + cvth.ASCII2Unicode(ConditionFrom) + "' and s.s_campaigncode <='" + cvth.ASCII2Unicode(ConditionTo) + "' "
                            + "and s.s_campaigncode is not null and sp.sp_campaign  is not null "
                            + "order by s.s_campaigncode,sp.sp_code ";
                }
                pre = dbUtility.con.prepareStatement(sql);
                rs = pre.executeQuery();
                rs.first();
                if (rs.getRow() != 0) {
                    do {
                        if (ConditionFrom.equals("All") & ConditionTo.equals("All")) {
                            countTotal++;
                        }
                        countCondition++;
                        model.addRow(new Object[]{
                            cvth.ASCII2Unicode(rs.getString("s.s_campaigncode")) + " - " + cvth.ASCII2Unicode(rs.getString("s.s_campaignname")),
                            cvth.ASCII2Unicode(rs.getString("sp.sp_code")),
                            cvth.ASCII2Unicode(rs.getString("sp.sp_name")),
                            cvth.ASCII2Unicode(f.convertDatesqlToShow(rs.getString("sp.sp_startdate"))),
                            cvth.ASCII2Unicode(f.convertDatesqlToShow(rs.getString("sp.sp_enddate"))),
                            cvth.ASCII2Unicode(f.intFmtShow(rs.getInt("sp.sp_saleitem"))),
                            cvth.ASCII2Unicode(f.intFmtShow(rs.getInt("sp.sp_point")))
                        });
                    } while (rs.next());
                }
            } else {
                if (!(ConditionFrom.equals("All")) & (!ConditionTo.equals("All"))) {
                    if (ConditionTo.equals("")) {
                        ConditionTo = "ZZZ";
                    }
                    sql = "select * from stampcampaign s "
                            + "left join stamppromotion sp on s.s_campaigncode = sp.sp_campaign "
                            + "where s.s_campaigncode >='" + ConditionFrom + "' and s.s_campaigncode <='" + ConditionTo + "' "
                            + "and s.s_campaigncode is not null and sp.sp_campaign  is not null "
                            + "order by s.s_campaigncode,sp.sp_code ";
                }
                pre = dbUtility.con.prepareStatement(sql);
                rs = pre.executeQuery();
                rs.first();
                if (rs.getRow() != 0) {
                    do {
                        if (ConditionFrom.equals("All") & ConditionTo.equals("All")) {
                            countTotal++;
                        }
                        countCondition++;
                        model.addRow(new Object[]{
                            rs.getString("s.s_campaigncode") + " - " + rs.getString("s.s_campaignname"),
                            rs.getString("sp.sp_code"),
                            rs.getString("sp.sp_name"),
                            f.convertDatesqlToShow(rs.getString("sp.sp_startdate")),
                            f.convertDatesqlToShow(rs.getString("sp.sp_enddate")),
                            f.intFmtShow(rs.getString("sp.sp_saleitem")),
                            f.intFmtShow(rs.getString("sp.sp_point"))
                        });
                    } while (rs.next());
                }
            }
            lbl_countCondition.setText("" + countCondition);
            lbl_countTotal.setText("" + countTotal);
        } catch (Exception e) {
            e.printStackTrace();
            msn.showMessageError(e.getMessage());
        }
    }

    private void ProcessExcel() {
        Export2Excel test = new Export2Excel();
        JFileChooser chooser = new JFileChooser();
        File f;

        String condition = "รายงานข้อมูลแสตมป์แคมเปญ    ";
        String alert_save = "มีไฟล์ข้อมูลชื่อนี้อยู่แล้ว คุณต้องการบันทึกรายการนี้หรือไม่...?";

        try {
            f = new File(new File("stampcampaign.xls").getCanonicalPath());
            chooser.setSelectedFile(f);
            chooser.setFileFilter(new JRSingleSheetXlsSaveContributor(Locale.ENGLISH, null));
            int confirm2 = chooser.showSaveDialog(this);
            if (confirm2 == JFileChooser.APPROVE_OPTION) {

                File curFile = chooser.getSelectedFile();

                if (curFile.exists()) {
                    int confirm = msn.showMessageConfirm("Yes", "No", alert_save);
                    if (confirm == 1) {
                        return;
                    } else {
                        try {
                            test.setOutputFile(curFile.toString());
                            test.writetableNoSum(tblShow, tblShow.getColumnModel(), condition);
                            msn.showMessageInformation("บันทึกข้อมูลเรียบร้อบแล้ว");
                        } catch (IOException ex) {
                        } catch (WriteException ex) {
                        }
                    }
                } else {
                    try {
                        test.setOutputFile(curFile.toString());
                        test.writetableNoSum(tblShow, tblShow.getColumnModel(), condition);
                        msn.showMessageInformation("บันทึกข้อมูลเรียบร้อบแล้ว");
                    } catch (IOException ex) {
                    } catch (WriteException ex) {
                    }
                }
            }
        } catch (IOException e) {
        }
    }

    private void ProcessPrint() {
        String campaignFrom = txtSFrom.getText().trim();
        String campaignTo = txtSTo.getText().trim();
        String strDate1 = "1900-01-01";
        String strDate2 = "4000-01-01";

        if (campaignTo.equals("")) {
            campaignTo = "ZZZ";
        }

        getLanguage lang = new getLanguage();
        Map parm = new HashMap();
        parm.put("companyName", lang.getTextCompanyReport());
        parm.put("application", new GetApplicationName().getApplicationName());
        parm.put("user", new GetUser().getUser());
        parm.put("campaignFrom", campaignFrom);
        parm.put("campaignTo", campaignTo);
        parm.put("strDate1", strDate1);
        parm.put("strDate2", strDate2);

        String frmName = "dForm_masterCampaign";
        String rptName = "stampCampaign-ProReport";
        Report rpt = new Report();
        rpt.viewReport(rptName, parm, frmName);
    }

    private void loadDetailRedeem(String ConditionFrom, String ConditionTo) {
        resetTable2();
        int countCondition = 0;
        String sql = "";
        try {
            if (ConditionFrom.equals("All") & ConditionTo.equals("All")) {
                sql = "select * from stampcampaign s "
                        + "left join stampredeem sr on s.s_campaigncode = sr.sr_campaign "
                        + "where s.s_campaigncode is not null and sr.sr_campaign  is not null "
                        + "group by s.s_campaigncode,sr.sr_code "
                        + "order by s.s_campaigncode,sr.sr_code ";
                countTotal = 0;
            }
            if (!db.Char_Set.equalsIgnoreCase("utf-8")) {
                if (!(ConditionFrom.equals("All")) & (!ConditionTo.equals("All"))) {
                    if (ConditionTo.equals("")) {
                        ConditionTo = "ZZZ";
                    }
                    sql = "select * from stampcampaign s "
                            + "left join stampredeem sr on s.s_campaigncode = sr.sr_campaign "
                            + "where s.s_campaigncode >='" + cvth.ASCII2Unicode(ConditionFrom) + "' and s.s_campaigncode <='" + cvth.ASCII2Unicode(ConditionTo) + "' "
                            + "and s.s_campaigncode is not null and sr.sr_campaign  is not null "
                            + "order by s.s_campaigncode,sr.sr_code ";
                }
                pre = dbUtility.con.prepareStatement(sql);
                rs = pre.executeQuery();
                rs.first();
                if (rs.getRow() != 0) {
                    do {
                        if (ConditionFrom.equals("All") & ConditionTo.equals("All")) {
                            countTotal++;
                        }
                        countCondition++;
                        modelRedeem.addRow(new Object[]{
                            cvth.ASCII2Unicode(rs.getString("s.s_campaigncode")) + " - " + cvth.ASCII2Unicode(rs.getString("s.s_campaignname")),
                            cvth.ASCII2Unicode(rs.getString("sr.sr_code")),
                            cvth.ASCII2Unicode(rs.getString("sr.sr_name")),
                            cvth.ASCII2Unicode(f.convertDatesqlToShow(rs.getString("sr.sr_startdate"))),
                            cvth.ASCII2Unicode(f.convertDatesqlToShow(rs.getString("sr.sr_enddate"))),
                            cvth.ASCII2Unicode(f.intFmtShow(rs.getInt("sr.sr_saleitem"))),
                            cvth.ASCII2Unicode(f.intFmtShow(rs.getInt("sr.sr_point")))
                        });
                    } while (rs.next());
                }
            } else {
                if (!(ConditionFrom.equals("All")) & (!ConditionTo.equals("All"))) {
                    if (ConditionTo.equals("")) {
                        ConditionTo = "ZZZ";
                    }
                    sql = "select * from stampcampaign s "
                            + "left join stampredeem sr on s.s_campaigncode = sr.sr_campaign "
                            + "where s.s_campaigncode >='" + ConditionFrom + "' and s.s_campaigncode <='" + ConditionTo + "' "
                            + "and s.s_campaigncode is not null and sr.sr_campaign  is not null "
                            + "order by s.s_campaigncode,sr.sr_code ";
                }
                pre = dbUtility.con.prepareStatement(sql);
                rs = pre.executeQuery();
                rs.first();
                if (rs.getRow() != 0) {
                    do {
                        if (ConditionFrom.equals("All") & ConditionTo.equals("All")) {
                            countTotal++;
                        }
                        countCondition++;
                        modelRedeem.addRow(new Object[]{
                            rs.getString("s.s_campaigncode") + " - " + rs.getString("s.s_campaignname"),
                            rs.getString("sr.sr_code"),
                            rs.getString("sr.sr_name"),
                            f.convertDatesqlToShow(rs.getString("sp.sr_startdate")),
                            f.convertDatesqlToShow(rs.getString("sp.sr_enddate")),
                            f.intFmtShow(rs.getString("sr.sr_saleitem")),
                            f.intFmtShow(rs.getString("sr.sr_point"))
                        });
                    } while (rs.next());
                }
            }
            lbl_countCondition1.setText("" + countCondition);
            lbl_countTotal1.setText("" + countTotal);
        } catch (Exception e) {
            e.printStackTrace();
            msn.showMessageError(e.getMessage());
        }
    }

    private void InsertToTemp(String campaignFrom, String campaignTo) {
        deleteTmpReport();
        try {
            String sql = "select * from stampcampaign sc "
                    + "left join stamppromotion sp on sc.s_campaigncode = sp.sp_campaign "
                    + "left join stampredeem sr on sc.s_campaigncode = sr.sr_campaign "
                    + "where sc.s_campaigncode >='" + campaignFrom + "' and sc.s_campaigncode <='" + campaignTo + "' "
                    + "order by sc.s_campaigncode, sp.sp_code, sr.sr_code ";
            pre = dbUtility.con.prepareStatement(sql);
            rs = pre.executeQuery();
            rs.first();
            if (rs.getRow() != 0) {

                String inst = "insert into stamptempproreport(s_campaigncode, s_campaignname, s_campaigndateStr, s_campaigndateEnd, s_campaignRemark, "
                        + "s_procode, s_proname, s_prodateStr, s_prodateEnd, s_proday, s_prosaletype, s_protype) "
                        + "values(?,?,?,?,?,?,?,?,?,?,?,?)";

                do {
                    if (!db.Char_Set.equalsIgnoreCase("utf-8")) {
                        if (!(rs.getString("sp.sp_code") == null)) {
                            if (!SeekToTemp(rs.getString("sc.s_campaigncode"), rs.getString("sp.sp_code"), "1")) {
                                preUp = dbUtility.con.prepareStatement(inst);
                                preUp.setString(1, cvth.Unicode2ASCII(rs.getString("sc.s_campaigncode")));
                                preUp.setString(2, cvth.Unicode2ASCII(rs.getString("sc.s_campaignname")));
                                preUp.setString(3, rs.getString("sc.s_campaignstart"));
                                preUp.setString(4, rs.getString("sc.s_campaignend"));
                                preUp.setString(5, cvth.Unicode2ASCII(rs.getString("sc.s_campaignremark")));
                                preUp.setString(6, cvth.Unicode2ASCII(rs.getString("sp.sp_code")));
                                preUp.setString(7, cvth.Unicode2ASCII(rs.getString("sp.sp_name")));
                                preUp.setString(8, cvth.Unicode2ASCII(rs.getString("sp.sp_startdate")));
                                preUp.setString(9, cvth.Unicode2ASCII(rs.getString("sp.sp_enddate")));
                                preUp.setString(10, cvth.Unicode2ASCII(rs.getString("sp.sp_day")));
                                preUp.setString(11, cvth.Unicode2ASCII(rs.getString("sp.sp_saletype")));
                                preUp.setString(12, "1");
                                preUp.executeUpdate();
                            }
                        }

                        if (!(rs.getString("sr.sr_code") == null)) {
                            if (!SeekToTemp(rs.getString("sc.s_campaigncode"), rs.getString("sr.sr_code"), "2")) {
                                preUp = dbUtility.con.prepareStatement(inst);
                                preUp.setString(1, cvth.Unicode2ASCII(rs.getString("sc.s_campaigncode")));
                                preUp.setString(2, cvth.Unicode2ASCII(rs.getString("sc.s_campaignname")));
                                preUp.setString(3, rs.getString("sc.s_campaignstart"));
                                preUp.setString(4, rs.getString("sc.s_campaignend"));
                                preUp.setString(5, cvth.Unicode2ASCII(rs.getString("sc.s_campaignremark")));
                                preUp.setString(6, cvth.Unicode2ASCII(rs.getString("sr.sr_code")));
                                preUp.setString(7, cvth.Unicode2ASCII(rs.getString("sr.sr_name")));
                                preUp.setString(8, cvth.Unicode2ASCII(rs.getString("sr.sr_startdate")));
                                preUp.setString(9, cvth.Unicode2ASCII(rs.getString("sr.sr_enddate")));
                                preUp.setString(10, cvth.Unicode2ASCII(rs.getString("sr.sr_day")));
                                preUp.setString(11, cvth.Unicode2ASCII(rs.getString("sr.sr_saletype")));
                                preUp.setString(12, "2");
                                preUp.executeUpdate();
                            }
                        }
                    } else {
                        if (!(rs.getString("sp.sp_code") == null)) {
                            if (!SeekToTemp(rs.getString("sc.s_campaigncode"), rs.getString("sp.sp_code"), "1")) {
                                preUp = dbUtility.con.prepareStatement(inst);
                                preUp.setString(1, rs.getString("sc.s_campaigncode"));
                                preUp.setString(2, rs.getString("sc.s_campaignname"));
                                preUp.setString(3, rs.getString("sc.s_campaignstart"));
                                preUp.setString(4, rs.getString("sc.s_campaignend"));
                                preUp.setString(5, rs.getString("sc.s_campaignremark"));
                                preUp.setString(6, rs.getString("sp.sp_code"));
                                preUp.setString(7, rs.getString("sp.sp_name"));
                                preUp.setString(8, rs.getString("sp.sp_startdate"));
                                preUp.setString(9, rs.getString("sp.sp_enddate"));
                                preUp.setString(10, rs.getString("sp.sp_day"));
                                preUp.setString(11, rs.getString("sp.sp_saletype"));
                                preUp.setString(12, "1");
                                preUp.executeUpdate();
                            }

                        }

                        if (!(rs.getString("sr.sr_code") == null)) {
                            if (!SeekToTemp(rs.getString("sc.s_campaigncode"), rs.getString("sr.sr_code"), "2")) {
                                preUp = dbUtility.con.prepareStatement(inst);
                                preUp.setString(1, rs.getString("sc.s_campaigncode"));
                                preUp.setString(2, rs.getString("sc.s_campaignname"));
                                preUp.setString(3, rs.getString("sc.s_campaignstart"));
                                preUp.setString(4, rs.getString("sc.s_campaignend"));
                                preUp.setString(5, rs.getString("sc.s_campaignremark"));
                                preUp.setString(6, rs.getString("sr.sr_code"));
                                preUp.setString(7, rs.getString("sr.sr_name"));
                                preUp.setString(8, rs.getString("sr.sr_startdate"));
                                preUp.setString(9, rs.getString("sr.sr_enddate"));
                                preUp.setString(10, rs.getString("sr.sr_day"));
                                preUp.setString(11, rs.getString("sr.sr_saletype"));
                                preUp.setString(12, "2");
                                preUp.executeUpdate();
                            }

                        }
                    }

                } while (rs.next());
            }
            pre.close();
            preUp.close();
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
            msn.showMessageError(e.getMessage());
        }
    }

    private void deleteTmpReport() {
        try {
            String del = "delete from stamptempproreport ";
            PreparedStatement pre = dbUtility.con.prepareStatement(del);
            pre.executeUpdate();
        } catch (Exception e) {
        }

    }

    private boolean SeekToTemp(String camapaign, String promotion, String type) {
        boolean isHave = false;
        try {
            String sql = "select * from stamptempproreport where s_campaigncode='" + camapaign + "' and s_procode='" + promotion + "' and s_protype='" + type + "' ";
            System.out.println("SeekToTemp//" + sql);
            PreparedStatement pre = dbUtility.con.prepareStatement(sql);
            ResultSet rs = pre.executeQuery();
            rs.first();
            if (rs.getRow() != 0) {
                isHave = true;
                System.out.println("have : true ");
            } else {
                System.out.println("have : false ");
                isHave = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
            msn.showMessageError(e.getMessage());
        }
        return isHave;
    }

    private void ProcessPrintBean() {
        try {
            Map parm = new HashMap();
            JRBeanCollectionDataSource ds = null;
            ds = new JRBeanCollectionDataSource(EStamp.EStampReport.dataBeanCampaignfileDetail.getCollectionCampaignDetail());
            parm.put("companyName", lang.getTextCompanyReport());
            parm.put("application", new GetApplicationName().getApplicationName());
            parm.put("user", new GetUser().getUser());

            String frmName = "dForm_showStampCampaign";
            String rptName = "ES_rptCampaignDetail";
            Report_ES rpt = new Report_ES();
            rpt.viewReportbean(rptName, parm, frmName, ds);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
