/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package masterfile;

import Main.MainControl;
import borfunction.GetComputerName;
import borfunction.btnFind;
import borfunction.settext;
import dbutility.dbUtility;
import directory_utility.DirectoryUtility;
import java.awt.event.KeyEvent;
import java.io.*;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import jxl.write.WriteException;
import net.sf.jasperreports.view.save.JRSingleSheetXlsSaveContributor;
import org.jdesktop.swingx.util.OS;
import reportfile.rptChkpost;
import system.os.utility.ClassPath;
import utilities.DateChooser.DateUtil;
import utilititiesfunction.*;
import zip_utility.ZipUnzip;

/**
 *
 * @author user
 */
public class PostData extends javax.swing.JFrame {

    /**
     * Creates new form PostData
     */
    ThaiUtilities cvth = new ThaiUtilities();
    btnFind btn = new btnFind();
    dbUtility db = new dbUtility();
    Statement stmt;
    int per = 0;
    int per2 = 0;
    DefaultTableModel model;
    private String ComName = "";
    String XBranCode1 = "";
    String XBranCode2 = "";
    String DataPath = "";
    String BackupPath = "";
    String PathTemp = "";
    String PathConvert = "";
    static boolean processStop;
    static String FileCharset = "UTF-8";
    static SimpleDateFormat SqlDateFmt = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
    public static String OS = System.getProperty("os.name").toLowerCase();

    public PostData() {
        this.setExtendedState(PostData.MAXIMIZED_BOTH);
        initComponents();
        checkuserconfig();
        db.dbconnect();
        ClassPath cp = new ClassPath();
        cp.ClassPath();
        DataPath = ClassPath.datapath;
        BackupPath = ClassPath.backuppath;
        PathTemp = ClassPath.PathTemp;
        PathConvert = ClassPath.PathConvert;
        ComName = new GetComputerName().getComputerName();
        model = (DefaultTableModel) tblShow.getModel();
        tblShow.setShowGrid(true);
        tblShow.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblShow.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblShow.setRowSelectionAllowed(true);
        tblShow.setBackground(java.awt.Color.WHITE);
        tblShow.setGridColor(java.awt.Color.gray);
        tblShow.setAutoCreateRowSorter(true);
        TableColumnModel tcm = tblShow.getColumnModel();
        DefaultTableCellRenderer d;
        JTableHeader header = tblShow.getTableHeader();
        header.setFont(new java.awt.Font("Norasi", java.awt.Font.PLAIN, 14));
        tblShow.setFont(new java.awt.Font("Norasi", java.awt.Font.PLAIN, 14));
        tblShow.setRowHeight(25);
        t_date1.setText(Format.dateFmtShow.format(new java.util.Date()));
        t_date2.setText(Format.dateFmtShow.format(new java.util.Date()));
        t_branch1.setText("");
        t_branch2.setText("");
        txtBranchMsg.setText("Branch...Process...");
        txtFileMsg.setText("File...Process....");
        ClearGrid();
        ClearVariable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        d_branch = new javax.swing.JLabel();
        t_branch1 = new javax.swing.JFormattedTextField();
        btn7 = new javax.swing.JButton();
        t_branch2 = new javax.swing.JFormattedTextField();
        btn17 = new javax.swing.JButton();
        d_branch3 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        d_date2 = new javax.swing.JLabel();
        btn_Calendar = new javax.swing.JButton();
        d_date3 = new javax.swing.JLabel();
        t_date1 = new javax.swing.JFormattedTextField();
        t_date2 = new javax.swing.JFormattedTextField();
        btn_Calendar1 = new javax.swing.JButton();
        d_date1 = new javax.swing.JLabel();
        db_btnProcress = new javax.swing.JButton();
        db_btnExel = new javax.swing.JButton();
        btnExit1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        txtBranchMsg = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        txtFileMsg = new javax.swing.JLabel();
        jProgressBar2 = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblShow = new javax.swing.JTable();
        PostCnt = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        d_branch.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        d_branch.setText("กำหนดช่วงสาขา (Branch)");
        d_branch.setName("d_branch"); // NOI18N

        t_branch1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                t_branch1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_branch1FocusLost(evt);
            }
        });
        t_branch1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                t_branch1KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_branch1KeyTyped(evt);
            }
        });

        btn7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Windows-Magnifier-icon.png"))); // NOI18N
        btn7.setFocusable(false);
        btn7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn7ActionPerformed(evt);
            }
        });

        t_branch2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                t_branch2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_branch2FocusLost(evt);
            }
        });
        t_branch2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                t_branch2KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_branch2KeyTyped(evt);
            }
        });

        btn17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Windows-Magnifier-icon.png"))); // NOI18N
        btn17.setFocusable(false);
        btn17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn17ActionPerformed(evt);
            }
        });

        d_branch3.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        d_branch3.setText("ถึงสาขา");
        d_branch3.setName("d_branch3"); // NOI18N

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(t_branch1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(d_branch3)
                        .addGap(4, 4, 4)
                        .addComponent(t_branch2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn17, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(d_branch, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(d_branch, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(t_branch1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(t_branch2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(d_branch3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btn17, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        d_date2.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        d_date2.setText("วันที่");
        d_date2.setName("d_date2"); // NOI18N

        btn_Calendar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Date-and-Time-icon .png"))); // NOI18N
        btn_Calendar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_Calendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_CalendarActionPerformed(evt);
            }
        });

        d_date3.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        d_date3.setText("ถึงวันที่");
        d_date3.setName("d_date3"); // NOI18N

        t_date1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        t_date1.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        t_date1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                t_date1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_date1FocusLost(evt);
            }
        });
        t_date1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                t_date1KeyPressed(evt);
            }
        });

        t_date2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        t_date2.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        t_date2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                t_date2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_date2FocusLost(evt);
            }
        });
        t_date2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                t_date2KeyPressed(evt);
            }
        });

        btn_Calendar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Date-and-Time-icon .png"))); // NOI18N
        btn_Calendar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btn_Calendar1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_Calendar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Calendar1ActionPerformed(evt);
            }
        });

        d_date1.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        d_date1.setText("กำหนดช่วงวันที่(Date)");
        d_date1.setName("d_date1"); // NOI18N

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(d_date2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_date1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_Calendar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(d_date3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_date2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_Calendar1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(d_date1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(d_date1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_Calendar1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(d_date3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(t_date2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btn_Calendar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(d_date2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(t_date1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        db_btnProcress.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        db_btnProcress.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Hourglass-icon.png"))); // NOI18N
        db_btnProcress.setText("ประมวลผล");
        db_btnProcress.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        db_btnProcress.setIconTextGap(0);
        db_btnProcress.setName("db_btnProcress"); // NOI18N
        db_btnProcress.setPreferredSize(new java.awt.Dimension(67, 68));
        db_btnProcress.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        db_btnProcress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                db_btnProcressActionPerformed(evt);
            }
        });

        db_btnExel.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        db_btnExel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Excel-icon.png"))); // NOI18N
        db_btnExel.setText("Exel File");
        db_btnExel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        db_btnExel.setIconTextGap(0);
        db_btnExel.setName("db_btnExel"); // NOI18N
        db_btnExel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        db_btnExel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                db_btnExelActionPerformed(evt);
            }
        });

        btnExit1.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btnExit1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/LogOut-icon.png"))); // NOI18N
        btnExit1.setText("Exit");
        btnExit1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExit1.setIconTextGap(0);
        btnExit1.setName("db_btnExit"); // NOI18N
        btnExit1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExit1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(db_btnProcress, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(db_btnExel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btnExit1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnExit1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(db_btnExel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(db_btnProcress, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtBranchMsg.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        txtBranchMsg.setText("กำลังประมวลผลสาขา 311-ทองหล่อ");

        jProgressBar1.setName("progress");
        jProgressBar1.setStringPainted(true);
        jProgressBar1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jProgressBar1StateChanged(evt);
            }
        });
        jProgressBar1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jProgressBar1PropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtBranchMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(txtBranchMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("วันที่ (Date)");

        txtDate.setFont(new java.awt.Font("Norasi", 1, 16)); // NOI18N
        txtDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDate.setText("21/01/2013");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtDate)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtFileMsg.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        txtFileMsg.setText("File Name........");

        jProgressBar2.setName("progress");
        jProgressBar2.setStringPainted(true);
        jProgressBar2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jProgressBar2StateChanged(evt);
            }
        });
        jProgressBar2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jProgressBar2PropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtFileMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(txtFileMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        tblShow.setAutoCreateRowSorter(true);
        tblShow.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tblShow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "สาขา", "ชื่อสาขา", "วันที่ (Date)", "PLU", "Terminal", "Cashier", "Coupon", "Invoice", "Hour", "RJ", "STC", "Credit", "Kic Tran", "Charge", "BI-Tran"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblShow.setRowHeight(25);
        jScrollPane1.setViewportView(tblShow);
        tblShow.getColumnModel().getColumn(0).setPreferredWidth(80);
        tblShow.getColumnModel().getColumn(1).setPreferredWidth(230);
        tblShow.getColumnModel().getColumn(2).setPreferredWidth(80);
        tblShow.getColumnModel().getColumn(3).setPreferredWidth(50);
        tblShow.getColumnModel().getColumn(4).setPreferredWidth(50);
        tblShow.getColumnModel().getColumn(5).setPreferredWidth(50);
        tblShow.getColumnModel().getColumn(6).setPreferredWidth(50);
        tblShow.getColumnModel().getColumn(7).setPreferredWidth(50);
        tblShow.getColumnModel().getColumn(8).setPreferredWidth(50);
        tblShow.getColumnModel().getColumn(9).setPreferredWidth(50);
        tblShow.getColumnModel().getColumn(10).setPreferredWidth(50);
        tblShow.getColumnModel().getColumn(11).setPreferredWidth(50);
        tblShow.getColumnModel().getColumn(12).setPreferredWidth(50);
        tblShow.getColumnModel().getColumn(13).setPreferredWidth(50);
        tblShow.getColumnModel().getColumn(14).setPreferredWidth(50);

        PostCnt.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        PostCnt.setText("จำนวนสาขาที่ POST 100 สาขา");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PostCnt, javax.swing.GroupLayout.PREFERRED_SIZE, 833, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PostCnt)
                .addGap(80, 80, 80))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1024)/2, (screenSize.height-768)/2, 1024, 768);
    }// </editor-fold>//GEN-END:initComponents
private void checkuserconfig() {
        //MenuName = Mast1
        UserLogin userrec = UserLogin.userlogin;
        if (userrec.getTran2().equals("1")) {
            db_btnProcress.setEnabled(false);
        }
        if (userrec.getTran2().equals("2")) {
            db_btnProcress.setEnabled(true);
        }
        if (userrec.getTran2().equals("3")) {
            db_btnProcress.setEnabled(true);
        }
    }
    private void t_branch1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_branch1FocusGained
        t_branch1.setText(t_branch1.getText());
        t_branch1.selectAll();
        // TODO add your handling code here:
    }//GEN-LAST:event_t_branch1FocusGained

    private void t_branch1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_branch1FocusLost
        t_branch1.select(0, 0);
        // TODO add your handling code here:
    }//GEN-LAST:event_t_branch1FocusLost

    private void t_branch1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_branch1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            t_branch2.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_F1) {
            btn.btnFindBranch(t_branch1);
        } else if (evt.getKeyCode() == KeyEvent.VK_F5) {
            btnProcessClick();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_t_branch1KeyPressed

    private void t_branch1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_branch1KeyTyped
        settext.setTextLength(evt, t_branch1, 12);
        // TODO add your handling code here:
    }//GEN-LAST:event_t_branch1KeyTyped

    private void btn7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn7ActionPerformed
        btn.btnFindBranch(t_branch1);
        // TODO add your handling code here:
    }//GEN-LAST:event_btn7ActionPerformed

    private void t_branch2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_branch2FocusGained
        t_branch2.setText(t_branch2.getText());
        t_branch2.selectAll();
        // TODO add your handling code here:
    }//GEN-LAST:event_t_branch2FocusGained

    private void t_branch2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_branch2FocusLost
        t_branch2.select(0, 0);
        // TODO add your handling code here:
    }//GEN-LAST:event_t_branch2FocusLost

    private void t_branch2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_branch2KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            t_date1.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_F1) {
            btn.btnFindBranch(t_branch2);
        } else if (evt.getKeyCode() == KeyEvent.VK_F5) {
            btnProcessClick();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_t_branch2KeyPressed

    private void t_branch2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_branch2KeyTyped
        settext.setTextLength(evt, t_branch2, 12);
        // TODO add your handling code here:
    }//GEN-LAST:event_t_branch2KeyTyped

    private void btn17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn17ActionPerformed
        btn.btnFindBranch(t_branch2);
        // TODO add your handling code here:
    }//GEN-LAST:event_btn17ActionPerformed

    private void btn_CalendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_CalendarActionPerformed
        //btn.btncalendar2(t_date1);
        DateUtil.showDateChooserDialog(t_date1, btn_Calendar);
        t_date1.requestFocus();
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_CalendarActionPerformed

    private void t_date1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_date1FocusGained
        t_date1.setText(t_date1.getText());
        t_date1.selectAll();
        // TODO add your handling code here:
    }//GEN-LAST:event_t_date1FocusGained

    private void t_date1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_date1FocusLost
        t_date1.select(0, 0);
        if (t_date1.getText().equals("")) {
            t_date1.setText(Format.dateFmtShow.format(new java.util.Date()));
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_t_date1FocusLost

    private void t_date1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_date1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            DateUtil.showDateChooserDialog(t_date1, btn_Calendar);
            t_date1.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            t_date2.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_F5) {
            btnProcessClick();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_t_date1KeyPressed

    private void t_date2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_date2FocusGained
        t_date2.setText(t_date2.getText());
        t_date2.selectAll();
        // TODO add your handling code here:
    }//GEN-LAST:event_t_date2FocusGained

    private void t_date2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_date2FocusLost
        t_date2.select(0, 0);
        if (t_date2.getText().equals("")) {
            t_date2.setText(Format.dateFmtShow.format(new java.util.Date()));
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_t_date2FocusLost

    private void t_date2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_date2KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            DateUtil.showDateChooserDialog(t_date2, btn_Calendar1);
            t_date2.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            t_branch1.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_F5) {
            btnProcessClick();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_t_date2KeyPressed

    private void btn_Calendar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Calendar1ActionPerformed
        //btn.btncalendar2(t_date2);
        DateUtil.showDateChooserDialog(t_date2, btn_Calendar1);
        t_date2.requestFocus();
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_Calendar1ActionPerformed

    private void db_btnProcressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_db_btnProcressActionPerformed
        btnProcessClick();
    }//GEN-LAST:event_db_btnProcressActionPerformed

    private void db_btnExelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_db_btnExelActionPerformed

        Export2Excel test = new Export2Excel();
        JFileChooser chooser = new JFileChooser();

        chooser.setSelectedFile(test.getDefaulepath());
        chooser.setFileFilter(new JRSingleSheetXlsSaveContributor(Locale.ENGLISH, null));
        int confirm = chooser.showSaveDialog(this);
        if (confirm == JFileChooser.APPROVE_OPTION) {

            File curFile = chooser.getSelectedFile();

            if (curFile.exists()) {
                int confirm2 = JOptionPane.showConfirmDialog(this, "ข้อมูลนี้มีอยู่แล้ว คุณต้องการบันทึกรายการนี้หรือไม่...?", "Confirm", JOptionPane.YES_NO_OPTION);
                if (confirm2 == JOptionPane.NO_OPTION) {
                    test.setDefaultpath(curFile);
                    db_btnExelActionPerformed(null);

                    return;

                }

            }
            DefaultTableModel dtb;
            JTableHeader jtb;
            dtb = (DefaultTableModel) tblShow.getModel();
            jtb = tblShow.getTableHeader();
            test.setOutputFile(curFile.toString());
            try {
                test.write2single(dtb, jtb);
                test.setDefaultpath(curFile);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex);
            } catch (WriteException ex) {
                JOptionPane.showMessageDialog(this, ex);
            }
        }
    }//GEN-LAST:event_db_btnExelActionPerformed

    private void btnExit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExit1ActionPerformed
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnExit1ActionPerformed

    private void jProgressBar2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jProgressBar2StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jProgressBar2StateChanged

    private void jProgressBar2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jProgressBar2PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jProgressBar2PropertyChange

    private void jProgressBar1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jProgressBar1StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jProgressBar1StateChanged

    private void jProgressBar1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jProgressBar1PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jProgressBar1PropertyChange

    private void ClearGrid() {
        PostCnt.setText("");
        int size = tblShow.getRowCount();
        if (size > 0) {
            for (int i = 0; i < size; i++) {
                model.removeRow(0);
            }
        }
    }

    private void ClearVariable() {
        txtBranchMsg.setText("กำลังประมวลผลสาขา...");
        txtFileMsg.setText("File Name...");
    }

    public void deletetempchkpost() {
        try {
            stmt = (Statement) db.con.createStatement();
            String sql = "Delete from tempchkpost where comname=?";
            PreparedStatement prm = (PreparedStatement) db.con.prepareStatement(sql);
            prm.setString(1, ComName);
            prm.executeUpdate();
            prm.close();
            stmt.close();
        } catch (Exception e) {
            PUtility.ShowMsg(e.getMessage().toString());
        }
    }

    public String ChkFileZip(String fBran, String ftype, Date fdate) {
        String ReturnVal = "";
        String FileName = GetDataZipFileName(fBran, ftype, fdate);
        File afile = new File(FileName);
        if (afile.exists()) {
            ReturnVal = "Y";
        } else {
            ReturnVal = "-";
        }
        return ReturnVal;
    }

    public String GetDataFileName(String fBran, String ftype, Date fdate) {
        String ReturnVal = "";
        ReturnVal = PathTemp + "/" + ftype + Format.dateTextShort.format(fdate) + "." + fBran;
        return ReturnVal;
    }

    public String GetDataFileConvert(String fBran, String ftype, Date fdate) {
        String ReturnVal = "";
        ReturnVal = PathConvert + "/" + ftype + Format.dateTextShort.format(fdate) + "." + fBran;
        return ReturnVal;
    }

    public String ChkFile(String fBran, String ftype, Date fdate) {
        String ReturnVal = "";
        String FileName = GetDataFileName(fBran, ftype, fdate);
        File afile = new File(FileName);
        if (afile.exists()) {
            ReturnVal = "Y";
        } else {
            ReturnVal = "-";
        }
        afile.exists();
        return ReturnVal;
    }

    public String GetDataZipFileName(String fBran, String ftype, Date fdate) {
        String ReturnVal = "";
        ReturnVal = DataPath + "/b" + fBran + "/" + fBran + "_" + ftype + "_" + Format.dateText.format(fdate) + ".zip";
        return ReturnVal;
    }

    public String GetDataBackupZipFileName(String fBran, String ftype, Date fdate) {
        String ReturnVal = "";
        String bPath = "P" + Format.yearBackupPath.format(fdate);
        ReturnVal = BackupPath + "/" + bPath + "/" + fBran + "_" + ftype + "_" + Format.dateText.format(fdate) + ".zip";
        return ReturnVal;
    }

    public int getBranchcount(String Bran1, String Bran2) {
        int ReturnVal = 0;
        try {
            ResultSet rs = null;
            stmt = (Statement) dbUtility.con.createStatement();
            String sql = "select count(code) as count from branfile where code>='" + Bran1 + "' and code<='" + Bran2 + "' order by code";
            rs = stmt.executeQuery(sql);
            if (rs.next()) {
                ReturnVal = rs.getInt("count");
            }

        } catch (SQLException ex) {
            Logger.getLogger(rptChkpost.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ReturnVal;
    }

    public void ConverCharSet(String inFile, String inCharsetName, String outFile, String outCharsetName) {
        DirectoryUtility dirUtil = new DirectoryUtility();
        try {
            dirUtil.getFileAndCreateDir(outFile);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        try {
            InputStreamReader in = new InputStreamReader(
                    new FileInputStream(inFile), inCharsetName);
            OutputStreamWriter out = new OutputStreamWriter(
                    new FileOutputStream(outFile), outCharsetName);
            int c = in.read();
            int n = 0;
            while (c != -1) {
                out.write(c);
                n++;
                c = in.read();
            }
            in.close();
            out.close();
        } catch (IOException e) {
            System.out.println(e.toString());
        }
    }

    public int ChkTotalRec(String fileName) {
        int totalRec = 0;
        File fObject = new File(fileName);
        if (!fObject.canRead()) {
            processStop = true;
            JOptionPane.showMessageDialog(this, "Error File " + fileName);
            return totalRec;
        }
        try {
            FileReader file = new FileReader(fileName);
            BufferedReader buff = new BufferedReader(file);
            boolean eof = false;
            try {
                while (!eof) {
                    String line;
                    line = buff.readLine();
                    if (line == null) {
                        eof = true;
                    } else {
                        totalRec++;
                    }
                }
                buff.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
        return totalRec;
    }

    public void btnProcessClick() {
        if (PUtility.ShowConfirmMsg("ยืนยันการ POST ข้อมูลการขายจากสาขา เข้า Master File...")) {
            Thread PostTextFile = new Thread(new PostDataTextFile());
            PostTextFile.start();
        }
    }

    public void insertTempCheckPost(String bcode, Date d1, String CPlu, String CTerminal, String CCashier,
            String CCupon, String CPromotion, String CInv, String CHour,
            String CRj, String CStc, String CBg, String CBa, String CCr, String CMem, String DZip, String Charge, String Bi, String Kictran) {

        try {
            ResultSet rs = null;
            String sqlinsert = "insert into tempchkpost(Comname,TDate,BrCode,BrName,DZip,Plu,"
                    + "Terminal,Cashier,Cupon,Inv,Hour,Rj,Stc,Bg,Ba,Cr,Mem,UserPost,KicTran,Charge,BI)"
                    + "values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement prm = (PreparedStatement) db.con.prepareStatement(sqlinsert);
            prm.setString(1, ComName);
            prm.setString(2, Format.dateFmtSql.format(d1));
            prm.setString(3, bcode);
            if (dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
                prm.setString(4, PUtility.SeekBranchName(bcode));
            } else {
                prm.setString(4, cvth.Unicode2ASCII(PUtility.SeekBranchName(bcode)));
            }
            prm.setString(5, DZip);
            prm.setString(6, CPlu);
            prm.setString(7, CTerminal);
            prm.setString(8, CCashier);
            prm.setString(9, CCupon);
            prm.setString(10, CInv);
            prm.setString(11, CHour);
            prm.setString(12, CRj);
            prm.setString(13, CStc);
            prm.setString(14, CBg);
            prm.setString(15, CBa);
            prm.setString(16, CCr);
            prm.setString(17, CMem);
            prm.setString(18, "-");
            prm.setString(19, Kictran);
            prm.setString(20, Charge);
            prm.setString(21, Bi);
            prm.executeUpdate();
            prm.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }

    private void LoadDataToGrid() {
        ClearGrid();
        int cnt = 0;
        try {
            String sql = "";
            stmt = (Statement) dbUtility.con.createStatement();
            sql = "select brcode,brname,tdate,dzip,plu,terminal,"
                    + "cashier,cupon,inv,hour,rj,stc,cr,kictran,charge,bi from tempchkpost "
                    + "where comname='" + ComName + "' order by brcode,tdate";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                cnt++;
                {
                    if (!dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
                        model.addRow(new Object[]{
                            cvth.ASCII2Unicode(rs.getString("brcode")),
                            cvth.ASCII2Unicode(rs.getString("brname")),
                            cvth.ASCII2Unicode(Format.dateFmtShow.format(rs.getDate("tdate"))),
                            cvth.ASCII2Unicode(rs.getString("plu")),
                            cvth.ASCII2Unicode(rs.getString("terminal")),
                            cvth.ASCII2Unicode(rs.getString("cashier")),
                            cvth.ASCII2Unicode(rs.getString("cupon")),
                            cvth.ASCII2Unicode(rs.getString("inv")),
                            cvth.ASCII2Unicode(rs.getString("hour")),
                            cvth.ASCII2Unicode(rs.getString("rj")),
                            cvth.ASCII2Unicode(rs.getString("stc")),
                            cvth.ASCII2Unicode(rs.getString("cr")),
                            cvth.ASCII2Unicode(rs.getString("kictran")),
                            cvth.ASCII2Unicode(rs.getString("charge")),
                            cvth.ASCII2Unicode(rs.getString("bi")),});

                    } else {
                        model.addRow(new Object[]{
                            rs.getString("brcode"),
                            rs.getString("brname"),
                            Format.dateFmtShow.format(rs.getDate("tdate")),
                            rs.getString("plu"),
                            rs.getString("terminal"),
                            rs.getString("cashier"),
                            rs.getString("cupon"),
                            rs.getString("inv"),
                            rs.getString("hour"),
                            rs.getString("rj"),
                            rs.getString("stc"),
                            rs.getString("cr"),
                            rs.getString("kictran"),
                            rs.getString("charge"),
                            rs.getString("bi")
                        });
                    }
                }
                PostCnt.setText("จำนวนสาขาที่ POST " + cnt + " สาขา ");
            }
        } catch (Exception e) {
            PUtility.ShowMsg(e.getMessage().toString());
        }
    }

    public boolean SeekCheckPost(String bcode, Date d1) {
        boolean RetValues = false;
        try {
            String sql = "";
            stmt = (Statement) dbUtility.con.createStatement();
            sql = "select *from chkpost "
                    + " where brcode='" + bcode + "' and tdate ='" + Format.dateFmtSql.format(d1) + "' ";
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                RetValues = true;
            } else {
                RetValues = false;
            }
        } catch (Exception e) {
            PUtility.ShowMsg(e.getMessage().toString());
        }
        return RetValues;
    }

    public void InsertCheckPost(String bcode, Date d1, String CPlu, String CTerminal, String CCashier,
            String CCupon, String CPromotion, String CInv, String CHour,
            String CRj, String CStc, String CBg, String CBa, String CCr, String CMem, String DZip, String Charge, String Bi, String Kictran) {

        try {
            ResultSet rs = null;
            String sqlinsert = "insert into chkpost(TDate,BrCode,BrName,DZip,Plu,"
                    + "Terminal,Cashier,Cupon,Inv,Hour,Rj,Stc,Bg,Ba,Cr,Mem,UserPost,Charge,BI)"
                    + "values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement prm = (PreparedStatement) db.con.prepareStatement(sqlinsert);
            prm.setString(1, Format.dateFmtSql.format(d1));
            prm.setString(2, bcode);
            if (dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
                prm.setString(3, PUtility.SeekBranchName(bcode));
            } else {
                prm.setString(3, cvth.Unicode2ASCII(PUtility.SeekBranchName(bcode)));
            }
            prm.setString(4, Kictran);
            prm.setString(5, CPlu);
            prm.setString(6, CTerminal);
            prm.setString(7, CCashier);
            prm.setString(8, CCupon);
            prm.setString(9, CInv);
            prm.setString(10, CHour);
            prm.setString(11, CRj);
            prm.setString(12, CStc);
            prm.setString(13, CBg);
            prm.setString(14, CBa);
            prm.setString(15, CCr);
            prm.setString(16, CMem);
            prm.setString(17, "M#1310");
            prm.setString(18, Charge);
            prm.setString(19, Bi);
            prm.executeUpdate();
            prm.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }

    public void UpdateCheckPost(String bcode, Date d1, String CPlu, String CTerminal, String CCashier,
            String CCupon, String CPromotion, String CInv, String CHour,
            String CRj, String CStc, String CBg, String CBa, String CCr, String CMem, String DZip, String Charge, String Bi, String Kictran) {

        try {
            ResultSet rs = null;
            String sqlinsert = "update chkpost set BrName=?,DZip=?,Plu=?,"
                    + "Terminal=?,Cashier=?,Cupon=?,Inv=?,Hour=?,Rj=?,Stc=?,Bg=?,Ba=?,Cr=?,Mem=?,UserPost=?,Charge=?,BI=? "
                    + "where tdate=? and brcode=? ";
            PreparedStatement prm = (PreparedStatement) db.con.prepareStatement(sqlinsert);
             if (dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
                prm.setString(1, PUtility.SeekBranchName(bcode));
            } else {
                prm.setString(1, cvth.Unicode2ASCII(PUtility.SeekBranchName(bcode)));
            }
            //prm.setString(1, PUtility.SeekBranchName(bcode));
            prm.setString(2, Kictran);
            prm.setString(3, CPlu);
            prm.setString(4, CTerminal);
            prm.setString(5, CCashier);
            prm.setString(6, CCupon);
            prm.setString(7, CInv);
            prm.setString(8, CHour);
            prm.setString(9, CRj);
            prm.setString(10, CStc);
            prm.setString(11, CBg);
            prm.setString(12, CBa);
            prm.setString(13, CCr);
            prm.setString(14, CMem);
            prm.setString(15, "M#1310");
            prm.setString(16, Charge);
            prm.setString(17, Bi);
            prm.setString(18, Format.dateFmtSql.format(d1));
            prm.setString(19, bcode);
            prm.executeUpdate();
            prm.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }

    public boolean copyFile(String des, String target) {
        boolean RetValues = false;
        new File(target).getParentFile().mkdir();
        if (des.equals(target)) {
            RetValues = true;
        } else {
            try {
                InputStream in = new FileInputStream(des);
                OutputStream out = new FileOutputStream(target);
                long max = 0;
                max = new File(des).length();
                byte[] buf = new byte[1024];
                int len;
                long use = 0;
                while ((len = in.read(buf)) > 0) {
                    use += len;
                    out.write(buf, 0, len);
                    out.flush();
                }
                in.close();
                out.close();
                RetValues = true;
            } catch (Exception e) {
                e.printStackTrace();
                RetValues = false;
            }
        }
        return RetValues;

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PostData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PostData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PostData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PostData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new PostData().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel PostCnt;
    private javax.swing.JButton btn17;
    private javax.swing.JButton btn7;
    private javax.swing.JButton btnExit1;
    private javax.swing.JButton btn_Calendar;
    private javax.swing.JButton btn_Calendar1;
    private javax.swing.JLabel d_branch;
    private javax.swing.JLabel d_branch3;
    private javax.swing.JLabel d_date1;
    private javax.swing.JLabel d_date2;
    private javax.swing.JLabel d_date3;
    private javax.swing.JButton db_btnExel;
    private javax.swing.JButton db_btnProcress;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField t_branch1;
    private javax.swing.JFormattedTextField t_branch2;
    private javax.swing.JFormattedTextField t_date1;
    private javax.swing.JFormattedTextField t_date2;
    private javax.swing.JTable tblShow;
    private javax.swing.JLabel txtBranchMsg;
    private javax.swing.JTextField txtDate;
    private javax.swing.JLabel txtFileMsg;
    // End of variables declaration//GEN-END:variables

    class PostDataTextFile extends javax.swing.JDialog implements Runnable {

        @Override
        public void run() {
            XBranCode1 = t_branch1.getText();
            if (t_branch2.getText().equals("")) {
                XBranCode2 = "ZZZZ";
            } else {
                XBranCode2 = t_branch2.getText();
            }
            int rowcount = getBranchcount(XBranCode1, XBranCode2);
            jProgressBar1.setMaximum(rowcount);
            jProgressBar1.setMinimum(0);
            jProgressBar1.setValue(0);
            per = 0;
            jProgressBar1.setValue(0);
            deletetempchkpost();
            try {
                ResultSet rs = null;
                String date1, date2;
                if (!t_date1.getText().trim().equals("")) {
                    date1 = t_date1.getText();
                } else {
                    date1 = "";
                }

                if (!t_date2.getText().trim().equals("")) {
                    date2 = t_date2.getText();
                } else {
                    date2 = Format.dateFmtShow.format(new java.util.Date());
                }
                int totaldate = DateUtil.getDate(date1, date2) + 1;
                stmt = (Statement) dbUtility.con.createStatement();
                String sql = "select * from branfile where code>='" + cvth.Unicode2ASCII(XBranCode1) + "' and code<='" + cvth.Unicode2ASCII(XBranCode2) + "' order by code";
                rs = stmt.executeQuery(sql);
                while (rs.next()) {
                    String brancode = rs.getString("code");
                    String branname = rs.getString("name");
                    txtBranchMsg.setText("กำลังประมวลผลสาขา  " + brancode + " - " + cvth.ASCII2Unicode(branname));
                    Date d1 = null;
                    Date d2 = null;
                    if (!date1.equals("")) {
                        d1 = Format.dateFmtShow.parse(date1);
                    }
                    if (!date2.equals("")) {
                        d2 = Format.dateFmtShow.parse(date2);
                    }
                    //Statement stmt2 = (Statement) dbUtility.con.createStatement();
                    while (d1.compareTo(d2) <= 0) {
                        boolean BranOK = false;
                        String tempdate = Format.dateFmtSql.format(d1);
                        String bcode = brancode;
                        String bname = branname;
                        txtDate.setText(Format.dateFmtShow.format(d1));

                        if (ChkFileZip(bcode, "DAI", d1).equals("Y")) {
                            //Unzip DAI FILE
                            File TempPath = new File(PathTemp);
                            DirectoryUtility dirUtil = new DirectoryUtility();
                            File fl[] = TempPath.listFiles();
                            try {
                                for (int i = 0; i < fl.length; i++) {
                                    dirUtil.deleteDir(fl[i]);
                                }
                                if (!dirUtil.deleteDir(TempPath)) {
                                    JOptionPane.showMessageDialog(this, "Can'n Delete" + TempPath);
                                }
                                if (!dirUtil.createDir(TempPath)) {
                                    JOptionPane.showMessageDialog(this, "Can'n Create" + TempPath);
                                }
                            } catch (IOException ex) {
                                ex.printStackTrace();
                            }
                            String zipFile = GetDataZipFileName(bcode, "DAI", d1);
                            ZipUnzip zipUtil = new ZipUnzip();
                            if (!zipUtil.unzip(zipFile, PathTemp)) {
                                JOptionPane.showMessageDialog(this, "ไฟล์ข้อมูลยอดขาย " + zipFile + "ไม่สมบูรณ์ ไม่สามารถทำการรับเข้า Master File ...");
                            } else {
                                BranOK = true;
                                String CPlu = "-", CTerminal = "-", CCashier = "-", CCupon = "-", CPromotion = "-", CInv = "-", CHour = "-", CRj = "-", CStc = "-", CBg = "-", CBa = "-", CCr = "-", CMem = "-", DZip = "-", Charge = "-", Bi = "-", Kictran = "-";
                                if (ChkFile(bcode, "headerfile", d1).equals("Y")) {
                                    //PUtility.ShowMsg("Linux Version");
                                    String TSystem = "Linux";
                                    String Serial = "POS Version1";
                                    if (ChkFile(bcode, "TP", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) PLU-Code");
                                        processStop = false;
                                        ProcessPlu(bcode, "TP", d1);
                                        if (!processStop) {
                                            CPlu = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TT", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Terminal");
                                        processStop = false;
                                        ProcessTerminal(bcode, "TT", d1, TSystem, Serial);
                                        if (!processStop) {
                                            CTerminal = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TC", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Cashier");
                                        processStop = false;
                                        ProcessCashier(bcode, "TC", d1, TSystem, Serial);
                                        if (!processStop) {
                                            CCashier = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TCU", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Coupon");
                                        processStop = false;
                                        ProcessCoupon(bcode, "TCU", d1);
                                        if (!processStop) {
                                            CCupon = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TPR", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Promotion");
                                        processStop = false;
                                        ProcessPromotion(bcode, "TPR", d1);
                                        if (!processStop) {
                                            CPromotion = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TI", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Invoice");
                                        processStop = false;
                                        Processinv(bcode, "TI", d1, TSystem, Serial);
                                        if (!processStop) {
                                            CInv = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TH", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Hourly");
                                        processStop = false;
                                        Processhour(bcode, "TH", d1);
                                        if (!processStop) {
                                            CHour = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TRJ", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) RJ-File");
                                        processStop = false;
                                        Processrjfile(bcode, "TRJ", d1);
                                        if (!processStop) {
                                            CRj = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TST", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Stock Cake");
                                        processStop = false;
                                        Processstockcake(bcode, "TST", d1, TSystem, Serial);
                                        if (!processStop) {
                                            CStc = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TCR", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Credit Card");
                                        processStop = false;
                                        Processscredit(bcode, "TCR", d1);
                                        if (!processStop) {
                                            CCr = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TCD", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Credit Detail");
                                        processStop = false;
                                        Processscreditdetail(bcode, "TCD", d1);
                                        if (!processStop) {
                                            CCr = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "userchange", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) User Change Password");
                                        processStop = false;
                                        Processsuserchange(bcode, "userchange", d1);
                                        if (!processStop) {
                                        }
                                    }
                                    if (ChkFile(bcode, "s_kictran", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Kichen Transaction");
                                        processStop = false;
                                        Processkictran(bcode, "s_kictran", d1);
                                        if (!processStop) {
                                            Kictran = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "s_charge", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Charge Bill");
                                        processStop = false;
                                        Processcharge(bcode, "s_charge", d1);
                                        if (!processStop) {
                                            Charge = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "s_trancharge", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Charge Bill");
                                        processStop = false;
                                        Processtrancharge(bcode, "s_trancharge", d1);
                                        if (!processStop) {
                                            Charge = "Y";
                                        }

                                    }
                                    if (ChkFile(bcode, "s_billno", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Bill No");
                                        processStop = false;
                                        Processbillno(bcode, "s_billno", d1);
                                        if (!processStop) {
                                        }
                                    }
                                    if (ChkFile(bcode, "s_tran", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Sale Transaction");
                                        processStop = false;
                                        Processtran(bcode, "s_tran", d1);
                                        if (!processStop) {
                                        }
                                    }
                                    if (ChkFile(bcode, "s_transet", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Sale Transaction Set");
                                        processStop = false;
                                        Processtranset(bcode, "s_transet", d1);
                                        if (!processStop) {
                                        }
                                    }
                                    if (ChkFile(bcode, "s_void", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Void Transaction");
                                        processStop = false;
                                        Processvoid(bcode, "s_void", d1);
                                        if (!processStop) {
                                        }
                                    }
                                    if (ChkFile(bcode, "s_vat", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Vat Transaction");
                                        processStop = false;
                                        Processvat(bcode, "s_vat", d1);
                                        if (!processStop) {
                                        }
                                    }
                                    if (ChkFile(bcode, "s_bom", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Vat Transaction");
                                        processStop = false;
                                        ProcessBom(bcode, "s_bom", d1);
                                        if (!processStop) {
                                        }
                                    }
                                    if (ChkFile(bcode, "s_credit", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Credit Transaction");
                                        processStop = false;
                                        Processcredit(bcode, "s_credit", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "s_coupon", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Coupon Transaction");
                                        processStop = false;
                                        Processscoupon(bcode, "s_coupon", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TeCU", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) eCoupon Transaction");
                                        processStop = false;
                                        Processsecoupon(bcode, "TeCU", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "adjstock", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Adj Stock Transaction");
                                        processStop = false;
                                        Processadjstock(bcode, "adjstock", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "hadjstock", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Adj Stock Document");
                                        processStop = false;
                                        Processhadjstock(bcode, "hadjstock", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "tranin", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Tranin Transaction");
                                        processStop = false;
                                        Processtranin(bcode, "tranin", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "htranin", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Tranin Document");
                                        processStop = false;
                                        Processhtranin(bcode, "htranin", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "tranout", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Tranout Transaction");
                                        processStop = false;
                                        Processtranout(bcode, "tranout", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "htranout", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Tranout Document");
                                        processStop = false;
                                        Processhtranout(bcode, "htranout", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "ohprolost", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Prolost Document");
                                        processStop = false;
                                        Processhprolostold(bcode, "ohprolost", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "oprolost", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Prolost Transaction");
                                        processStop = false;
                                        Processprolostold(bcode, "oprolost", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "nhprolost", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Prolost Document");
                                        processStop = false;
                                        Processhprolost(bcode, "nhprolost", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "nprolost", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Prolost Transaction");
                                        processStop = false;
                                        Processprolost(bcode, "nprolost", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }

                                    //---------------------------------------------
                                    if (ChkFile(bcode, "deptin", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Deptin_sap Transaction");
                                        processStop = false;
                                        Processdeptin(bcode, "deptin", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "deptinh", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Deptinh_sap Document");
                                        processStop = false;
                                        Processdeptinh(bcode, "deptinh", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }
                                    //------------------------------------------------------------------------------------------- 
                                    if (ChkFile(bcode, "deptout", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Deptout_sap Transaction");
                                        processStop = false;
                                        Processdeptout(bcode, "deptout", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "deptouth", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) Deptouth_sap Document");
                                        processStop = false;
                                        Processdeptouth(bcode, "deptouth", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }

                                    if (ChkFile(bcode, "s_tar", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) AR-Payment ");
                                        processStop = false;
                                        Processtar(bcode, "s_tar", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "s_accr", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux) AR Transcation");
                                        processStop = false;
                                        Processaccr(bcode, "s_accr", d1);
                                        if (!processStop) {
                                            Bi = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TPNT", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux)Promotion Point Transaction");
                                        processStop = false;
                                        Processpoint(bcode, "TPNT", d1);
                                        if (!processStop) {
                                            //Bi = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "customer", d1).equals("Y")) {
                                        txtFileMsg.setText("(Linux)Customer File Update");
                                        processStop = false;
                                        Processcustomer(bcode, "customer", d1);
                                        if (!processStop) {
                                            //Bi = "Y";
                                        }
                                    }
                                } else {
                                    //PUtility.ShowMsg("Windows Version");
                                    String TSystem = "Windows";
                                    String Serial = "POS Version1";
                                    if (ChkFile(bcode, "TP", d1).equals("Y")) {
                                        txtFileMsg.setText("(Windows) PLU-Code");
                                        processStop = false;
                                        ProcessPlu(bcode, "TP", d1);
                                        if (!processStop) {
                                            CPlu = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TT", d1).equals("Y")) {
                                        txtFileMsg.setText("(Windows) Terminal");
                                        processStop = false;
                                        ProcessTerminal(bcode, "TT", d1, TSystem, Serial);
                                        if (!processStop) {
                                            CTerminal = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TC", d1).equals("Y")) {
                                        txtFileMsg.setText("(Windows) Cashier");
                                        processStop = false;
                                        ProcessCashier(bcode, "TC", d1, TSystem, Serial);
                                        if (!processStop) {
                                            CCashier = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TCU", d1).equals("Y")) {
                                        txtFileMsg.setText("(Windows) Coupon");
                                        processStop = false;
                                        ProcessCoupon(bcode, "TCU", d1);
                                        if (!processStop) {
                                            CCupon = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TPR", d1).equals("Y")) {
                                        txtFileMsg.setText("(Windows) Promotion");
                                        processStop = false;
                                        ProcessPromotion(bcode, "TPR", d1);
                                    }
                                    if (ChkFile(bcode, "TI", d1).equals("Y")) {
                                        txtFileMsg.setText("(Windows) Invoice");
                                        processStop = false;
                                        Processinv(bcode, "TI", d1, TSystem, Serial);
                                        if (!processStop) {
                                            CInv = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TH", d1).equals("Y")) {
                                        txtFileMsg.setText("(Windows) Hourly");
                                        processStop = false;
                                        Processhour(bcode, "TH", d1);
                                        if (!processStop) {
                                            CHour = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TRJ", d1).equals("Y")) {
                                        txtFileMsg.setText("(Windows) RJ-File");
                                        processStop = false;
                                        Processrjfile(bcode, "TRJ", d1);
                                        if (!processStop) {
                                            CRj = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TST", d1).equals("Y")) {
                                        txtFileMsg.setText("(Windows) Stock Cake");
                                        processStop = false;
                                        Processstockcake(bcode, "TST", d1, TSystem, Serial);
                                        if (!processStop) {
                                            CStc = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TCR", d1).equals("Y")) {
                                        txtFileMsg.setText("(Windows) Credit Card");
                                        processStop = false;
                                        Processscredit(bcode, "TCR", d1);
                                        if (!processStop) {
                                            CCr = "Y";
                                        }
                                    }
                                    if (ChkFile(bcode, "TCD", d1).equals("Y")) {
                                        txtFileMsg.setText("(Windows) Credit Detail");
                                        processStop = false;
                                        Processscreditdetail(bcode, "TCD", d1);
                                        if (!processStop) {
                                            CCr = "Y";
                                        }
                                    }
                                }
                                //Copy File Zip To Backup Path P201201
                                //String zipFile = GetDataZipFileName(bcode, "DAI", d1);
                                String BackupzipFile = GetDataBackupZipFileName(bcode, "DAI", d1);
                                if (copyFile(zipFile, BackupzipFile)) {
                                    File dFile = new File(zipFile);
                                    dFile.delete();
                                }
                                //delete cuerent file
                                //insertinto tempfile
                                insertTempCheckPost(bcode, d1, CPlu, CTerminal, CCashier, CCupon, CPromotion, CInv, CHour,
                                        CRj, CStc, CBg, CBa, CCr, CMem, DZip, Charge, Bi, Kictran);
                                LoadDataToGrid();
                                //insert/update chkpost file
                                if (SeekCheckPost(bcode, d1)) {
                                    UpdateCheckPost(bcode, d1, CPlu, CTerminal, CCashier, CCupon, CPromotion, CInv, CHour,
                                            CRj, CStc, CBg, CBa, CCr, CMem, DZip, Charge, Bi, Kictran);
                                } else {
                                    InsertCheckPost(bcode, d1, CPlu, CTerminal, CCashier, CCupon, CPromotion, CInv, CHour,
                                            CRj, CStc, CBg, CBa, CCr, CMem, DZip, Charge, Bi, Kictran);
                                }
                            }

                        }
                        d1 = DateUtil.addDate(d1, 1);
                    }
                    jProgressBar1.setValue(per += 1);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e);
            }
            PUtility.ShowMsg("จบการทำงาน...");
        }

        public void ProcessPlu(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dplulinux fm = new dplulinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void ProcessTerminal(String fBran, String fType, Date fDate, String TSystem, String Serial) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dterminallinux fm = new dterminallinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            if (TSystem.equals("Linux")) {
                                fm.insertnew_Linux(StrS);
                            } else {
                                fm.insertnew_Windows(StrS);
                            }
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void ProcessCashier(String fBran, String fType, Date fDate, String TSystem, String Serial) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dcashierlinux fm = new dcashierlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            if (TSystem.equals("Linux")) {
                                fm.insertnew_Linux(StrS);
                            } else {
                                fm.insertnew_Windows(StrS);
                            }
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void ProcessCoupon(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dcouponlinux fm = new dcouponlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void ProcessPromotion(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dpromotionlinux fm = new dpromotionlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processinv(String fBran, String fType, Date fDate, String TSystem, String Serial) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dinvoicelinux fm = new dinvoicelinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            if (TSystem.equals("Linux")) {
                                fm.insertnew_Linux(StrS);
                            } else {
                                fm.insertnew_Windows(StrS);
                            }
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processhour(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dhourlylinux fm = new dhourlylinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processrjfile(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            drjfilelinux fm = new drjfilelinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processstockcake(String fBran, String fType, Date fDate, String TSystem, String Serial) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dstockcakelinux fm = new dstockcakelinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            if (TSystem.equals("Linux")) {
                                fm.insertnew_Linux(StrS, fBran, fDate);
                            } else {
                                fm.insertnew_Windows(StrS, fBran, fDate);
                            }
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processscredit(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dcreditlinux fm = new dcreditlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processscreditdetail(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dcreditdetaillinux fm = new dcreditdetaillinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processsuserchange(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            duserchangelinux fm = new duserchangelinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processkictran(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dkictranlinux fm = new dkictranlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processcharge(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                //JOptionPane.showMessageDialog(null, "Convert Character Set...");
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dchargelinux fm = new dchargelinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processtrancharge(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                //JOptionPane.showMessageDialog(null, "Convert Character Set...");
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dtranchargelinux fm = new dtranchargelinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processbillno(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dbillnolinux fm = new dbillnolinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            if (StrS.length == 93) {
                                fm.insertnew(StrS, fBran, fDate);
                            } else if (StrS.length == 98) {
                                fm.insertnew2(StrS, fBran, fDate);
                            }
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processtran(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dtranlinux fm = new dtranlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            if (StrS.length == 70) {
                                fm.insertnew(StrS, fBran, fDate);
                            } else if (StrS.length == 74) {
                                fm.insertnew2(StrS, fBran, fDate);
                            }
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processtranset(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dtransetlinux fm = new dtransetlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);

                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processvoid(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dvoidlinux fm = new dvoidlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processvat(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dvatlinux fm = new dvatlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void ProcessBom(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dBomlinux fm = new dBomlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processcredit(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dscreditlinux fm = new dscreditlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processscoupon(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dscouponlinux fm = new dscouponlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processpoint(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dspointlinux fm = new dspointlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processcustomer(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            ProductCusomer cu = new ProductCusomer();
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            cu.SeekCustomer(StrS);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processsecoupon(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dsecouponlinux fm = new dsecouponlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processadjstock(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dadjstocklinux fm = new dadjstocklinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processhadjstock(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dhadjstocklinux fm = new dhadjstocklinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processtranin(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dtraninlinux fm = new dtraninlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processhtranin(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dhtraninlinux fm = new dhtraninlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processtranout(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dtranoutlinux fm = new dtranoutlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processhtranout(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dhtranoutlinux fm = new dhtranoutlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processprolost(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dprolosttlinux fm = new dprolosttlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processprolostold(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dprolosttlinux fm = new dprolosttlinux();
            //fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            if (fm.seekprolost(StrS[0], StrS[2], StrS[3])) {
                                fm.insertnew(StrS, fBran, fDate);
                            }
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processdeptout(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            ddeptoutlinux fm = new ddeptoutlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processdeptouth(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            ddeptouthlinux fm = new ddeptouthlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processdeptin(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            ddeptinlinux fm = new ddeptinlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processdeptinh(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            ddeptinhlinux fm = new ddeptinhlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processhprolostold(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dhprolostlinux fm = new dhprolostlinux();
            //fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            if (!fm.seekprolost(StrS[0], StrS[1])) {
                                fm.insertnew(StrS, fBran, fDate);
                            }
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processhprolost(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dhprolostlinux fm = new dhprolostlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processtar(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            dtarlinux fm = new dtarlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }

        public void Processaccr(String fBran, String fType, Date fDate) {
            String centFileName;
            if (OS.equalsIgnoreCase("linux")) {
                String inFile = GetDataFileName(fBran, fType, fDate);
                String inCharset = "TIS-620";
                String outFile = GetDataFileConvert(fBran, fType, fDate);
                String outCharset = "UTF-8";
                ConverCharSet(inFile, inCharset, outFile, outCharset);
                centFileName = GetDataFileConvert(fBran, fType, fDate);
            } else {
                centFileName = GetDataFileName(fBran, fType, fDate);
            }
            int totalRec = ChkTotalRec(centFileName);
            int curRec = 0;
            daccrlinux fm = new daccrlinux();
            fm.clearold(fBran, fDate);
            try {
                FileReader file = new FileReader(centFileName);
                BufferedReader buff = new BufferedReader(file);
                boolean eof = false;
                try {
                    jProgressBar2.setValue(0);
                    while (!eof) {
                        String line = "";
                        line = buff.readLine();
                        if (line == null) {
                            eof = true;
                        } else {
                            curRec++;
                            if (totalRec != 0) {
                                jProgressBar2.setValue((int) ((curRec * 100) / totalRec));
                            } else {
                                jProgressBar2.setValue(0);
                            }
                            String StrS[] = line.split("\u0009", line.length());
                            fm.insertnew(StrS, fBran, fDate);
                        }
                    }
                    buff.close();
                } catch (IOException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                    processStop = true;
                }
            } catch (FileNotFoundException ex) {
                PUtility.ShowMsg(ex.getMessage().toString());
                processStop = true;
            }
        }
    }

    class dplulinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from dplu where s_bran='" + fBran + "' and s_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }

        }

        public void insertnew(String StrS[]) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into dplu "
                        + "(s_bran,s_date,s_dept,s_supp,s_pcode,"
                        + "e_qty,e_amt,e_disc,e_net,"
                        + "t_qty,t_amt,t_disc,t_net,"
                        + "d_qty,d_amt,d_disc,d_net,"
                        + "p_qty,p_amt,p_disc,p_net,"
                        + "w_qty,w_amt,w_disc,w_net,"
                        + "s_qty,s_amt,s_disc,s_net,"
                        + "s_price,s_user,s_time) "
                        + "values (?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, "");
                prm.setString(4, "");
                prm.setString(5, cvth.Unicode2ASCII(StrS[2]));

                TempAmt = Double.parseDouble(StrS[3]);
                prm.setDouble(6, TempAmt);
                TempAmt = Double.parseDouble(StrS[4]);
                prm.setDouble(7, TempAmt);
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(8, TempAmt);
                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(9, TempAmt);

                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(10, TempAmt);
                TempAmt = Double.parseDouble(StrS[8]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[9]);
                prm.setDouble(12, TempAmt);
                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(13, TempAmt);

                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(14, TempAmt);
                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(15, TempAmt);
                TempAmt = Double.parseDouble(StrS[13]);
                prm.setDouble(16, TempAmt);
                TempAmt = Double.parseDouble(StrS[14]);
                prm.setDouble(17, TempAmt);

                TempAmt = Double.parseDouble(StrS[15]);
                prm.setDouble(18, TempAmt);
                TempAmt = Double.parseDouble(StrS[16]);
                prm.setDouble(19, TempAmt);
                TempAmt = Double.parseDouble(StrS[17]);
                prm.setDouble(20, TempAmt);
                TempAmt = Double.parseDouble(StrS[18]);
                prm.setDouble(21, TempAmt);

                TempAmt = Double.parseDouble(StrS[19]);
                prm.setDouble(22, TempAmt);
                TempAmt = Double.parseDouble(StrS[20]);
                prm.setDouble(23, TempAmt);
                TempAmt = Double.parseDouble(StrS[21]);
                prm.setDouble(24, TempAmt);
                TempAmt = Double.parseDouble(StrS[22]);
                prm.setDouble(25, TempAmt);

                TempAmt = Double.parseDouble(StrS[23]);
                prm.setDouble(26, TempAmt);
                TempAmt = Double.parseDouble(StrS[24]);
                prm.setDouble(27, TempAmt);
                TempAmt = Double.parseDouble(StrS[25]);
                prm.setDouble(28, TempAmt);
                TempAmt = Double.parseDouble(StrS[26]);
                prm.setDouble(29, TempAmt);

                TempAmt = Double.parseDouble(StrS[27]);
                prm.setDouble(30, TempAmt);

                prm.setString(31, cvth.Unicode2ASCII(StrS[28]));
                prm.setString(32, cvth.Unicode2ASCII(StrS[29]));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dterminallinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from dterminal where s_bran='" + fBran + "' and t_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }

        }

        public void insertnew_Linux(String StrS[]) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into dterminal "
                        + "(s_bran,t_date,t_macno,deptsum,dsales,salevat,salenon,svat,pcust,cust,"
                        + "ncash,cash,ncupon,cupon,nmisc,misc,npaidout,paidout,npaidin,paidin,"
                        + "nsubdiscb,subdiscb,nvoid,void,nrefund,refund,ngenrefund,genrefund,"
                        + "nitemdisc,itemdisc,nsubdiscy,subdiscy,nsubdisc,subdisc,nsubdiscs,subdiscs,"
                        + "ncharge,charge,nservice,service,nosales,t_user,tmdate,ntrain,disctrain,"
                        + "ndisccu,disccu,discpro,discdayend,"
                        + "neatin,eatin,eatinnet,ceatin,"
                        + "ntakeaway,takeaway,takeawaynet,ctakeaway,"
                        + "ndelivery,delivery,deliverynet,cdelivery,"
                        + "npinto,pinto,pintonet,cpinto,"
                        + "nwhole,whole,wholenet,cwhole,"
                        + "nar,ar,nevoucher,evoucher) "
                        + "values (?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));

                TempAmt = Double.parseDouble(StrS[3]);
                prm.setDouble(4, TempAmt);
                TempAmt = Double.parseDouble(StrS[4]);
                prm.setDouble(5, TempAmt);
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(6, TempAmt);
                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(7, TempAmt);
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(8, TempAmt);

                TempAmt = Double.parseDouble(StrS[8]);  //pcust
                prm.setDouble(9, TempAmt);
                TempAmt = Double.parseDouble(StrS[9]);
                prm.setDouble(10, TempAmt);

                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(12, TempAmt);

                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);
                TempAmt = Double.parseDouble(StrS[13]);
                prm.setDouble(14, TempAmt);

                TempAmt = Double.parseDouble(StrS[14]);
                prm.setDouble(15, TempAmt);
                TempAmt = Double.parseDouble(StrS[15]);
                prm.setDouble(16, TempAmt);

                TempAmt = Double.parseDouble(StrS[16]);
                prm.setDouble(17, TempAmt);
                TempAmt = Double.parseDouble(StrS[17]);
                prm.setDouble(18, TempAmt);

                TempAmt = Double.parseDouble(StrS[18]);
                prm.setDouble(19, TempAmt);
                TempAmt = Double.parseDouble(StrS[19]);
                prm.setDouble(20, TempAmt);

                TempAmt = Double.parseDouble(StrS[20]);   //nsundiscb
                prm.setDouble(21, TempAmt);
                TempAmt = Double.parseDouble(StrS[21]);
                prm.setDouble(22, TempAmt);

                TempAmt = Double.parseDouble(StrS[22]);  //nvoid
                prm.setDouble(23, TempAmt);
                TempAmt = Double.parseDouble(StrS[23]);
                prm.setDouble(24, TempAmt);

                TempAmt = Double.parseDouble(StrS[24]);  //nrefund
                prm.setDouble(25, TempAmt);
                TempAmt = Double.parseDouble(StrS[25]);
                prm.setDouble(26, TempAmt);

                TempAmt = Double.parseDouble(StrS[26]);  //ngenrefund
                prm.setDouble(27, TempAmt);
                TempAmt = Double.parseDouble(StrS[27]);
                prm.setDouble(28, TempAmt);

                TempAmt = Double.parseDouble(StrS[28]);   //nitemdisc
                prm.setDouble(29, TempAmt);
                TempAmt = Double.parseDouble(StrS[29]);
                prm.setDouble(30, TempAmt);

                TempAmt = Double.parseDouble(StrS[30]);   //nsubdiscy
                prm.setDouble(31, TempAmt);
                TempAmt = Double.parseDouble(StrS[31]);
                prm.setDouble(32, TempAmt);

                TempAmt = Double.parseDouble(StrS[32]);    //nsubdisc
                prm.setDouble(33, TempAmt);
                TempAmt = Double.parseDouble(StrS[33]);
                prm.setDouble(34, TempAmt);

                TempAmt = Double.parseDouble(StrS[34]);   //nsubdiscs
                prm.setDouble(35, TempAmt);
                TempAmt = Double.parseDouble(StrS[35]);
                prm.setDouble(36, TempAmt);

                TempAmt = Double.parseDouble(StrS[36]);   //ncharge
                prm.setDouble(37, TempAmt);
                TempAmt = Double.parseDouble(StrS[37]);
                prm.setDouble(38, TempAmt);

                TempAmt = Double.parseDouble(StrS[38]);   //nservice
                prm.setDouble(39, TempAmt);
                TempAmt = Double.parseDouble(StrS[39]);
                prm.setDouble(40, TempAmt);

                TempAmt = Double.parseDouble(StrS[40]);   //nosale
                prm.setDouble(41, TempAmt);
                prm.setString(42, cvth.Unicode2ASCII(StrS[41]));              //t_user 
                prm.setString(43, cvth.Unicode2ASCII(StrS[42]));              //tmdate

                TempAmt = Double.parseDouble(StrS[43]);   //ntrain
                prm.setDouble(44, TempAmt);
                TempAmt = Double.parseDouble(StrS[44]);
                prm.setDouble(45, TempAmt);

                TempAmt = Double.parseDouble(StrS[45]);   //ndisccu
                prm.setDouble(46, TempAmt);
                TempAmt = Double.parseDouble(StrS[46]);
                prm.setDouble(47, TempAmt);

                TempAmt = Double.parseDouble(StrS[47]);   //discpro
                prm.setDouble(48, TempAmt);
                TempAmt = Double.parseDouble(StrS[48]);   //discendday
                prm.setDouble(49, TempAmt);

                TempAmt = Double.parseDouble(StrS[49]);   //neatin
                prm.setDouble(50, TempAmt);
                TempAmt = Double.parseDouble(StrS[50]);
                prm.setDouble(51, TempAmt);
                TempAmt = Double.parseDouble(StrS[51]);
                prm.setDouble(52, TempAmt);
                TempAmt = Double.parseDouble(StrS[52]);
                prm.setDouble(53, TempAmt);

                TempAmt = Double.parseDouble(StrS[53]);   //ntakeaway
                prm.setDouble(54, TempAmt);
                TempAmt = Double.parseDouble(StrS[54]);
                prm.setDouble(55, TempAmt);
                TempAmt = Double.parseDouble(StrS[55]);
                prm.setDouble(56, TempAmt);
                TempAmt = Double.parseDouble(StrS[56]);
                prm.setDouble(57, TempAmt);

                TempAmt = Double.parseDouble(StrS[57]);   //ndelivery
                prm.setDouble(58, TempAmt);
                TempAmt = Double.parseDouble(StrS[58]);
                prm.setDouble(59, TempAmt);
                TempAmt = Double.parseDouble(StrS[59]);
                prm.setDouble(60, TempAmt);
                TempAmt = Double.parseDouble(StrS[60]);
                prm.setDouble(61, TempAmt);

                TempAmt = Double.parseDouble(StrS[61]);   //npinto
                prm.setDouble(62, TempAmt);
                TempAmt = Double.parseDouble(StrS[61]);
                prm.setDouble(63, TempAmt);
                TempAmt = Double.parseDouble(StrS[63]);
                prm.setDouble(64, TempAmt);
                TempAmt = Double.parseDouble(StrS[64]);
                prm.setDouble(65, TempAmt);

                TempAmt = Double.parseDouble(StrS[65]);   //nwhole
                prm.setDouble(66, TempAmt);
                TempAmt = Double.parseDouble(StrS[66]);
                prm.setDouble(67, TempAmt);
                TempAmt = Double.parseDouble(StrS[67]);
                prm.setDouble(68, TempAmt);
                TempAmt = Double.parseDouble(StrS[68]);
                prm.setDouble(69, TempAmt);

                TempAmt = Double.parseDouble(StrS[69]);   //nar
                prm.setDouble(70, TempAmt);
                TempAmt = Double.parseDouble(StrS[70]);
                prm.setDouble(71, TempAmt);
                TempAmt = Double.parseDouble(StrS[71]);
                prm.setDouble(72, TempAmt);
                TempAmt = Double.parseDouble(StrS[72]);
                prm.setDouble(73, TempAmt);
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }

        public void insertnew_Windows(String StrS[]) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into dterminal "
                        + "(s_bran,t_date,t_macno,deptsum,dsales,salevat,salenon,svat,pcust,cust,"
                        + "ncash,cash,ncupon,cupon,nmisc,misc,npaidout,paidout,npaidin,paidin,"
                        + "nsubdiscb,subdiscb,nvoid,void,nrefund,refund,ngenrefund,genrefund,"
                        + "nitemdisc,itemdisc,nsubdiscy,subdiscy,nsubdisc,subdisc,nsubdiscs,subdiscs,"
                        + "ncharge,charge,nservice,service,nosales,t_user,tmdate,ntrain,disctrain,"
                        + "ndisccu,disccu,discpro,discdayend,"
                        + "neatin,eatin,eatinnet,ceatin,"
                        + "ntakeaway,takeaway,takeawaynet,ctakeaway,"
                        + "ndelivery,delivery,deliverynet,cdelivery,"
                        + "npinto,pinto,pintonet,cpinto,"
                        + "nwhole,whole,wholenet,cwhole,"
                        + "nar,ar,nevoucher,evoucher) "
                        + "values (?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));

                TempAmt = Double.parseDouble(StrS[3]);
                prm.setDouble(4, TempAmt);
                TempAmt = Double.parseDouble(StrS[4]);
                prm.setDouble(5, TempAmt);
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(6, TempAmt);
                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(7, TempAmt);
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(8, TempAmt);

                TempAmt = Double.parseDouble(StrS[8]);  //pcust
                prm.setDouble(9, TempAmt);
                TempAmt = Double.parseDouble(StrS[9]);
                prm.setDouble(10, TempAmt);

                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(12, TempAmt);

                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);
                TempAmt = Double.parseDouble(StrS[13]);
                prm.setDouble(14, TempAmt);

                TempAmt = Double.parseDouble(StrS[14]);
                prm.setDouble(15, TempAmt);
                TempAmt = Double.parseDouble(StrS[15]);
                prm.setDouble(16, TempAmt);

                TempAmt = Double.parseDouble(StrS[16]);
                prm.setDouble(17, TempAmt);
                TempAmt = Double.parseDouble(StrS[17]);
                prm.setDouble(18, TempAmt);

                TempAmt = Double.parseDouble(StrS[18]);
                prm.setDouble(19, TempAmt);
                TempAmt = Double.parseDouble(StrS[19]);
                prm.setDouble(20, TempAmt);

                TempAmt = Double.parseDouble(StrS[20]);   //nsundiscb
                prm.setDouble(21, TempAmt);
                TempAmt = Double.parseDouble(StrS[21]);
                prm.setDouble(22, TempAmt);

                TempAmt = Double.parseDouble(StrS[22]);  //nvoid
                prm.setDouble(23, TempAmt);
                TempAmt = Double.parseDouble(StrS[23]);
                prm.setDouble(24, TempAmt);

                TempAmt = Double.parseDouble(StrS[24]);  //nrefund
                prm.setDouble(25, TempAmt);
                TempAmt = Double.parseDouble(StrS[25]);
                prm.setDouble(26, TempAmt);

                TempAmt = Double.parseDouble(StrS[26]);  //ngenrefund
                prm.setDouble(27, TempAmt);
                TempAmt = Double.parseDouble(StrS[27]);
                prm.setDouble(28, TempAmt);

                TempAmt = Double.parseDouble(StrS[28]);   //nitemdisc
                prm.setDouble(29, TempAmt);
                TempAmt = Double.parseDouble(StrS[29]);
                prm.setDouble(30, TempAmt);

                TempAmt = Double.parseDouble(StrS[30]);   //nsubdiscy
                prm.setDouble(31, TempAmt);
                TempAmt = Double.parseDouble(StrS[31]);
                prm.setDouble(32, TempAmt);

                TempAmt = Double.parseDouble(StrS[32]);    //nsubdisc
                prm.setDouble(33, TempAmt);
                TempAmt = Double.parseDouble(StrS[33]);
                prm.setDouble(34, TempAmt);

                TempAmt = Double.parseDouble(StrS[34]);   //nsubdiscs
                prm.setDouble(35, TempAmt);
                TempAmt = Double.parseDouble(StrS[35]);
                prm.setDouble(36, TempAmt);

                TempAmt = Double.parseDouble(StrS[36]);   //ncharge
                prm.setDouble(37, TempAmt);
                TempAmt = Double.parseDouble(StrS[37]);
                prm.setDouble(38, TempAmt);

                TempAmt = Double.parseDouble(StrS[38]);   //nservice
                prm.setDouble(39, TempAmt);
                TempAmt = Double.parseDouble(StrS[39]);
                prm.setDouble(40, TempAmt);

                TempAmt = Double.parseDouble(StrS[40]);   //nosale
                prm.setDouble(41, TempAmt);
                prm.setString(42, cvth.Unicode2ASCII(StrS[41]));              //t_user 
                prm.setString(43, cvth.Unicode2ASCII(StrS[42]));              //tmdate

                TempAmt = Double.parseDouble(StrS[43]);   //ntrain
                prm.setDouble(44, TempAmt);
                TempAmt = Double.parseDouble(StrS[44]);
                prm.setDouble(45, TempAmt);

                TempAmt = Double.parseDouble(StrS[45]);   //ndisccu
                prm.setDouble(46, TempAmt);
                TempAmt = Double.parseDouble(StrS[46]);
                prm.setDouble(47, TempAmt);

                TempAmt = Double.parseDouble(StrS[47]);   //discpro
                prm.setDouble(48, TempAmt);
                TempAmt = Double.parseDouble(StrS[48]);   //discendday
                prm.setDouble(49, TempAmt);

                TempAmt = Double.parseDouble(StrS[49]);   //neatin
                prm.setDouble(50, TempAmt);
                TempAmt = Double.parseDouble(StrS[50]);
                prm.setDouble(51, TempAmt);
                TempAmt = Double.parseDouble(StrS[51]);
                prm.setDouble(52, TempAmt);
                TempAmt = Double.parseDouble(StrS[52]);
                prm.setDouble(53, TempAmt);

                TempAmt = Double.parseDouble(StrS[53]);   //ntakeaway
                prm.setDouble(54, TempAmt);
                TempAmt = Double.parseDouble(StrS[54]);
                prm.setDouble(55, TempAmt);
                TempAmt = Double.parseDouble(StrS[55]);
                prm.setDouble(56, TempAmt);
                TempAmt = Double.parseDouble(StrS[56]);
                prm.setDouble(57, TempAmt);

                TempAmt = Double.parseDouble(StrS[57]);   //ndelivery
                prm.setDouble(58, TempAmt);
                TempAmt = Double.parseDouble(StrS[58]);
                prm.setDouble(59, TempAmt);
                TempAmt = Double.parseDouble(StrS[59]);
                prm.setDouble(60, TempAmt);
                TempAmt = Double.parseDouble(StrS[60]);
                prm.setDouble(61, TempAmt);

                TempAmt = Double.parseDouble(StrS[61]);   //npinto
                prm.setDouble(62, TempAmt);
                TempAmt = Double.parseDouble(StrS[61]);
                prm.setDouble(63, TempAmt);
                TempAmt = Double.parseDouble(StrS[63]);
                prm.setDouble(64, TempAmt);
                TempAmt = Double.parseDouble(StrS[64]);
                prm.setDouble(65, TempAmt);

                TempAmt = Double.parseDouble(StrS[65]);   //nwhole
                prm.setDouble(66, TempAmt);
                TempAmt = Double.parseDouble(StrS[66]);
                prm.setDouble(67, TempAmt);
                TempAmt = Double.parseDouble(StrS[67]);
                prm.setDouble(68, TempAmt);
                TempAmt = Double.parseDouble(StrS[68]);
                prm.setDouble(69, TempAmt);

                TempAmt = Double.parseDouble(StrS[69]);   //nar
                prm.setDouble(70, TempAmt);
                TempAmt = Double.parseDouble(StrS[70]);
                prm.setDouble(71, TempAmt);
                prm.setDouble(72, 0);
                prm.setDouble(73, 0);
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dcashierlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from dcashier where s_bran='" + fBran + "' and t_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }

        }

        public void insertnew_Linux(String StrS[]) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into dcashier "
                        + "(s_bran,t_date,t_cashno,deptsum,dsales,salevat,salenon,svat,pcust,cust,"
                        + "ncash,cash,ncupon,cupon,nmisc,misc,npaidout,paidout,npaidin,paidin,"
                        + "nsubdiscb,subdiscb,nvoid,void,nrefund,refund,ngenrefund,genrefund,"
                        + "nitemdisc,itemdisc,nsubdiscy,subdiscy,nsubdisc,subdisc,nsubdiscs,subdiscs,"
                        + "ncharge,charge,nservice,service,nosales,t_user,tmdate,ntrain,disctrain,"
                        + "ndisccu,disccu,discpro,discdayend,"
                        + "neatin,eatin,eatinnet,ceatin,"
                        + "ntakeaway,takeaway,takeawaynet,ctakeaway,"
                        + "ndelivery,delivery,deliverynet,cdelivery,"
                        + "npinto,pinto,pintonet,cpinto,"
                        + "nwhole,whole,wholenet,cwhole,"
                        + "nar,ar,nevoucher,evoucher) "
                        + "values (?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));

                TempAmt = Double.parseDouble(StrS[3]);
                prm.setDouble(4, TempAmt);
                TempAmt = Double.parseDouble(StrS[4]);
                prm.setDouble(5, TempAmt);
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(6, TempAmt);
                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(7, TempAmt);
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(8, TempAmt);

                TempAmt = Double.parseDouble(StrS[8]);  //pcust
                prm.setDouble(9, TempAmt);
                TempAmt = Double.parseDouble(StrS[9]);
                prm.setDouble(10, TempAmt);

                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(12, TempAmt);

                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);
                TempAmt = Double.parseDouble(StrS[13]);
                prm.setDouble(14, TempAmt);

                TempAmt = Double.parseDouble(StrS[14]);
                prm.setDouble(15, TempAmt);
                TempAmt = Double.parseDouble(StrS[15]);
                prm.setDouble(16, TempAmt);

                TempAmt = Double.parseDouble(StrS[16]);
                prm.setDouble(17, TempAmt);
                TempAmt = Double.parseDouble(StrS[17]);
                prm.setDouble(18, TempAmt);

                TempAmt = Double.parseDouble(StrS[18]);
                prm.setDouble(19, TempAmt);
                TempAmt = Double.parseDouble(StrS[19]);
                prm.setDouble(20, TempAmt);

                TempAmt = Double.parseDouble(StrS[20]);   //nsundiscb
                prm.setDouble(21, TempAmt);
                TempAmt = Double.parseDouble(StrS[21]);
                prm.setDouble(22, TempAmt);

                TempAmt = Double.parseDouble(StrS[22]);  //nvoid
                prm.setDouble(23, TempAmt);
                TempAmt = Double.parseDouble(StrS[23]);
                prm.setDouble(24, TempAmt);

                TempAmt = Double.parseDouble(StrS[24]);  //nrefund
                prm.setDouble(25, TempAmt);
                TempAmt = Double.parseDouble(StrS[25]);
                prm.setDouble(26, TempAmt);

                TempAmt = Double.parseDouble(StrS[26]);  //ngenrefund
                prm.setDouble(27, TempAmt);
                TempAmt = Double.parseDouble(StrS[27]);
                prm.setDouble(28, TempAmt);

                TempAmt = Double.parseDouble(StrS[28]);   //nitemdisc
                prm.setDouble(29, TempAmt);
                TempAmt = Double.parseDouble(StrS[29]);
                prm.setDouble(30, TempAmt);

                TempAmt = Double.parseDouble(StrS[30]);   //nsubdiscy
                prm.setDouble(31, TempAmt);
                TempAmt = Double.parseDouble(StrS[31]);
                prm.setDouble(32, TempAmt);

                TempAmt = Double.parseDouble(StrS[32]);    //nsubdisc
                prm.setDouble(33, TempAmt);
                TempAmt = Double.parseDouble(StrS[33]);
                prm.setDouble(34, TempAmt);

                TempAmt = Double.parseDouble(StrS[34]);   //nsubdiscs
                prm.setDouble(35, TempAmt);
                TempAmt = Double.parseDouble(StrS[35]);
                prm.setDouble(36, TempAmt);

                TempAmt = Double.parseDouble(StrS[36]);   //ncharge
                prm.setDouble(37, TempAmt);
                TempAmt = Double.parseDouble(StrS[37]);
                prm.setDouble(38, TempAmt);

                TempAmt = Double.parseDouble(StrS[38]);   //nservice
                prm.setDouble(39, TempAmt);
                TempAmt = Double.parseDouble(StrS[39]);
                prm.setDouble(40, TempAmt);

                TempAmt = Double.parseDouble(StrS[40]);   //nosale
                prm.setDouble(41, TempAmt);
                prm.setString(42, cvth.Unicode2ASCII(StrS[41]));              //t_user 
                prm.setString(43, cvth.Unicode2ASCII(StrS[42]));              //tmdate

                TempAmt = Double.parseDouble(StrS[43]);   //ntrain
                prm.setDouble(44, TempAmt);
                TempAmt = Double.parseDouble(StrS[44]);
                prm.setDouble(45, TempAmt);

                TempAmt = Double.parseDouble(StrS[45]);   //ndisccu
                prm.setDouble(46, TempAmt);
                TempAmt = Double.parseDouble(StrS[46]);
                prm.setDouble(47, TempAmt);

                TempAmt = Double.parseDouble(StrS[47]);   //discpro
                prm.setDouble(48, TempAmt);
                TempAmt = Double.parseDouble(StrS[48]);   //discendday
                prm.setDouble(49, TempAmt);

                TempAmt = Double.parseDouble(StrS[49]);   //neatin
                prm.setDouble(50, TempAmt);
                TempAmt = Double.parseDouble(StrS[50]);
                prm.setDouble(51, TempAmt);
                TempAmt = Double.parseDouble(StrS[51]);
                prm.setDouble(52, TempAmt);
                TempAmt = Double.parseDouble(StrS[52]);
                prm.setDouble(53, TempAmt);

                TempAmt = Double.parseDouble(StrS[53]);   //ntakeaway
                prm.setDouble(54, TempAmt);
                TempAmt = Double.parseDouble(StrS[54]);
                prm.setDouble(55, TempAmt);
                TempAmt = Double.parseDouble(StrS[55]);
                prm.setDouble(56, TempAmt);
                TempAmt = Double.parseDouble(StrS[56]);
                prm.setDouble(57, TempAmt);

                TempAmt = Double.parseDouble(StrS[57]);   //ndelivery
                prm.setDouble(58, TempAmt);
                TempAmt = Double.parseDouble(StrS[58]);
                prm.setDouble(59, TempAmt);
                TempAmt = Double.parseDouble(StrS[59]);
                prm.setDouble(60, TempAmt);
                TempAmt = Double.parseDouble(StrS[60]);
                prm.setDouble(61, TempAmt);

                TempAmt = Double.parseDouble(StrS[61]);   //npinto
                prm.setDouble(62, TempAmt);
                TempAmt = Double.parseDouble(StrS[61]);
                prm.setDouble(63, TempAmt);
                TempAmt = Double.parseDouble(StrS[63]);
                prm.setDouble(64, TempAmt);
                TempAmt = Double.parseDouble(StrS[64]);
                prm.setDouble(65, TempAmt);

                TempAmt = Double.parseDouble(StrS[65]);   //nwhole
                prm.setDouble(66, TempAmt);
                TempAmt = Double.parseDouble(StrS[66]);
                prm.setDouble(67, TempAmt);
                TempAmt = Double.parseDouble(StrS[67]);
                prm.setDouble(68, TempAmt);
                TempAmt = Double.parseDouble(StrS[68]);
                prm.setDouble(69, TempAmt);

                TempAmt = Double.parseDouble(StrS[69]);   //nar
                prm.setDouble(70, TempAmt);
                TempAmt = Double.parseDouble(StrS[70]);
                prm.setDouble(71, TempAmt);
                TempAmt = Double.parseDouble(StrS[71]);
                prm.setDouble(72, TempAmt);
                TempAmt = Double.parseDouble(StrS[72]);
                prm.setDouble(73, TempAmt);
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }

        public void insertnew_Windows(String StrS[]) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into dcashier "
                        + "(s_bran,t_date,t_cashno,deptsum,dsales,salevat,salenon,svat,pcust,cust,"
                        + "ncash,cash,ncupon,cupon,nmisc,misc,npaidout,paidout,npaidin,paidin,"
                        + "nsubdiscb,subdiscb,nvoid,void,nrefund,refund,ngenrefund,genrefund,"
                        + "nitemdisc,itemdisc,nsubdiscy,subdiscy,nsubdisc,subdisc,nsubdiscs,subdiscs,"
                        + "ncharge,charge,nservice,service,nosales,t_user,tmdate,ntrain,disctrain,"
                        + "ndisccu,disccu,discpro,discdayend,"
                        + "neatin,eatin,eatinnet,ceatin,"
                        + "ntakeaway,takeaway,takeawaynet,ctakeaway,"
                        + "ndelivery,delivery,deliverynet,cdelivery,"
                        + "npinto,pinto,pintonet,cpinto,"
                        + "nwhole,whole,wholenet,cwhole,"
                        + "nar,ar,nevoucher,evoucher) "
                        + "values (?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));

                TempAmt = Double.parseDouble(StrS[3]);
                prm.setDouble(4, TempAmt);
                TempAmt = Double.parseDouble(StrS[4]);
                prm.setDouble(5, TempAmt);
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(6, TempAmt);
                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(7, TempAmt);
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(8, TempAmt);

                TempAmt = Double.parseDouble(StrS[8]);  //pcust
                prm.setDouble(9, TempAmt);
                TempAmt = Double.parseDouble(StrS[9]);
                prm.setDouble(10, TempAmt);

                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(12, TempAmt);

                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);
                TempAmt = Double.parseDouble(StrS[13]);
                prm.setDouble(14, TempAmt);

                TempAmt = Double.parseDouble(StrS[14]);
                prm.setDouble(15, TempAmt);
                TempAmt = Double.parseDouble(StrS[15]);
                prm.setDouble(16, TempAmt);

                TempAmt = Double.parseDouble(StrS[16]);
                prm.setDouble(17, TempAmt);
                TempAmt = Double.parseDouble(StrS[17]);
                prm.setDouble(18, TempAmt);

                TempAmt = Double.parseDouble(StrS[18]);
                prm.setDouble(19, TempAmt);
                TempAmt = Double.parseDouble(StrS[19]);
                prm.setDouble(20, TempAmt);

                TempAmt = Double.parseDouble(StrS[20]);   //nsundiscb
                prm.setDouble(21, TempAmt);
                TempAmt = Double.parseDouble(StrS[21]);
                prm.setDouble(22, TempAmt);

                TempAmt = Double.parseDouble(StrS[22]);  //nvoid
                prm.setDouble(23, TempAmt);
                TempAmt = Double.parseDouble(StrS[23]);
                prm.setDouble(24, TempAmt);

                TempAmt = Double.parseDouble(StrS[24]);  //nrefund
                prm.setDouble(25, TempAmt);
                TempAmt = Double.parseDouble(StrS[25]);
                prm.setDouble(26, TempAmt);

                TempAmt = Double.parseDouble(StrS[26]);  //ngenrefund
                prm.setDouble(27, TempAmt);
                TempAmt = Double.parseDouble(StrS[27]);
                prm.setDouble(28, TempAmt);

                TempAmt = Double.parseDouble(StrS[28]);   //nitemdisc
                prm.setDouble(29, TempAmt);
                TempAmt = Double.parseDouble(StrS[29]);
                prm.setDouble(30, TempAmt);

                TempAmt = Double.parseDouble(StrS[30]);   //nsubdiscy
                prm.setDouble(31, TempAmt);
                TempAmt = Double.parseDouble(StrS[31]);
                prm.setDouble(32, TempAmt);

                TempAmt = Double.parseDouble(StrS[32]);    //nsubdisc
                prm.setDouble(33, TempAmt);
                TempAmt = Double.parseDouble(StrS[33]);
                prm.setDouble(34, TempAmt);

                TempAmt = Double.parseDouble(StrS[34]);   //nsubdiscs
                prm.setDouble(35, TempAmt);
                TempAmt = Double.parseDouble(StrS[35]);
                prm.setDouble(36, TempAmt);

                TempAmt = Double.parseDouble(StrS[36]);   //ncharge
                prm.setDouble(37, TempAmt);
                TempAmt = Double.parseDouble(StrS[37]);
                prm.setDouble(38, TempAmt);

                TempAmt = Double.parseDouble(StrS[38]);   //nservice
                prm.setDouble(39, TempAmt);
                TempAmt = Double.parseDouble(StrS[39]);
                prm.setDouble(40, TempAmt);

                TempAmt = Double.parseDouble(StrS[40]);   //nosale
                prm.setDouble(41, TempAmt);
                prm.setString(42, cvth.Unicode2ASCII(StrS[41]));              //t_user 
                prm.setString(43, cvth.Unicode2ASCII(StrS[42]));              //tmdate

                TempAmt = Double.parseDouble(StrS[43]);   //ntrain
                prm.setDouble(44, TempAmt);
                TempAmt = Double.parseDouble(StrS[44]);
                prm.setDouble(45, TempAmt);

                TempAmt = Double.parseDouble(StrS[45]);   //ndisccu
                prm.setDouble(46, TempAmt);
                TempAmt = Double.parseDouble(StrS[46]);
                prm.setDouble(47, TempAmt);

                TempAmt = Double.parseDouble(StrS[47]);   //discpro
                prm.setDouble(48, TempAmt);
                TempAmt = Double.parseDouble(StrS[48]);   //discendday
                prm.setDouble(49, TempAmt);

                TempAmt = Double.parseDouble(StrS[49]);   //neatin
                prm.setDouble(50, TempAmt);
                TempAmt = Double.parseDouble(StrS[50]);
                prm.setDouble(51, TempAmt);
                TempAmt = Double.parseDouble(StrS[51]);
                prm.setDouble(52, TempAmt);
                TempAmt = Double.parseDouble(StrS[52]);
                prm.setDouble(53, TempAmt);

                TempAmt = Double.parseDouble(StrS[53]);   //ntakeaway
                prm.setDouble(54, TempAmt);
                TempAmt = Double.parseDouble(StrS[54]);
                prm.setDouble(55, TempAmt);
                TempAmt = Double.parseDouble(StrS[55]);
                prm.setDouble(56, TempAmt);
                TempAmt = Double.parseDouble(StrS[56]);
                prm.setDouble(57, TempAmt);

                TempAmt = Double.parseDouble(StrS[57]);   //ndelivery
                prm.setDouble(58, TempAmt);
                TempAmt = Double.parseDouble(StrS[58]);
                prm.setDouble(59, TempAmt);
                TempAmt = Double.parseDouble(StrS[59]);
                prm.setDouble(60, TempAmt);
                TempAmt = Double.parseDouble(StrS[60]);
                prm.setDouble(61, TempAmt);

                TempAmt = Double.parseDouble(StrS[61]);   //npinto
                prm.setDouble(62, TempAmt);
                TempAmt = Double.parseDouble(StrS[61]);
                prm.setDouble(63, TempAmt);
                TempAmt = Double.parseDouble(StrS[63]);
                prm.setDouble(64, TempAmt);
                TempAmt = Double.parseDouble(StrS[64]);
                prm.setDouble(65, TempAmt);

                TempAmt = Double.parseDouble(StrS[65]);   //nwhole
                prm.setDouble(66, TempAmt);
                TempAmt = Double.parseDouble(StrS[66]);
                prm.setDouble(67, TempAmt);
                TempAmt = Double.parseDouble(StrS[67]);
                prm.setDouble(68, TempAmt);
                TempAmt = Double.parseDouble(StrS[68]);
                prm.setDouble(69, TempAmt);

                TempAmt = Double.parseDouble(StrS[69]);   //nar
                prm.setDouble(70, TempAmt);
                TempAmt = Double.parseDouble(StrS[70]);
                prm.setDouble(71, TempAmt);
                prm.setDouble(72, 0);
                prm.setDouble(73, 0);
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dcouponlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from dcupon where s_bran='" + fBran + "' and t_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }

        }

        public void insertnew(String StrS[]) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into dcupon "
                        + "(s_bran,t_date,macno,cashier,cucode,cuname,cuqty,cuamt)"
                        + "values (?,?,?,?,?,?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, "");
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(7, TempAmt);
                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(8, TempAmt);
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dpromotionlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from dpromotion where s_bran='" + fBran + "' and s_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }

        }

        public void insertnew(String StrS[]) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into dpromotion "
                        + "(s_bran,s_date,r_refno,terminal,cashier,prcode,prtype,pcode,pqty,ptotalamt,pamt,flage)"
                        + "values (?,?,?,?,?,?,?,?,?,?,  ?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));
                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                TempAmt = Double.parseDouble(StrS[8]);
                prm.setDouble(9, TempAmt);
                TempAmt = Double.parseDouble(StrS[9]);
                prm.setDouble(10, TempAmt);
                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                prm.setString(12, cvth.Unicode2ASCII(StrS[11]));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dinvoicelinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from dinvoice where s_bran='" + fBran + "' and pdate='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }

        }

        public void insertnew_Linux(String StrS[]) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into dinvoice "
                        + "(s_bran,postdate,pdate,ptime,pmacno,puser,pinvno,pgross,ptotal,pdisc,pservice,"
                        + "psvat,psnvat,pvat,billprnt,b_etd,pcust,ppaytype,pflage,puserv)"
                        + "values (?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,? )";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));
                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(8, TempAmt);
                TempAmt = Double.parseDouble(StrS[8]);
                prm.setDouble(9, TempAmt);
                TempAmt = Double.parseDouble(StrS[9]);
                prm.setDouble(10, TempAmt);
                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(12, TempAmt);
                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);
                TempAmt = Double.parseDouble(StrS[13]);
                prm.setDouble(14, TempAmt);
                TempAmt = Double.parseDouble(StrS[14]);
                prm.setDouble(15, TempAmt);
                prm.setString(16, cvth.Unicode2ASCII(StrS[15]));
                TempAmt = Double.parseDouble(StrS[16]);
                prm.setDouble(17, TempAmt);
                prm.setString(18, cvth.Unicode2ASCII(StrS[17]));
                prm.setString(19, cvth.Unicode2ASCII(StrS[18]));
                prm.setString(20, cvth.Unicode2ASCII(StrS[19]));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }
        }

        public void insertnew_Windows(String StrS[]) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into dinvoice "
                        + "(s_bran,postdate,pdate,ptime,pmacno,puser,pinvno,pgross,ptotal,pdisc,pservice,"
                        + "psvat,psnvat,pvat,billprnt,b_etd,pcust,ppaytype,pflage,puserv)"
                        + "values (?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,? )";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));
                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(8, TempAmt);
                TempAmt = Double.parseDouble(StrS[8]);
                prm.setDouble(9, TempAmt);
                TempAmt = Double.parseDouble(StrS[9]);
                prm.setDouble(10, TempAmt);
                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(12, TempAmt);
                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);
                TempAmt = Double.parseDouble(StrS[13]);
                prm.setDouble(14, TempAmt);
                TempAmt = Double.parseDouble(StrS[14]);
                prm.setDouble(15, TempAmt);
                prm.setString(16, cvth.Unicode2ASCII(StrS[15]));
                TempAmt = Double.parseDouble(StrS[16]);
                prm.setDouble(17, TempAmt);
                prm.setString(18, cvth.Unicode2ASCII(StrS[17]));
                prm.setString(19, cvth.Unicode2ASCII(StrS[18]));
                prm.setString(20, cvth.Unicode2ASCII(StrS[19]));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }
        }
    }

    class dhourlylinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from dhourly where s_bran='" + fBran + "' and t_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }

        }

        public void insertnew(String StrS[]) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into dhourly "
                        + "(s_bran,t_date,t_macno,"
                        + "pnt1,cnt1,amt1,pnt2,cnt2,amt2,pnt3,cnt3,amt3,pnt4,cnt4,amt4,"
                        + "pnt5,cnt5,amt5,pnt6,cnt6,amt6,pnt7,cnt7,amt7,pnt8,cnt8,amt8,"
                        + "pnt9,cnt9,amt9,pnt10,cnt10,amt10,pnt11,cnt11,amt11,pnt12,cnt12,amt12,"
                        + "pnt13,cnt13,amt13,pnt14,cnt14,amt14,pnt15,cnt15,amt15,pnt16,cnt16,amt16,"
                        + "pnt17,cnt17,amt17,pnt18,cnt18,amt18,pnt19,cnt19,amt19,pnt20,cnt20,amt20,"
                        + "pnt21,cnt21,amt21,pnt22,cnt22,amt22,pnt23,cnt23,amt23,pnt24,cnt24,amt24)"
                        + "values (?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                TempAmt = Double.parseDouble(StrS[3]);
                prm.setDouble(4, TempAmt);
                TempAmt = Double.parseDouble(StrS[4]);
                prm.setDouble(5, TempAmt);
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(6, TempAmt);
                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(7, TempAmt);
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(8, TempAmt);
                TempAmt = Double.parseDouble(StrS[8]);
                prm.setDouble(9, TempAmt);
                TempAmt = Double.parseDouble(StrS[9]);
                prm.setDouble(10, TempAmt);
                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(12, TempAmt);
                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);
                TempAmt = Double.parseDouble(StrS[13]);
                prm.setDouble(14, TempAmt);
                TempAmt = Double.parseDouble(StrS[14]);
                prm.setDouble(15, TempAmt);
                TempAmt = Double.parseDouble(StrS[15]);
                prm.setDouble(16, TempAmt);
                TempAmt = Double.parseDouble(StrS[16]);
                prm.setDouble(17, TempAmt);
                TempAmt = Double.parseDouble(StrS[17]);
                prm.setDouble(18, TempAmt);
                TempAmt = Double.parseDouble(StrS[18]);
                prm.setDouble(19, TempAmt);
                TempAmt = Double.parseDouble(StrS[19]);
                prm.setDouble(20, TempAmt);
                TempAmt = Double.parseDouble(StrS[20]);
                prm.setDouble(21, TempAmt);

                TempAmt = Double.parseDouble(StrS[21]);
                prm.setDouble(22, TempAmt);
                TempAmt = Double.parseDouble(StrS[22]);
                prm.setDouble(23, TempAmt);
                TempAmt = Double.parseDouble(StrS[23]);
                prm.setDouble(24, TempAmt);
                TempAmt = Double.parseDouble(StrS[24]);
                prm.setDouble(25, TempAmt);
                TempAmt = Double.parseDouble(StrS[25]);
                prm.setDouble(26, TempAmt);
                TempAmt = Double.parseDouble(StrS[26]);
                prm.setDouble(27, TempAmt);
                TempAmt = Double.parseDouble(StrS[27]);
                prm.setDouble(28, TempAmt);
                TempAmt = Double.parseDouble(StrS[28]);
                prm.setDouble(29, TempAmt);
                TempAmt = Double.parseDouble(StrS[29]);
                prm.setDouble(30, TempAmt);
                TempAmt = Double.parseDouble(StrS[30]);
                prm.setDouble(31, TempAmt);

                TempAmt = Double.parseDouble(StrS[31]);
                prm.setDouble(32, TempAmt);
                TempAmt = Double.parseDouble(StrS[32]);
                prm.setDouble(33, TempAmt);
                TempAmt = Double.parseDouble(StrS[33]);
                prm.setDouble(34, TempAmt);
                TempAmt = Double.parseDouble(StrS[34]);
                prm.setDouble(35, TempAmt);
                TempAmt = Double.parseDouble(StrS[35]);
                prm.setDouble(36, TempAmt);
                TempAmt = Double.parseDouble(StrS[36]);
                prm.setDouble(37, TempAmt);
                TempAmt = Double.parseDouble(StrS[37]);
                prm.setDouble(38, TempAmt);
                TempAmt = Double.parseDouble(StrS[38]);
                prm.setDouble(39, TempAmt);
                TempAmt = Double.parseDouble(StrS[39]);
                prm.setDouble(40, TempAmt);
                TempAmt = Double.parseDouble(StrS[40]);
                prm.setDouble(41, TempAmt);

                TempAmt = Double.parseDouble(StrS[41]);
                prm.setDouble(42, TempAmt);
                TempAmt = Double.parseDouble(StrS[42]);
                prm.setDouble(43, TempAmt);
                TempAmt = Double.parseDouble(StrS[43]);
                prm.setDouble(44, TempAmt);
                TempAmt = Double.parseDouble(StrS[44]);
                prm.setDouble(45, TempAmt);
                TempAmt = Double.parseDouble(StrS[45]);
                prm.setDouble(46, TempAmt);
                TempAmt = Double.parseDouble(StrS[46]);
                prm.setDouble(47, TempAmt);
                TempAmt = Double.parseDouble(StrS[47]);
                prm.setDouble(48, TempAmt);
                TempAmt = Double.parseDouble(StrS[48]);
                prm.setDouble(49, TempAmt);
                TempAmt = Double.parseDouble(StrS[49]);
                prm.setDouble(50, TempAmt);
                TempAmt = Double.parseDouble(StrS[50]);
                prm.setDouble(51, TempAmt);

                TempAmt = Double.parseDouble(StrS[51]);
                prm.setDouble(52, TempAmt);
                TempAmt = Double.parseDouble(StrS[52]);
                prm.setDouble(53, TempAmt);
                TempAmt = Double.parseDouble(StrS[53]);
                prm.setDouble(54, TempAmt);
                TempAmt = Double.parseDouble(StrS[54]);
                prm.setDouble(55, TempAmt);
                TempAmt = Double.parseDouble(StrS[55]);
                prm.setDouble(56, TempAmt);
                TempAmt = Double.parseDouble(StrS[56]);
                prm.setDouble(57, TempAmt);
                TempAmt = Double.parseDouble(StrS[57]);
                prm.setDouble(58, TempAmt);
                TempAmt = Double.parseDouble(StrS[58]);
                prm.setDouble(59, TempAmt);
                TempAmt = Double.parseDouble(StrS[59]);
                prm.setDouble(60, TempAmt);
                TempAmt = Double.parseDouble(StrS[60]);
                prm.setDouble(61, TempAmt);

                TempAmt = Double.parseDouble(StrS[61]);
                prm.setDouble(62, TempAmt);
                TempAmt = Double.parseDouble(StrS[62]);
                prm.setDouble(63, TempAmt);
                TempAmt = Double.parseDouble(StrS[63]);
                prm.setDouble(64, TempAmt);
                TempAmt = Double.parseDouble(StrS[64]);
                prm.setDouble(65, TempAmt);
                TempAmt = Double.parseDouble(StrS[65]);
                prm.setDouble(66, TempAmt);
                TempAmt = Double.parseDouble(StrS[66]);
                prm.setDouble(67, TempAmt);
                TempAmt = Double.parseDouble(StrS[67]);
                prm.setDouble(68, TempAmt);
                TempAmt = Double.parseDouble(StrS[68]);
                prm.setDouble(69, TempAmt);
                TempAmt = Double.parseDouble(StrS[69]);
                prm.setDouble(70, TempAmt);
                TempAmt = Double.parseDouble(StrS[70]);
                prm.setDouble(71, TempAmt);

                TempAmt = Double.parseDouble(StrS[71]);
                prm.setDouble(72, TempAmt);
                TempAmt = Double.parseDouble(StrS[72]);
                prm.setDouble(73, TempAmt);
                TempAmt = Double.parseDouble(StrS[73]);
                prm.setDouble(74, TempAmt);
                TempAmt = Double.parseDouble(StrS[74]);
                prm.setDouble(75, TempAmt);
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class drjfilelinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from drjfile where brcode='" + fBran + "' and tdate='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double templine = 0.0;
            String TDept = "";
            String TAccount = "";
            String TSub = "";
            String TDesc = "";
            String TVat = "";
            String TempRjNo = StrS[0];
            try {
                ResultSet rs = null;
                stmt = (Statement) dbUtility.con.createStatement();
                String sql = "select *from masterrj where rjno='" + TempRjNo + "'";
                rs = stmt.executeQuery(sql);
                if (rs.next()) {
                    templine = rs.getDouble("rjline");
                    TDept = rs.getString("Dept");
                    TAccount = rs.getString("account");
                    TSub = rs.getString("sub");
                    TDesc = rs.getString("tdesc");
                    TVat = rs.getString("vatprn");
                }
            } catch (SQLException ex) {
                Logger.getLogger(rptChkpost.class.getName()).log(Level.SEVERE, null, ex);
            }
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into drjfile "
                        + "(brcode,tdate,rjno,rjline,dept,account,sub,descname,fixcode,"
                        + "mac1,mac2,mac3,total,nettotal,vat,createDT)"
                        + "values (?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, fBran);
                prm.setString(2, Format.dateFmtSql.format(fDate));
                prm.setString(3, cvth.Unicode2ASCII(StrS[0]));
                prm.setDouble(4, templine);
                prm.setString(5, cvth.Unicode2ASCII(TDept));
                prm.setString(6, cvth.Unicode2ASCII(TAccount));
                if (TempRjNo.equals("60")) {
                    prm.setString(7, cvth.Unicode2ASCII(StrS[1]));
                } else {
                    prm.setString(7, cvth.Unicode2ASCII(TSub));
                }
                prm.setString(8, cvth.Unicode2ASCII(TDesc));
                prm.setString(9, "");
                TempAmt = Double.parseDouble(StrS[2]);
                prm.setDouble(10, TempAmt);
                TempAmt = Double.parseDouble(StrS[3]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[4]);
                prm.setDouble(12, TempAmt);
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(13, TempAmt);
                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(14, TempAmt);
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(15, TempAmt);
                prm.setString(16, Format.dateFmtReport.format(new Date()));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dstockcakelinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from dstockcake where s_bran='" + fBran + "' and s_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew_Linux(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into dstockcake "
                        + "(s_bran,s_date,pcode,bod,pbuy,rec,tfr,wid,sal,ret,pret,rfn,adj,eod,adjeod,tuser,"
                        + "trem,con1,con2,createdt) "
                        + "values (?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(fBran));
                prm.setString(2, Format.dateFmtSql.format(fDate));
                prm.setString(3, cvth.Unicode2ASCII(StrS[0]));
                TempAmt = Double.parseDouble(StrS[1]);
                prm.setDouble(4, TempAmt);
                TempAmt = Double.parseDouble(StrS[2]);
                prm.setDouble(5, TempAmt);
                TempAmt = Double.parseDouble(StrS[3]);
                prm.setDouble(6, TempAmt);
                TempAmt = Double.parseDouble(StrS[4]);
                prm.setDouble(7, TempAmt);
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(8, TempAmt);
                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(9, TempAmt);
                TempAmt = Double.parseDouble(StrS[8]);
                prm.setDouble(10, TempAmt);
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[9]);
                prm.setDouble(12, TempAmt);
                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(13, TempAmt);
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(14, TempAmt);
                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(15, TempAmt);
                prm.setString(16, cvth.Unicode2ASCII(StrS[13]));
                prm.setString(17, cvth.Unicode2ASCII(StrS[14]));
                TempAmt = Double.parseDouble(StrS[15]);
                prm.setDouble(18, TempAmt);
                TempAmt = Double.parseDouble(StrS[16]);
                prm.setDouble(19, TempAmt);
                prm.setString(20, Format.dateFmtReport.format(new Date()));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }

        public void insertnew_Windows(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into dstockcake "
                        + "(s_bran,s_date,pcode,bod,pbuy,rec,tfr,wid,sal,ret,pret,rfn,adj,eod,adjeod,tuser,"
                        + "trem,con1,con2,createdt) "
                        + "values (?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(fBran));
                prm.setString(2, Format.dateFmtSql.format(fDate));
                prm.setString(3, cvth.Unicode2ASCII(StrS[0]));
                TempAmt = Double.parseDouble(StrS[1]);
                prm.setDouble(4, TempAmt);
                TempAmt = Double.parseDouble(StrS[2]);
                prm.setDouble(5, TempAmt);
                TempAmt = Double.parseDouble(StrS[3]);
                prm.setDouble(6, TempAmt);
                TempAmt = Double.parseDouble(StrS[4]);
                prm.setDouble(7, TempAmt);
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(8, TempAmt);
                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(9, TempAmt);
                TempAmt = Double.parseDouble(StrS[8]);
                prm.setDouble(10, TempAmt);
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[9]);
                prm.setDouble(12, TempAmt);
                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(13, TempAmt);
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(14, TempAmt);
                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(15, TempAmt);
                prm.setString(16, cvth.Unicode2ASCII(StrS[13]));
                prm.setString(17, cvth.Unicode2ASCII(StrS[14]));
                prm.setDouble(18, 0);
                prm.setDouble(19, 0);
                prm.setString(20, Format.dateFmtReport.format(new Date()));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dcreditlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from dcredit where s_bran='" + fBran + "' and s_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            String MacNo = "";
            String Cashier = "";
            if (StrS[2].length() <= 3) {
                MacNo = StrS[2];
            } else {
                Cashier = StrS[2];
            }
            int StrL = StrS.length;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into dcredit "
                        + "(s_bran,s_date,macno,cashier,crcode,crqty,cramount)"
                        + "values (?,?,?,?,?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(MacNo));
                prm.setString(4, cvth.Unicode2ASCII(Cashier));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(6, TempAmt);
                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(7, TempAmt);
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dcreditdetaillinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from dcrdetail where s_bran='" + fBran + "' and s_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into dcrdetail "
                        + "(s_bran,s_date,ondate,ref_no,bank,crcode,cramt,cracc,crid,terminal,cashier,crcnt) "
                        + "values (?,?,?,?,?,?,?,?,?,?,  ?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(fBran));
                prm.setString(2, Format.dateFmtSql.format(fDate));
                prm.setString(3, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[3]));
                TempAmt = Double.parseDouble(StrS[4]);
                prm.setDouble(7, TempAmt);
                prm.setString(8, cvth.Unicode2ASCII(StrS[5]));
                prm.setString(9, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[7]));
                prm.setString(11, cvth.Unicode2ASCII(StrS[8]));
                prm.setDouble(12, 0);
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class duserchangelinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from userchange where changebranch='" + fBran + "' and changedate='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            String changebranch = StrS[0];
            String usercode = StrS[1];
            String newpassword = StrS[2];
            String changedate = StrS[3];
            String changetime = StrS[4];
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into userchange "
                        + "(changebranch,usercode,newpassword,changedate,changetime) "
                        + "values (?,?,?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(changebranch));
                prm.setString(2, cvth.Unicode2ASCII(usercode));
                prm.setString(3, cvth.Unicode2ASCII(newpassword));
                prm.setString(4, cvth.Unicode2ASCII(changedate));
                prm.setString(5, cvth.Unicode2ASCII(changetime));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }
            if (!processStop) {
                String lastchangepassword = getlastchange(usercode);
                if (lastchangepassword.compareTo(changetime) <= 0) {
                    try {
                        Statement stmt = (Statement) dbUtility.con.createStatement();
                        String SqlQuery = "update posuser set "
                                + "lastchangepassword=?,branchchange=?,password=? "
                                + "where username=?";
                        PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                        prm.setString(1, cvth.Unicode2ASCII(changetime));
                        prm.setString(2, cvth.Unicode2ASCII(changebranch));
                        prm.setString(3, cvth.Unicode2ASCII(newpassword));
                        prm.setString(4, cvth.Unicode2ASCII(usercode));
                        prm.executeUpdate();
                        prm.close();
                        stmt.close();
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(null, e);
                    }
                }
            }
        }

        public String getlastchange(String usercode) {
            String ReturnVal = "";
            try {
                ResultSet rs = null;
                stmt = (Statement) dbUtility.con.createStatement();
                String sql = "select *from posuser where username>='" + usercode + "' ";
                rs = stmt.executeQuery(sql);
                if (rs.next()) {
                    ReturnVal = rs.getString("lastchangepassword");
                }
            } catch (SQLException ex) {
                Logger.getLogger(rptChkpost.class.getName()).log(Level.SEVERE, null, ex);
            }
            return ReturnVal;
        }
    }

    class dkictranlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from dkictran where s_bran='" + fBran + "' and s_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into dkictran "
                        + "(s_bran,s_date,pdate,pcode,pindex,macno,cashier,emp,pitemno,ptable,pkic,ptimein,ptimeout,"
                        + "pvoid,petd,pqty,pflage,pwaittime,pservetime,pserve,ppayment,pinvno,pwaitserve,pwaittotal)"
                        + "values (?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,  ?,?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));
                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));
                prm.setString(11, cvth.Unicode2ASCII(StrS[10]));
                prm.setString(12, cvth.Unicode2ASCII(StrS[11]));
                prm.setString(13, cvth.Unicode2ASCII(StrS[12]));
                prm.setString(14, cvth.Unicode2ASCII(StrS[13]));
                prm.setString(15, cvth.Unicode2ASCII(StrS[14]));
                TempAmt = Double.parseDouble(StrS[15]);
                prm.setDouble(16, TempAmt);
                prm.setString(17, cvth.Unicode2ASCII(StrS[16]));
                prm.setString(18, cvth.Unicode2ASCII(StrS[17]));
                prm.setString(19, cvth.Unicode2ASCII(StrS[18]));
                prm.setString(20, cvth.Unicode2ASCII(StrS[19]));
                prm.setString(21, cvth.Unicode2ASCII(StrS[20]));
                prm.setString(22, cvth.Unicode2ASCII(StrS[21]));
                prm.setString(23, cvth.Unicode2ASCII(StrS[22]));
                prm.setString(24, cvth.Unicode2ASCII(StrS[23]));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dchargelinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from s_charge where s_bran='" + fBran + "' and s_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into s_charge "
                        + "(s_bran,s_date,b_refno,b_ontime,b_table,b_ondate,b_macno,b_cashier,b_cust,"
                        + "b_food,b_drink,b_product,b_total,b_void,b_voiduser,b_voidtime,b_chargecode,"
                        + "b_chargename,b_chargegroup,b_chargetype,b_chargeremark,createdt) "
                        + "values (?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,  ?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));
                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                TempAmt = Double.parseDouble(StrS[8]);
                prm.setDouble(9, TempAmt);
                TempAmt = Double.parseDouble(StrS[9]);
                prm.setDouble(10, TempAmt);
                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(12, TempAmt);
                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);

                prm.setString(14, cvth.Unicode2ASCII(StrS[13]));
                prm.setString(15, cvth.Unicode2ASCII(StrS[14]));
                prm.setString(16, cvth.Unicode2ASCII(StrS[15]));
                prm.setString(17, cvth.Unicode2ASCII(StrS[16]));
                prm.setString(18, cvth.Unicode2ASCII(StrS[17]));

                prm.setString(19, cvth.Unicode2ASCII(StrS[18]));
                prm.setString(20, cvth.Unicode2ASCII(StrS[19]));
                prm.setString(21, cvth.Unicode2ASCII(StrS[20]));
                prm.setString(22, Format.dateFmtReport.format(new Date()));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dtranchargelinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from s_trancharge where s_bran='" + fBran + "' and s_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into s_trancharge "
                        + "(s_bran,s_date,r_index,r_refno,r_table,r_date,r_time,r_macno,r_cashier,r_etd,r_set,"
                        + "r_stock,r_plucode,r_pname,r_unit,r_group,r_emp,r_quan,r_grossprice,r_netprice,r_nettotal,r_grosstotal,"
                        + "r_pricedown,r_void,r_voiduser,r_voidtime,r_refund,createdt) "
                        + "values (?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                //JOptionPane.showMessageDialog(null, StrS[13]);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));
                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));
                prm.setString(11, cvth.Unicode2ASCII(StrS[10]));
                prm.setString(12, cvth.Unicode2ASCII(StrS[11]));
                prm.setString(13, cvth.Unicode2ASCII(StrS[12]));
                prm.setString(14, cvth.Unicode2ASCII(StrS[13]));
                prm.setString(15, cvth.Unicode2ASCII(StrS[14]));
                prm.setString(16, cvth.Unicode2ASCII(StrS[15]));
                prm.setString(17, cvth.Unicode2ASCII(StrS[16]));

                TempAmt = Double.parseDouble(StrS[17]);
                prm.setDouble(18, TempAmt);
                TempAmt = Double.parseDouble(StrS[18]);
                prm.setDouble(19, TempAmt);
                TempAmt = Double.parseDouble(StrS[19]);
                prm.setDouble(20, TempAmt);
                TempAmt = Double.parseDouble(StrS[20]);
                prm.setDouble(21, TempAmt);
                TempAmt = Double.parseDouble(StrS[21]);
                prm.setDouble(22, TempAmt);
                TempAmt = Double.parseDouble(StrS[22]);
                prm.setDouble(23, TempAmt);

                prm.setString(24, cvth.Unicode2ASCII(StrS[23]));
                prm.setString(25, cvth.Unicode2ASCII(StrS[24]));
                prm.setString(26, cvth.Unicode2ASCII(StrS[25]));
                prm.setString(27, cvth.Unicode2ASCII(StrS[26]));
                prm.setString(28, Format.dateFmtReport.format(new Date()));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);

                processStop = true;
            }

        }
    }

    class dbillnolinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from s_billno where s_bran='" + fBran + "' and s_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into s_billno "
                        + "(s_bran,s_date,b_refno,b_ondate,b_ontime,b_table,b_macno,b_cashier,b_cust,b_etd,"
                        + "b_total,b_food,b_drink,b_product,b_service,b_serviceamt,b_itemdiscamt,b_memdisc,b_memdiscamt,"
                        + "b_subdisc,b_subdiscamt,b_subdiscbath,b_empdisc,b_empdiscamt,b_empdiscbath,"
                        + "b_fastdisc,b_fastdiscamt,b_fastdiscbath,b_traindisc,b_traindiscamt,b_traindiscbath,"
                        + "b_prodiscamt,b_cupondiscamt,b_spadiscamt,b_adjamt,b_nettotal,b_netfood,b_netdrink,"
                        + "b_netproduct,b_netvat,b_netnonvat,b_vat,b_payamt,b_cash,b_giftvoucher,b_earnest,"
                        + "b_ton,b_crcode1,b_cardno1,b_appcode1,b_crcharge1,b_crchargeamt1,b_cramt1,"
                        + "b_accrcode,b_accramt,b_accrcr,b_memcode,b_memname,b_membegin,b_memend,b_memcursum,"
                        + "b_void,b_voiduser,b_voidtime,b_billcopy,b_prncnt,b_prntime1,b_prntime2,"
                        + "b_userendofday,b_timeendofday,b_dateendofday,b_chkbill,b_chkbilltime,b_cashtime,"
                        + "b_waittime,b_crbank,b_crcardamt,b_crcurpoint,b_crsumpoint,barcodelost,barcodelostuser,"
                        + "barcodelostusername,barcodelosttime,employcode,employname,b_round,b_roundclose,"
                        + "b_roundclosetime,b_roundclosemac,prnnettotal1,prnnettotal2,prncashier1,prncashier2,"
                        + "b_evoucher,createdt) "
                        + "values (?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));
                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                TempAmt = Double.parseDouble(StrS[8]);
                prm.setDouble(9, TempAmt);
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));

                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(12, TempAmt);
                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);
                TempAmt = Double.parseDouble(StrS[13]);
                prm.setDouble(14, TempAmt);
                TempAmt = Double.parseDouble(StrS[14]);
                prm.setDouble(15, TempAmt);
                TempAmt = Double.parseDouble(StrS[15]);
                prm.setDouble(16, TempAmt);
                TempAmt = Double.parseDouble(StrS[16]);
                prm.setDouble(17, TempAmt);

                prm.setString(18, cvth.Unicode2ASCII(StrS[17]));
                TempAmt = Double.parseDouble(StrS[18]);
                prm.setDouble(19, TempAmt);

                prm.setString(20, cvth.Unicode2ASCII(StrS[19]));
                TempAmt = Double.parseDouble(StrS[20]);
                prm.setDouble(21, TempAmt);
                TempAmt = Double.parseDouble(StrS[21]);
                prm.setDouble(22, TempAmt);

                prm.setString(23, cvth.Unicode2ASCII(StrS[22]));
                TempAmt = Double.parseDouble(StrS[23]);
                prm.setDouble(24, TempAmt);
                TempAmt = Double.parseDouble(StrS[24]);
                prm.setDouble(25, TempAmt);

                prm.setString(26, cvth.Unicode2ASCII(StrS[25]));
                TempAmt = Double.parseDouble(StrS[26]);
                prm.setDouble(27, TempAmt);
                TempAmt = Double.parseDouble(StrS[27]);
                prm.setDouble(28, TempAmt);

                prm.setString(29, cvth.Unicode2ASCII(StrS[28]));
                TempAmt = Double.parseDouble(StrS[29]);
                prm.setDouble(30, TempAmt);
                TempAmt = Double.parseDouble(StrS[30]);
                prm.setDouble(31, TempAmt);

                TempAmt = Double.parseDouble(StrS[31]);
                prm.setDouble(32, TempAmt);
                TempAmt = Double.parseDouble(StrS[32]);
                prm.setDouble(33, TempAmt);
                TempAmt = Double.parseDouble(StrS[33]);
                prm.setDouble(34, TempAmt);
                TempAmt = Double.parseDouble(StrS[34]);
                prm.setDouble(35, TempAmt);
                TempAmt = Double.parseDouble(StrS[35]);
                prm.setDouble(36, TempAmt);
                TempAmt = Double.parseDouble(StrS[36]);
                prm.setDouble(37, TempAmt);
                TempAmt = Double.parseDouble(StrS[37]);
                prm.setDouble(38, TempAmt);
                TempAmt = Double.parseDouble(StrS[38]);
                prm.setDouble(39, TempAmt);
                TempAmt = Double.parseDouble(StrS[39]);
                prm.setDouble(40, TempAmt);
                TempAmt = Double.parseDouble(StrS[40]);
                prm.setDouble(41, TempAmt);
                TempAmt = Double.parseDouble(StrS[41]);
                prm.setDouble(42, TempAmt);
                TempAmt = Double.parseDouble(StrS[42]);
                prm.setDouble(43, TempAmt);
                TempAmt = Double.parseDouble(StrS[43]);
                prm.setDouble(44, TempAmt);
                TempAmt = Double.parseDouble(StrS[44]);
                prm.setDouble(45, TempAmt);
                TempAmt = Double.parseDouble(StrS[45]);
                prm.setDouble(46, TempAmt);
                TempAmt = Double.parseDouble(StrS[46]);
                prm.setDouble(47, TempAmt);

                prm.setString(48, cvth.Unicode2ASCII(StrS[47]));
                prm.setString(49, cvth.Unicode2ASCII(StrS[48]));
                prm.setString(50, cvth.Unicode2ASCII(StrS[49]));

                TempAmt = Double.parseDouble(StrS[50]);
                prm.setDouble(51, TempAmt);
                TempAmt = Double.parseDouble(StrS[51]);
                prm.setDouble(52, TempAmt);
                TempAmt = Double.parseDouble(StrS[52]);
                prm.setDouble(53, TempAmt);
                prm.setString(54, StrS[53]);
                TempAmt = Double.parseDouble(StrS[54]);
                prm.setDouble(55, TempAmt);
                //TempAmt = Double.parseDouble(StrS[22]);
                prm.setDouble(56, 0);

                prm.setString(57, cvth.Unicode2ASCII(StrS[55]));
                prm.setString(58, cvth.Unicode2ASCII(StrS[56]));
                prm.setString(59, cvth.Unicode2ASCII(StrS[57]));
                prm.setString(60, cvth.Unicode2ASCII(StrS[58]));
                TempAmt = Double.parseDouble(StrS[59]);
                prm.setDouble(61, TempAmt);
                prm.setString(62, cvth.Unicode2ASCII(StrS[60]));
                prm.setString(63, cvth.Unicode2ASCII(StrS[61]));
                prm.setString(64, cvth.Unicode2ASCII(StrS[62]));
                TempAmt = Double.parseDouble(StrS[63]);
                prm.setDouble(65, TempAmt);
                TempAmt = Double.parseDouble(StrS[64]);
                prm.setDouble(66, TempAmt);
                prm.setString(67, cvth.Unicode2ASCII(StrS[65]));
                prm.setString(68, cvth.Unicode2ASCII(StrS[65]));
                prm.setString(69, cvth.Unicode2ASCII(StrS[67]));
                prm.setString(70, cvth.Unicode2ASCII(StrS[68]));
                prm.setString(71, cvth.Unicode2ASCII(StrS[69]));
                prm.setString(72, cvth.Unicode2ASCII(StrS[70]));
                prm.setString(73, cvth.Unicode2ASCII(StrS[71]));
                prm.setString(74, cvth.Unicode2ASCII(StrS[72]));
                TempAmt = Double.parseDouble(StrS[73]);
                prm.setDouble(75, TempAmt);
                prm.setString(76, cvth.Unicode2ASCII(StrS[74]));
                TempAmt = Double.parseDouble(StrS[75]);
                prm.setDouble(77, TempAmt);
                TempAmt = Double.parseDouble(StrS[76]);
                prm.setDouble(78, TempAmt);
                TempAmt = Double.parseDouble(StrS[77]);
                prm.setDouble(79, TempAmt);
                prm.setString(80, cvth.Unicode2ASCII(StrS[78]));
                prm.setString(81, cvth.Unicode2ASCII(StrS[79]));
                prm.setString(82, cvth.Unicode2ASCII(StrS[80]));
                prm.setString(83, cvth.Unicode2ASCII(StrS[81]));
                prm.setString(84, cvth.Unicode2ASCII(StrS[82]));
                prm.setString(85, cvth.Unicode2ASCII(StrS[83]));
                TempAmt = Double.parseDouble(StrS[84]);
                prm.setDouble(86, TempAmt);
                prm.setString(87, cvth.Unicode2ASCII(StrS[85]));
                prm.setString(88, cvth.Unicode2ASCII(StrS[86]));
                prm.setString(89, cvth.Unicode2ASCII(StrS[87]));
                TempAmt = Double.parseDouble(StrS[88]);
                prm.setDouble(90, TempAmt);
                TempAmt = Double.parseDouble(StrS[89]);
                prm.setDouble(91, TempAmt);
                prm.setString(92, cvth.Unicode2ASCII(StrS[90]));
                prm.setString(93, cvth.Unicode2ASCII(StrS[91]));
                TempAmt = Double.parseDouble(StrS[92]);
                prm.setDouble(94, TempAmt);
                prm.setString(95, Format.dateFmtReport.format(new Date()));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }

        public void insertnew2(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into s_billno "
                        + "(s_bran,s_date,b_refno,b_ondate,b_ontime,b_table,b_macno,b_cashier,b_cust,b_etd,"
                        + "b_total,b_food,b_drink,b_product,b_service,b_serviceamt,b_itemdiscamt,b_memdisc,b_memdiscamt,"
                        + "b_subdisc,b_subdiscamt,b_subdiscbath,b_empdisc,b_empdiscamt,b_empdiscbath,"
                        + "b_fastdisc,b_fastdiscamt,b_fastdiscbath,b_traindisc,b_traindiscamt,b_traindiscbath,"
                        + "b_prodiscamt,b_cupondiscamt,b_spadiscamt,b_adjamt,b_nettotal,b_netfood,b_netdrink,"
                        + "b_netproduct,b_netvat,b_netnonvat,b_vat,b_payamt,b_cash,b_giftvoucher,b_earnest,"
                        + "b_ton,b_crcode1,b_cardno1,b_appcode1,b_crcharge1,b_crchargeamt1,b_cramt1,"
                        + "b_accrcode,b_accramt,b_accrcr,b_memcode,b_memname,b_membegin,b_memend,b_memcursum,"
                        + "b_void,b_voiduser,b_voidtime,b_billcopy,b_prncnt,b_prntime1,b_prntime2,"
                        + "b_userendofday,b_timeendofday,b_dateendofday,b_chkbill,b_chkbilltime,b_cashtime,"
                        + "b_waittime,b_crbank,b_crcardamt,b_crcurpoint,b_crsumpoint,barcodelost,barcodelostuser,"
                        + "barcodelostusername,barcodelosttime,employcode,employname,b_round,b_roundclose,"
                        + "b_roundclosetime,b_roundclosemac,prnnettotal1,prnnettotal2,prncashier1,prncashier2,"
                        + "b_evoucher,createdt,reserveorder,reserveordertype,reserveorderid,reserveorderdeposit,reserveordercustomer) "
                        + "values (?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?, ?,?,?,?,? ,?,?,?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));
                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                TempAmt = Double.parseDouble(StrS[8]);
                prm.setDouble(9, TempAmt);
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));

                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(12, TempAmt);
                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);
                TempAmt = Double.parseDouble(StrS[13]);
                prm.setDouble(14, TempAmt);
                TempAmt = Double.parseDouble(StrS[14]);
                prm.setDouble(15, TempAmt);
                TempAmt = Double.parseDouble(StrS[15]);
                prm.setDouble(16, TempAmt);
                TempAmt = Double.parseDouble(StrS[16]);
                prm.setDouble(17, TempAmt);

                prm.setString(18, cvth.Unicode2ASCII(StrS[17]));
                TempAmt = Double.parseDouble(StrS[18]);
                prm.setDouble(19, TempAmt);

                prm.setString(20, cvth.Unicode2ASCII(StrS[19]));
                TempAmt = Double.parseDouble(StrS[20]);
                prm.setDouble(21, TempAmt);
                TempAmt = Double.parseDouble(StrS[21]);
                prm.setDouble(22, TempAmt);

                prm.setString(23, cvth.Unicode2ASCII(StrS[22]));
                TempAmt = Double.parseDouble(StrS[23]);
                prm.setDouble(24, TempAmt);
                TempAmt = Double.parseDouble(StrS[24]);
                prm.setDouble(25, TempAmt);

                prm.setString(26, cvth.Unicode2ASCII(StrS[25]));
                TempAmt = Double.parseDouble(StrS[26]);
                prm.setDouble(27, TempAmt);
                TempAmt = Double.parseDouble(StrS[27]);
                prm.setDouble(28, TempAmt);

                prm.setString(29, cvth.Unicode2ASCII(StrS[28]));
                TempAmt = Double.parseDouble(StrS[29]);
                prm.setDouble(30, TempAmt);
                TempAmt = Double.parseDouble(StrS[30]);
                prm.setDouble(31, TempAmt);

                TempAmt = Double.parseDouble(StrS[31]);
                prm.setDouble(32, TempAmt);
                TempAmt = Double.parseDouble(StrS[32]);
                prm.setDouble(33, TempAmt);
                TempAmt = Double.parseDouble(StrS[33]);
                prm.setDouble(34, TempAmt);
                TempAmt = Double.parseDouble(StrS[34]);
                prm.setDouble(35, TempAmt);
                TempAmt = Double.parseDouble(StrS[35]);
                prm.setDouble(36, TempAmt);
                TempAmt = Double.parseDouble(StrS[36]);
                prm.setDouble(37, TempAmt);
                TempAmt = Double.parseDouble(StrS[37]);
                prm.setDouble(38, TempAmt);
                TempAmt = Double.parseDouble(StrS[38]);
                prm.setDouble(39, TempAmt);
                TempAmt = Double.parseDouble(StrS[39]);
                prm.setDouble(40, TempAmt);
                TempAmt = Double.parseDouble(StrS[40]);
                prm.setDouble(41, TempAmt);
                TempAmt = Double.parseDouble(StrS[41]);
                prm.setDouble(42, TempAmt);
                TempAmt = Double.parseDouble(StrS[42]);
                prm.setDouble(43, TempAmt);
                TempAmt = Double.parseDouble(StrS[43]);
                prm.setDouble(44, TempAmt);
                TempAmt = Double.parseDouble(StrS[44]);
                prm.setDouble(45, TempAmt);
                TempAmt = Double.parseDouble(StrS[45]);
                prm.setDouble(46, TempAmt);
                TempAmt = Double.parseDouble(StrS[46]);
                prm.setDouble(47, TempAmt);

                prm.setString(48, cvth.Unicode2ASCII(StrS[47]));
                prm.setString(49, cvth.Unicode2ASCII(StrS[48]));
                prm.setString(50, cvth.Unicode2ASCII(StrS[49]));

                TempAmt = Double.parseDouble(StrS[50]);
                prm.setDouble(51, TempAmt);
                TempAmt = Double.parseDouble(StrS[51]);
                prm.setDouble(52, TempAmt);
                TempAmt = Double.parseDouble(StrS[52]);
                prm.setDouble(53, TempAmt);
                prm.setString(54, cvth.Unicode2ASCII(StrS[53]));
                TempAmt = Double.parseDouble(StrS[54]);
                prm.setDouble(55, TempAmt);
                //TempAmt = Double.parseDouble(StrS[22]);
                prm.setDouble(56, 0);

                prm.setString(57, cvth.Unicode2ASCII(StrS[55]));
                prm.setString(58, cvth.Unicode2ASCII(StrS[56]));
                prm.setString(59, cvth.Unicode2ASCII(StrS[57]));
                prm.setString(60, cvth.Unicode2ASCII(StrS[58]));
                TempAmt = Double.parseDouble(StrS[59]);
                prm.setDouble(61, TempAmt);
                prm.setString(62, cvth.Unicode2ASCII(StrS[60]));
                prm.setString(63, cvth.Unicode2ASCII(StrS[61]));
                prm.setString(64, cvth.Unicode2ASCII(StrS[62]));
                TempAmt = Double.parseDouble(StrS[63]);
                prm.setDouble(65, TempAmt);
                TempAmt = Double.parseDouble(StrS[64]);
                prm.setDouble(66, TempAmt);
                prm.setString(67, cvth.Unicode2ASCII(StrS[65]));
                prm.setString(68, cvth.Unicode2ASCII(StrS[65]));
                prm.setString(69, cvth.Unicode2ASCII(StrS[67]));
                prm.setString(70, cvth.Unicode2ASCII(StrS[68]));
                prm.setString(71, cvth.Unicode2ASCII(StrS[69]));
                prm.setString(72, cvth.Unicode2ASCII(StrS[70]));
                prm.setString(73, cvth.Unicode2ASCII(StrS[71]));
                prm.setString(74, cvth.Unicode2ASCII(StrS[72]));
                TempAmt = Double.parseDouble(StrS[73]);
                prm.setDouble(75, TempAmt);
                prm.setString(76, cvth.Unicode2ASCII(StrS[74]));
                TempAmt = Double.parseDouble(StrS[75]);
                prm.setDouble(77, TempAmt);
                TempAmt = Double.parseDouble(StrS[76]);
                prm.setDouble(78, TempAmt);
                TempAmt = Double.parseDouble(StrS[77]);
                prm.setDouble(79, TempAmt);
                prm.setString(80, cvth.Unicode2ASCII(StrS[78]));
                prm.setString(81, cvth.Unicode2ASCII(StrS[79]));
                prm.setString(82, cvth.Unicode2ASCII(StrS[80]));
                prm.setString(83, cvth.Unicode2ASCII(StrS[81]));
                prm.setString(84, cvth.Unicode2ASCII(StrS[82]));
                prm.setString(85, cvth.Unicode2ASCII(StrS[83]));
                TempAmt = Double.parseDouble(StrS[84]);
                prm.setDouble(86, TempAmt);
                prm.setString(87, cvth.Unicode2ASCII(StrS[85]));
                prm.setString(88, cvth.Unicode2ASCII(StrS[86]));
                prm.setString(89, cvth.Unicode2ASCII(StrS[87]));
                TempAmt = Double.parseDouble(StrS[88]);
                prm.setDouble(90, TempAmt);
                TempAmt = Double.parseDouble(StrS[89]);
                prm.setDouble(91, TempAmt);
                prm.setString(92, cvth.Unicode2ASCII(StrS[90]));
                prm.setString(93, cvth.Unicode2ASCII(StrS[91]));
                TempAmt = Double.parseDouble(StrS[92]);
                prm.setDouble(94, TempAmt);
                prm.setString(95, Format.dateFmtReport.format(new Date()));
                //Version UD20130801
                prm.setString(96, cvth.Unicode2ASCII(StrS[93]));
                prm.setString(97, cvth.Unicode2ASCII(StrS[94]));
                prm.setString(98, cvth.Unicode2ASCII(StrS[95]));
                TempAmt = Double.parseDouble(StrS[96]);
                prm.setDouble(99, TempAmt);
                prm.setString(100, cvth.Unicode2ASCII(StrS[97]));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dtranlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from s_tran where s_bran='" + fBran + "' and s_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            String pname = StrS[11];
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into s_tran "
                        + "(s_bran,s_date,r_index,r_refno,r_table,r_date,r_time,macno,cashier,r_emp,r_plucode,"
                        + "r_pname,r_unit,r_group,r_status,r_normal,r_discount,r_service,r_stock,r_set,r_vat,r_type,"
                        + "r_etd,r_quan,r_price,r_total,r_prtype,r_prcode,r_prquan,r_prdisc,r_prbath,r_pramt,"
                        + "r_pradj,r_prcutype,r_prcucode,r_prcuquan,r_prcudisc,r_prcubath,r_prcuamt,r_prcuadj,"
                        + "r_redule,r_discbath,r_nettotal,r_kic,r_kicprint,r_refund,r_void,r_voiduser,r_voidtime,"
                        + "r_prchktype,r_prsubtype,r_prsubcode,r_prsubquan,r_prsubdisc,r_prsubbath,r_prsubamt,"
                        + "r_prsubadj,r_prchktype2,r_prtype2,r_prcode2,r_prquan2,r_prdisc2,r_prbath2,r_pramt2,"
                        + "r_pradj2,holdtable,holdmacno,holdcashier,holddate,holdtime,createdt) "
                        + "values (?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,  ?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));
                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));
                prm.setString(11, cvth.Unicode2ASCII(StrS[10]));
                prm.setString(12, cvth.Unicode2ASCII(StrS[11]));

                prm.setString(13, cvth.Unicode2ASCII(StrS[12]));
                prm.setString(14, cvth.Unicode2ASCII(StrS[13]));
                prm.setString(15, cvth.Unicode2ASCII(StrS[14]));
                prm.setString(16, cvth.Unicode2ASCII(StrS[15]));
                prm.setString(17, cvth.Unicode2ASCII(StrS[16]));
                prm.setString(18, cvth.Unicode2ASCII(StrS[17]));
                prm.setString(19, cvth.Unicode2ASCII(StrS[18]));
                prm.setString(20, cvth.Unicode2ASCII(StrS[19]));
                prm.setString(21, cvth.Unicode2ASCII(StrS[20]));
                prm.setString(22, cvth.Unicode2ASCII(StrS[21]));
                prm.setString(23, cvth.Unicode2ASCII(StrS[22]));

                TempAmt = Double.parseDouble(StrS[23]);
                prm.setDouble(24, TempAmt);
                TempAmt = Double.parseDouble(StrS[24]);
                prm.setDouble(25, TempAmt);
                TempAmt = Double.parseDouble(StrS[25]);
                prm.setDouble(26, TempAmt);

                prm.setString(27, cvth.Unicode2ASCII(StrS[26]));
                prm.setString(28, cvth.Unicode2ASCII(StrS[27]));
                TempAmt = Double.parseDouble(StrS[28]);
                prm.setDouble(29, TempAmt);
                TempAmt = Double.parseDouble(StrS[29]);
                prm.setDouble(30, TempAmt);
                TempAmt = Double.parseDouble(StrS[30]);
                prm.setDouble(31, TempAmt);
                TempAmt = Double.parseDouble(StrS[31]);
                prm.setDouble(32, TempAmt);
                TempAmt = Double.parseDouble(StrS[32]);
                prm.setDouble(33, TempAmt);

                prm.setString(34, cvth.Unicode2ASCII(StrS[33]));
                prm.setString(35, cvth.Unicode2ASCII(StrS[34]));
                TempAmt = Double.parseDouble(StrS[35]);
                prm.setDouble(36, TempAmt);
                TempAmt = Double.parseDouble(StrS[36]);
                prm.setDouble(37, TempAmt);
                TempAmt = Double.parseDouble(StrS[37]);
                prm.setDouble(38, TempAmt);
                TempAmt = Double.parseDouble(StrS[38]);
                prm.setDouble(39, TempAmt);
                TempAmt = Double.parseDouble(StrS[39]);
                prm.setDouble(40, TempAmt);

                TempAmt = Double.parseDouble(StrS[40]);
                prm.setDouble(41, TempAmt);
                TempAmt = Double.parseDouble(StrS[41]);
                prm.setDouble(42, TempAmt);
                TempAmt = Double.parseDouble(StrS[42]);
                prm.setDouble(43, TempAmt);

                prm.setString(44, cvth.Unicode2ASCII(StrS[43]));
                prm.setString(45, cvth.Unicode2ASCII(StrS[44]));
                prm.setString(46, cvth.Unicode2ASCII(StrS[45]));
                prm.setString(47, cvth.Unicode2ASCII(StrS[46]));
                prm.setString(48, cvth.Unicode2ASCII(StrS[47]));
                prm.setString(49, cvth.Unicode2ASCII(StrS[48]));
                prm.setString(50, cvth.Unicode2ASCII(StrS[49]));
                prm.setString(51, cvth.Unicode2ASCII(StrS[50]));
                prm.setString(52, cvth.Unicode2ASCII(StrS[51]));

                TempAmt = Double.parseDouble(StrS[52]);
                prm.setDouble(53, TempAmt);
                TempAmt = Double.parseDouble(StrS[53]);
                prm.setDouble(54, TempAmt);
                TempAmt = Double.parseDouble(StrS[54]);
                prm.setDouble(55, TempAmt);
                TempAmt = Double.parseDouble(StrS[55]);
                prm.setDouble(56, TempAmt);
                TempAmt = Double.parseDouble(StrS[56]);
                prm.setDouble(57, TempAmt);

                prm.setString(58, cvth.Unicode2ASCII(StrS[57]));
                prm.setString(59, cvth.Unicode2ASCII(StrS[58]));
                prm.setString(60, cvth.Unicode2ASCII(StrS[59]));
                TempAmt = Double.parseDouble(StrS[60]);
                prm.setDouble(61, TempAmt);
                TempAmt = Double.parseDouble(StrS[61]);
                prm.setDouble(62, TempAmt);
                TempAmt = Double.parseDouble(StrS[62]);
                prm.setDouble(63, TempAmt);
                TempAmt = Double.parseDouble(StrS[63]);
                prm.setDouble(64, TempAmt);
                TempAmt = Double.parseDouble(StrS[64]);
                prm.setDouble(65, TempAmt);

                prm.setString(66, cvth.Unicode2ASCII(StrS[65]));
                prm.setString(67, cvth.Unicode2ASCII(StrS[66]));
                prm.setString(68, cvth.Unicode2ASCII(StrS[67]));
                prm.setString(69, cvth.Unicode2ASCII(StrS[68]));
                prm.setString(70, cvth.Unicode2ASCII(StrS[69]));
                prm.setString(71, Format.dateFmtReport.format(new Date()));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }

        public void insertnew2(String StrS[], String fBran, Date fDate) {
            String pname = StrS[11];
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into s_tran "
                        + "(s_bran,s_date,r_index,r_refno,r_table,r_date,r_time,macno,cashier,r_emp,r_plucode,"
                        + "r_pname,r_unit,r_group,r_status,r_normal,r_discount,r_service,r_stock,r_set,r_vat,r_type,"
                        + "r_etd,r_quan,r_price,r_total,r_prtype,r_prcode,r_prquan,r_prdisc,r_prbath,r_pramt,"
                        + "r_pradj,r_prcutype,r_prcucode,r_prcuquan,r_prcudisc,r_prcubath,r_prcuamt,r_prcuadj,"
                        + "r_redule,r_discbath,r_nettotal,r_kic,r_kicprint,r_refund,r_void,r_voiduser,r_voidtime,"
                        + "r_prchktype,r_prsubtype,r_prsubcode,r_prsubquan,r_prsubdisc,r_prsubbath,r_prsubamt,"
                        + "r_prsubadj,r_prchktype2,r_prtype2,r_prcode2,r_prquan2,r_prdisc2,r_prbath2,r_pramt2,"
                        + "r_pradj2,holdtable,holdmacno,holdcashier,holddate,holdtime,createdt,reserveordertype,reserveorderid,reserveordercustomer) "
                        + "values (?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?,?,?,?,?,? ,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,  ?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));
                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));
                prm.setString(11, cvth.Unicode2ASCII(StrS[10]));
                prm.setString(12, cvth.Unicode2ASCII(StrS[11]));

                prm.setString(13, cvth.Unicode2ASCII(StrS[12]));
                prm.setString(14, cvth.Unicode2ASCII(StrS[13]));
                prm.setString(15, cvth.Unicode2ASCII(StrS[14]));
                prm.setString(16, cvth.Unicode2ASCII(StrS[15]));
                prm.setString(17, cvth.Unicode2ASCII(StrS[16]));
                prm.setString(18, cvth.Unicode2ASCII(StrS[17]));
                prm.setString(19, cvth.Unicode2ASCII(StrS[18]));
                prm.setString(20, cvth.Unicode2ASCII(StrS[19]));
                prm.setString(21, cvth.Unicode2ASCII(StrS[20]));
                prm.setString(22, cvth.Unicode2ASCII(StrS[21]));
                prm.setString(23, cvth.Unicode2ASCII(StrS[22]));

                TempAmt = Double.parseDouble(StrS[23]);
                prm.setDouble(24, TempAmt);
                TempAmt = Double.parseDouble(StrS[24]);
                prm.setDouble(25, TempAmt);
                TempAmt = Double.parseDouble(StrS[25]);
                prm.setDouble(26, TempAmt);

                prm.setString(27, cvth.Unicode2ASCII(StrS[26]));
                prm.setString(28, cvth.Unicode2ASCII(StrS[27]));
                TempAmt = Double.parseDouble(StrS[28]);
                prm.setDouble(29, TempAmt);
                TempAmt = Double.parseDouble(StrS[29]);
                prm.setDouble(30, TempAmt);
                TempAmt = Double.parseDouble(StrS[30]);
                prm.setDouble(31, TempAmt);
                TempAmt = Double.parseDouble(StrS[31]);
                prm.setDouble(32, TempAmt);
                TempAmt = Double.parseDouble(StrS[32]);
                prm.setDouble(33, TempAmt);

                prm.setString(34, cvth.Unicode2ASCII(StrS[33]));
                prm.setString(35, cvth.Unicode2ASCII(StrS[34]));
                TempAmt = Double.parseDouble(StrS[35]);
                prm.setDouble(36, TempAmt);
                TempAmt = Double.parseDouble(StrS[36]);
                prm.setDouble(37, TempAmt);
                TempAmt = Double.parseDouble(StrS[37]);
                prm.setDouble(38, TempAmt);
                TempAmt = Double.parseDouble(StrS[38]);
                prm.setDouble(39, TempAmt);
                TempAmt = Double.parseDouble(StrS[39]);
                prm.setDouble(40, TempAmt);

                TempAmt = Double.parseDouble(StrS[40]);
                prm.setDouble(41, TempAmt);
                TempAmt = Double.parseDouble(StrS[41]);
                prm.setDouble(42, TempAmt);
                TempAmt = Double.parseDouble(StrS[42]);
                prm.setDouble(43, TempAmt);

                prm.setString(44, cvth.Unicode2ASCII(StrS[43]));
                prm.setString(45, cvth.Unicode2ASCII(StrS[44]));
                prm.setString(46, cvth.Unicode2ASCII(StrS[45]));
                prm.setString(47, cvth.Unicode2ASCII(StrS[46]));
                prm.setString(48, cvth.Unicode2ASCII(StrS[47]));
                prm.setString(49, cvth.Unicode2ASCII(StrS[48]));
                prm.setString(50, cvth.Unicode2ASCII(StrS[49]));
                prm.setString(51, cvth.Unicode2ASCII(StrS[50]));
                prm.setString(52, cvth.Unicode2ASCII(StrS[51]));

                TempAmt = Double.parseDouble(StrS[52]);
                prm.setDouble(53, TempAmt);
                TempAmt = Double.parseDouble(StrS[53]);
                prm.setDouble(54, TempAmt);
                TempAmt = Double.parseDouble(StrS[54]);
                prm.setDouble(55, TempAmt);
                TempAmt = Double.parseDouble(StrS[55]);
                prm.setDouble(56, TempAmt);
                TempAmt = Double.parseDouble(StrS[56]);
                prm.setDouble(57, TempAmt);

                prm.setString(58, cvth.Unicode2ASCII(StrS[57]));
                prm.setString(59, cvth.Unicode2ASCII(StrS[58]));
                prm.setString(60, cvth.Unicode2ASCII(StrS[59]));
                TempAmt = Double.parseDouble(StrS[60]);
                prm.setDouble(61, TempAmt);
                TempAmt = Double.parseDouble(StrS[61]);
                prm.setDouble(62, TempAmt);
                TempAmt = Double.parseDouble(StrS[62]);
                prm.setDouble(63, TempAmt);
                TempAmt = Double.parseDouble(StrS[63]);
                prm.setDouble(64, TempAmt);
                TempAmt = Double.parseDouble(StrS[64]);
                prm.setDouble(65, TempAmt);

                prm.setString(66, cvth.Unicode2ASCII(StrS[65]));
                prm.setString(67, cvth.Unicode2ASCII(StrS[66]));
                prm.setString(68, cvth.Unicode2ASCII(StrS[67]));
                prm.setString(69, cvth.Unicode2ASCII(StrS[68]));
                prm.setString(70, cvth.Unicode2ASCII(StrS[69]));
                prm.setString(71, Format.dateFmtReport.format(new Date()));
                prm.setString(72, cvth.Unicode2ASCII(StrS[71]));
                prm.setString(73, cvth.Unicode2ASCII(StrS[72]));
                prm.setString(74, cvth.Unicode2ASCII(StrS[73]));

                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dtransetlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from s_transet where s_bran='" + fBran + "' and s_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double r_setqty = 0.0;
            if (StrS.length == 18) {
                r_setqty = Double.parseDouble(StrS[8]);
            } else {
                r_setqty = Double.parseDouble(StrS[18]);
            }
            String pname = StrS[11];
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into s_transet "
                        + "(s_bran,s_date,r_refno,r_macno,r_index,r_table,r_plucode,r_psubcode,r_qty,r_void,r_refund,"
                        + "r_que,r_price,r_amount,r_settotalamount,r_unittotalamount,r_setnetamount,r_unitnetamount,r_setqty) "
                        + "values (?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));
                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                TempAmt = Double.parseDouble(StrS[8]);
                prm.setDouble(9, TempAmt);
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));
                prm.setString(11, cvth.Unicode2ASCII(StrS[10]));
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(12, TempAmt);
                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);
                TempAmt = Double.parseDouble(StrS[13]);
                prm.setDouble(14, TempAmt);
                TempAmt = Double.parseDouble(StrS[14]);
                prm.setDouble(15, TempAmt);
                TempAmt = Double.parseDouble(StrS[15]);
                prm.setDouble(16, TempAmt);
                TempAmt = Double.parseDouble(StrS[16]);
                prm.setDouble(17, TempAmt);
                TempAmt = Double.parseDouble(StrS[17]);
                prm.setDouble(18, TempAmt);
                prm.setDouble(19, r_setqty);
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }
        }
    }

    class dvoidlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from s_void where s_bran='" + fBran + "' and s_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into s_void "
                        + "(s_bran,s_date,ref_no,voiduser,voidtime,pindex,macno,cashier,time,vtable,date,"
                        + "pcode,qty,amt,createdt) "
                        + "values (?,?,?,?,?,?,?,?,?,?,  ?,?,?,?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));
                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));
                prm.setString(11, cvth.Unicode2ASCII(StrS[10]));
                prm.setString(12, cvth.Unicode2ASCII(StrS[11]));
                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);
                TempAmt = Double.parseDouble(StrS[13]);
                prm.setDouble(14, TempAmt);
                prm.setString(15, Format.dateFmtReport.format(new Date()));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dvatlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from s_vat where s_bran='" + fBran + "' and tdate='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into s_vat "
                        + "(s_bran,tdate,terminal,macno,stbill,spbill,netvat,netnonvat,vat,"
                        + "createdt) "
                        + "values (?,?,?,?,?,?,?,?,?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));
                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(7, TempAmt);
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(8, TempAmt);
                TempAmt = Double.parseDouble(StrS[8]);
                prm.setDouble(9, TempAmt);
                prm.setString(10, Format.dateFmtReport.format(new Date()));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dBomlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from s_bom where s_bran='" + fBran + "' and s_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into s_bom "
                        + "(s_bran,s_date,pdept,pcode,plcode,pqty,plqty) "
                        + "values (?,?,?,?,?,?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(6, TempAmt);
                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(7, TempAmt);
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dscreditlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from s_credit where s_bran='" + fBran + "' and s_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into s_credit "
                        + "(s_bran,s_date,b_refno,b_macno,b_cashier,b_crcode1,b_crcardno1,b_appcode1,"
                        + "b_crcharge1,b_crchargeamt1,b_cramt1,b_crbank,b_crcardamt,b_crcurpoint,"
                        + "b_crsumpoint,b_crpurseamt,createdt) "
                        + "values (?,?,?,?,?,?,ENCODE(?,'snpfood'),?,?,?, ?,?,?,?,?,?,? ) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                //String CrCard = "ENCODE(" + StrS[6] + ",'snpfood') ";
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));
                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));

                TempAmt = Double.parseDouble(StrS[9]);
                prm.setDouble(10, TempAmt);
                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                prm.setString(12, StrS[11]);
                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);
                TempAmt = Double.parseDouble(StrS[13]);
                prm.setDouble(14, TempAmt);
                TempAmt = Double.parseDouble(StrS[14]);
                prm.setDouble(15, TempAmt);
                TempAmt = Double.parseDouble(StrS[15]);
                prm.setDouble(16, TempAmt);
                prm.setString(17, Format.dateFmtReport.format(new Date()));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dscouponlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from s_cupon where s_bran='" + fBran + "' and s_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into s_cupon "
                        + "(s_bran,s_date,ref_no,cucode,macno,cashier,cuquan,cuamt,refund,sms_code,m_code,"
                        + "createdt) "
                        + "values (?,?,?,?,?,?,?,?,?,?, ?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));
                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(7, TempAmt);
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(8, TempAmt);
                if (StrS[8].equals("null")) {
                    prm.setString(9, cvth.Unicode2ASCII(""));
                } else {
                    prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                }
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));
                prm.setString(11, cvth.Unicode2ASCII(StrS[10]));
                prm.setString(12, Format.dateFmtReport.format(new Date()));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class ProductCusomer {

        public void SeekCustomer(String StrS[]) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from customer where taxid='" + cvth.Unicode2ASCII(StrS[14]) + "' and branchno='" + cvth.Unicode2ASCII(StrS[13]) + "'";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    Insertcustomer(StrS);
                } else if (SqlDateFmt.format(rec.getDate("lastupdate")).compareTo(StrS[14]) < 0) {
                    Updatecustomer(StrS);
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void Insertcustomer(String StrS[]) {

            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into customer (sp_code,sp_desc,sp_addr1,sp_addr2,sp_zip,"
                        + "tel,fax,contack,remark,remark2,email,headoffice,branchno,taxid,lastupdate) "
                        + "values (?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?)";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[5]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(7, cvth.Unicode2ASCII(StrS[7]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(9, cvth.Unicode2ASCII(StrS[9]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[10]));
                prm.setString(11, cvth.Unicode2ASCII(StrS[11]));
                prm.setString(12, cvth.Unicode2ASCII(StrS[12]));
                prm.setString(13, cvth.Unicode2ASCII(StrS[13]));
                prm.setString(14, cvth.Unicode2ASCII(StrS[14]));
                String Lst = "";
                if (StrS[15].equals("2000-01-01")) {
                    Lst = "2001-01-01";
                } else {
                    Lst = StrS[15];
                }
                prm.setString(15, cvth.Unicode2ASCII(Lst));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }
        }

        public void Updatecustomer(String StrS[]) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "update customer set sp_desc=?,sp_addr1=?,sp_addr2=?,sp_zip=?,tel=?,"
                        + "fax=?,contack=?,remark=?,remark2=?,email=?,headoffice=?,lastupdate=?"
                        + "where taxid=? and branchno=?";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);

                prm.setString(1, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[5]));  //StrS[5]
                prm.setString(5, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[7]));
                prm.setString(7, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[9]));
                prm.setString(9, cvth.Unicode2ASCII(StrS[10]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[11]));
                prm.setString(11, cvth.Unicode2ASCII(StrS[12]));
                prm.setString(12, cvth.Unicode2ASCII(StrS[15]));
                prm.setString(13, cvth.Unicode2ASCII(StrS[14]));
                prm.setString(14, cvth.Unicode2ASCII(StrS[13]));

                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    } //end class CreditFile

    class dspointlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from s_point where s_bran='" + fBran + "' and s_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into s_point "
                        + "(s_bran,s_date,saledate,receipt,cucode,numberofright,saletime,cashier,macno,refno,salequan,member) "
                        + "values (?,?,?,?,?,?,?,?,?,?, ?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(6, TempAmt);
                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));
                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                prm.setString(12, cvth.Unicode2ASCII(StrS[11]));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dsecouponlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from s_ecupon where s_bran='" + fBran + "' and s_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into s_ecupon "
                        + "(s_bran,s_date,r_refno,terminal,cashier,time,cucode,cuquan,cuamt) "
                        + "values (?,?,?,?,?,?,?,?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));
                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(8, TempAmt);
                TempAmt = Double.parseDouble(StrS[8]);
                prm.setDouble(9, TempAmt);
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dadjstocklinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from adjstock where s_bran='" + fBran + "' and r_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into adjstock "
                        + "(s_bran,r_date,r_no,r_que,r_pcode,r_onhand,r_inhand,r_post,r_adj,r_price,r_amount,"
                        + "r_remark,r_user,r_time,r_entrydate,createdt) "
                        + "values (?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                TempAmt = Double.parseDouble(StrS[3]);
                prm.setDouble(4, TempAmt);

                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(6, TempAmt);
                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(7, TempAmt);

                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                TempAmt = Double.parseDouble(StrS[8]);
                prm.setDouble(9, TempAmt);
                TempAmt = Double.parseDouble(StrS[9]);
                prm.setDouble(10, TempAmt);
                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);

                prm.setString(12, cvth.Unicode2ASCII(StrS[11]));
                prm.setString(13, cvth.Unicode2ASCII(StrS[12]));
                prm.setString(14, cvth.Unicode2ASCII(StrS[13]));
                prm.setString(15, cvth.Unicode2ASCII(StrS[14]));
                prm.setString(16, Format.dateFmtReport.format(new Date()));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dhadjstocklinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from hadjstock where s_bran='" + fBran + "' and r_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into hadjstock "
                        + "(s_bran,r_no,r_date,r_remark,r_stk,r_total,r_user,r_post,r_userpost,"
                        + "r_postdate,r_posttime,createdt) "
                        + "values (?,?,?,?,?,?,?,?,?,?, ?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(6, TempAmt);

                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));
                prm.setString(11, cvth.Unicode2ASCII(StrS[10]));
                prm.setString(12, Format.dateFmtReport.format(new Date()));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dtraninlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from tranin where s_bran='" + fBran + "' and r_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            String freeze = "N";
            String saletype = "T";
            if (StrS.length > 16) {
                saletype = StrS[16];
            }
            if (StrS.length > 17) {
                freeze = StrS[17];
            }
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into tranin "
                        + "(s_bran,r_date,r_no,r_que,r_pcode,r_stock,r_pack,r_qty,r_post,r_unit,r_cost,r_amount,"
                        + "r_totalqty,r_user,r_time,r_entrydate,createdt,saletype,freeze) "
                        + "values (?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                TempAmt = Double.parseDouble(StrS[3]);
                prm.setDouble(4, TempAmt);

                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));

                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(7, TempAmt);
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(8, TempAmt);

                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));

                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(12, TempAmt);
                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);

                prm.setString(14, cvth.Unicode2ASCII(StrS[13]));
                prm.setString(15, cvth.Unicode2ASCII(StrS[14]));
                prm.setString(16, cvth.Unicode2ASCII(StrS[15]));
                prm.setString(17, Format.dateFmtReport.format(new Date()));
                prm.setString(18, cvth.Unicode2ASCII(saletype));
                prm.setString(19, cvth.Unicode2ASCII(freeze));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dhtraninlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from htranin where s_bran='" + fBran + "' and r_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into htranin "
                        + "(s_bran,r_no,r_date,r_remark,r_bran,r_total,r_user,r_post,r_userpost,"
                        + "r_postdate,r_posttime,createdt) "
                        + "values (?,?,?,?,?,?,?,?,?,?, ?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(6, TempAmt);

                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));
                prm.setString(11, cvth.Unicode2ASCII(StrS[10]));
                prm.setString(12, Format.dateFmtReport.format(new Date()));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dtranoutlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from tranout where s_bran='" + fBran + "' and r_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            String freeze = "N";
            String saletype = "T";
            if (StrS.length > 16) {
                saletype = StrS[16];
            }
            if (StrS.length > 17) {
                freeze = StrS[17];
            }
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into tranout "
                        + "(s_bran,r_date,r_no,r_que,r_pcode,r_stock,r_pack,r_qty,r_post,r_unit,r_cost,r_amount,"
                        + "r_totalqty,r_user,r_time,r_entrydate,createdt,saletype,freeze) "
                        + "values (?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                TempAmt = Double.parseDouble(StrS[3]);
                prm.setDouble(4, TempAmt);

                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));

                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(7, TempAmt);
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(8, TempAmt);

                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));

                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(12, TempAmt);
                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);

                prm.setString(14, cvth.Unicode2ASCII(StrS[13]));
                prm.setString(15, cvth.Unicode2ASCII(StrS[14]));
                prm.setString(16, cvth.Unicode2ASCII(StrS[15]));
                prm.setString(17, Format.dateFmtReport.format(new Date()));
                prm.setString(18, saletype);
                prm.setString(19, freeze);
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dprolosttlinux {

        public boolean seekprolost(String fBran, String r_no, String r_que) {
            boolean retval = false;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from prolost where s_bran='" + fBran + "' and r_no='" + r_no + "' and r_que=" + r_que + "' ";
                ResultSet rs = stmt.executeQuery(SqlQuery);
                rs.first();
                if (rs.getRow() > 0) {
                    retval = true;
                }
            } catch (SQLException e) {
                processStop = true;
            }
            return retval;
        }

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from prolost where s_bran='" + fBran + "' and r_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into prolost "
                        + "(s_bran,r_date,r_no,r_que,r_pcode,r_stock,r_pack,r_qty,r_post,r_unit,r_cost,r_amount,"
                        + "r_totalqty,r_user,r_time,r_entrydate,saletype) "
                        + "values (?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                TempAmt = Double.parseDouble(StrS[3]);
                prm.setDouble(4, TempAmt);

                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));

                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(7, TempAmt);
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(8, TempAmt);

                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));

                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(12, TempAmt);
                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);

                prm.setString(14, cvth.Unicode2ASCII(StrS[13]));
                prm.setString(15, cvth.Unicode2ASCII(StrS[14]));
                prm.setString(16, cvth.Unicode2ASCII(StrS[15]));
                prm.setString(17, cvth.Unicode2ASCII(StrS[16]));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dhtranoutlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from htranout where s_bran='" + fBran + "' and r_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into htranout "
                        + "(s_bran,r_no,r_date,r_remark,r_bran,r_total,r_user,r_post,r_userpost,"
                        + "r_postdate,r_posttime,createdt) "
                        + "values (?,?,?,?,?,?,?,?,?,?, ?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(6, TempAmt);

                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));
                prm.setString(11, cvth.Unicode2ASCII(StrS[10]));
                prm.setString(12, Format.dateFmtReport.format(new Date()));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dhprolostlinux {

        public boolean seekprolost(String fBran, String r_no) {
            boolean retval = false;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from hprolost where s_bran='" + fBran + "' and r_no='" + r_no + "' ";
                ResultSet rs = stmt.executeQuery(SqlQuery);
                rs.first();
                if (rs.getRow() > 0) {
                    retval = true;
                }
            } catch (SQLException e) {
                processStop = true;
            }
            return retval;
        }

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from hprolost where s_bran='" + fBran + "' and r_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into hprolost "
                        + "(s_bran,r_no,r_date,r_remark,r_total,r_user,r_post,r_userpost,"
                        + "r_postdate,r_posttime) "
                        + "values (?,?,?,?,?,?,?,?,?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                TempAmt = Double.parseDouble(StrS[4]);
                prm.setDouble(5, TempAmt);

                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));
                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class dtarlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from s_tar where s_bran='" + fBran + "' and s_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into s_tar "
                        + "(s_bran,ref_no,s_date,arcode,billno,billdate,amount,fat,terminal,"
                        + "cashier,createdt) "
                        + "values (?,?,?,?,?,?,?,?,?,?, ?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));
                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(7, TempAmt);

                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));
                prm.setString(11, Format.dateFmtReport.format(new Date()));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class daccrlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from accr where s_bran='" + fBran + "' and ardate='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into accr "
                        + "(s_bran,arno,ardate,arcode,artotal,arvat,ardisc,arvatmon,araccno,armark,"
                        + "arnet,aramount,arcr,ardue,arsale,arremark,arpaytype,ardocbill,ardocpay,arbank,"
                        + "archqno,archqdate,aramtpay,aramtcr,arbdate,arpdate,arflage,arinvno,arbran,arbranpay,"
                        + "aruserpay,createdt) "
                        + "values (?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?, ?,? ) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));

                TempAmt = Double.parseDouble(StrS[4]);
                prm.setDouble(5, TempAmt);
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(6, TempAmt);
                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(7, TempAmt);
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(8, TempAmt);

                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));

                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(12, TempAmt);
                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);

                prm.setString(14, cvth.Unicode2ASCII(StrS[13]));
                prm.setString(15, cvth.Unicode2ASCII(StrS[14]));
                prm.setString(16, cvth.Unicode2ASCII(StrS[15]));
                prm.setString(17, cvth.Unicode2ASCII(StrS[16]));
                prm.setString(18, cvth.Unicode2ASCII(StrS[17]));
                prm.setString(19, cvth.Unicode2ASCII(StrS[18]));
                prm.setString(20, cvth.Unicode2ASCII(StrS[19]));
                prm.setString(21, cvth.Unicode2ASCII(StrS[20]));
                prm.setString(22, cvth.Unicode2ASCII(StrS[21]));

                TempAmt = Double.parseDouble(StrS[22]);
                prm.setDouble(23, TempAmt);
                TempAmt = Double.parseDouble(StrS[23]);
                prm.setDouble(24, TempAmt);
                prm.setString(25, cvth.Unicode2ASCII(StrS[24]));
                prm.setString(26, cvth.Unicode2ASCII(StrS[25]));
                prm.setString(27, cvth.Unicode2ASCII(StrS[26]));
                prm.setString(28, cvth.Unicode2ASCII(StrS[27]));
                prm.setString(29, cvth.Unicode2ASCII(StrS[28]));
                prm.setString(30, cvth.Unicode2ASCII(StrS[29]));
                prm.setString(31, cvth.Unicode2ASCII(StrS[30]));

                prm.setString(32, Format.dateFmtReport.format(new Date()));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class ddeptoutlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from deptout_sap where s_bran='" + fBran + "' and r_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            String freeze = "N";
            if (StrS.length >= 18) {
                freeze = StrS[17];
            }
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into deptout_sap "
                        + "(s_bran,r_date,r_no,r_que,r_pcode,r_stock,r_pack,r_qty,r_post,r_unit,r_cost,r_amount,"
                        + "r_totalqty,r_user,r_time,r_entrydate,saletype,freeze) "
                        + "values (?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                TempAmt = Double.parseDouble(StrS[3]);
                prm.setDouble(4, TempAmt);

                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));

                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(7, TempAmt);
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(8, TempAmt);

                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));

                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(12, TempAmt);
                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);

                prm.setString(14, cvth.Unicode2ASCII(StrS[13]));
                prm.setString(15, cvth.Unicode2ASCII(StrS[14]));
                prm.setString(16, cvth.Unicode2ASCII(StrS[15]));
                prm.setString(17, cvth.Unicode2ASCII(StrS[16]));
                prm.setString(18, cvth.Unicode2ASCII(freeze));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class ddeptouthlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from deptouth_sap where s_bran='" + fBran + "' and r_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into deptouth_sap "
                        + "(s_bran,r_no,r_date,r_remark,r_bran,r_total,r_user,r_post,r_postuser,"
                        + "r_postdate,r_posttime,r_doctype,r_docdescription,r_dept) "
                        + "values (?,?,?,?,?,?,?,?,?,?, ?,?,?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(6, TempAmt);

                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));
                prm.setString(11, cvth.Unicode2ASCII(StrS[10]));
                prm.setString(12, cvth.Unicode2ASCII(StrS[11]));
                prm.setString(13, cvth.Unicode2ASCII(StrS[12]));
                prm.setString(14, cvth.Unicode2ASCII(StrS[13]));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class ddeptinlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from deptin_sap where s_bran='" + fBran + "' and r_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            String freeze = "N";
            if (StrS.length >= 18) {
                freeze = StrS[17];
            }
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into deptin_sap "
                        + "(s_bran,r_date,r_no,r_que,r_pcode,r_stock,r_pack,r_qty,r_post,r_unit,r_cost,r_amount,"
                        + "r_totalqty,r_user,r_time,r_entrydate,saletype,freeze) "
                        + "values (?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                TempAmt = Double.parseDouble(StrS[3]);
                prm.setDouble(4, TempAmt);

                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                prm.setString(6, cvth.Unicode2ASCII(StrS[5]));

                TempAmt = Double.parseDouble(StrS[6]);
                prm.setDouble(7, TempAmt);
                TempAmt = Double.parseDouble(StrS[7]);
                prm.setDouble(8, TempAmt);

                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));

                TempAmt = Double.parseDouble(StrS[10]);
                prm.setDouble(11, TempAmt);
                TempAmt = Double.parseDouble(StrS[11]);
                prm.setDouble(12, TempAmt);
                TempAmt = Double.parseDouble(StrS[12]);
                prm.setDouble(13, TempAmt);

                prm.setString(14, cvth.Unicode2ASCII(StrS[13]));
                prm.setString(15, cvth.Unicode2ASCII(StrS[14]));
                prm.setString(16, cvth.Unicode2ASCII(StrS[15]));
                prm.setString(17, cvth.Unicode2ASCII(StrS[16]));
                prm.setString(18, cvth.Unicode2ASCII(freeze));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }

    class ddeptinhlinux {

        public void clearold(String fBran, Date fDate) {
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "delete from deptinh_sap where s_bran='" + fBran + "' and r_date='" + Format.dateFmtSql.format(fDate) + "'";
                stmt.executeUpdate(SqlQuery);
                stmt.close();
            } catch (SQLException e) {
                processStop = true;
            }
        }

        public void insertnew(String StrS[], String fBran, Date fDate) {
            double TempAmt = 0.0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "insert into deptinh_sap "
                        + "(s_bran,r_no,r_date,r_remark,r_bran,r_total,r_user,r_post,r_postuser,"
                        + "r_postdate,r_posttime,r_doctype,r_docdescription,r_dept) "
                        + "values (?,?,?,?,?,?,?,?,?,?, ?,?,?,?) ";
                PreparedStatement prm = (PreparedStatement) dbUtility.con.prepareStatement(SqlQuery);
                prm.setString(1, cvth.Unicode2ASCII(StrS[0]));
                prm.setString(2, cvth.Unicode2ASCII(StrS[1]));
                prm.setString(3, cvth.Unicode2ASCII(StrS[2]));
                prm.setString(4, cvth.Unicode2ASCII(StrS[3]));
                prm.setString(5, cvth.Unicode2ASCII(StrS[4]));
                TempAmt = Double.parseDouble(StrS[5]);
                prm.setDouble(6, TempAmt);

                prm.setString(7, cvth.Unicode2ASCII(StrS[6]));
                prm.setString(8, cvth.Unicode2ASCII(StrS[7]));
                prm.setString(9, cvth.Unicode2ASCII(StrS[8]));
                prm.setString(10, cvth.Unicode2ASCII(StrS[9]));
                prm.setString(11, cvth.Unicode2ASCII(StrS[10]));
                prm.setString(12, cvth.Unicode2ASCII(StrS[11]));
                prm.setString(13, cvth.Unicode2ASCII(StrS[12]));
                prm.setString(14, cvth.Unicode2ASCII(StrS[13]));
                prm.executeUpdate();
                prm.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
                processStop = true;
            }

        }
    }
}
