/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package masterfile;

import dbutility.dbUtility;
import directory_utility.DirectoryUtility;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import ping.interfaceSAP.browseMasterSAP.listDataNoMap;
import ping.interfaceSAP.entity.article;
import ping.interfaceSAP.entity.sap_mastercode_distype;
import ping.interfaceSAP.entity.sap_mastercode_inout;
import ping.interfaceSAP.entity.site;
import ping.interfaceSAP.showMessage;
import ping.interfaceSAP.utilitySAP;
import system.os.utility.ClassPath;
import utilititiesfunction.PUtility;
import utilititiesfunction.ThaiUtilities;
import utilititiesfunction.UserLogin;
import write_to_text.TextWriter;
import zip_utility.ZipUnzip;

/**
 *
 * @author user
 */
public class senddatatobranch2 extends javax.swing.JFrame {

    article ar = new article();
    site si = new site();
    utilitySAP us = new utilitySAP();
    ThaiUtilities cvth = new ThaiUtilities();
    public static String OS = "";
    dbUtility db = new dbUtility();
    private Statement stmt;
    private boolean isProcess;
    public boolean isProcessOK;
    String TempPath = "";
    String FileCharset = "";
    String DataZipPath = "";
    String PathConvert = "";
    DecimalFormat DecFmt = new DecimalFormat("#########0.00");
    DecimalFormat DecFmt3 = new DecimalFormat("#########0.000");
    DecimalFormat IntFmt = new DecimalFormat("#######0");
    SimpleDateFormat SqlDateFmt = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
    SimpleDateFormat SqlDateTimeFmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.ENGLISH);

    /**
     * Creates new form senddatatobranch
     */
    public senddatatobranch2() {
        initComponents();
        checkuserconfig();
        isProcess = false;
        db.dbconnect();
        ClassPath cp = new ClassPath();
        cp.ClassPath();
        DataZipPath = ClassPath.backuppath + "/tobranch";
        TempPath = ClassPath.PathTemp;
        PathConvert = ClassPath.PathConvert;
        OS = System.getProperty("os.name").toLowerCase();
        if (OS.equalsIgnoreCase("linux")) {
            FileCharset = "TIS-620";
        } else {
            FileCharset = "UTF-8";
        }
        loadbranchgroup();
        fromactivate();
        ClearMsg();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        cmbgroup = new javax.swing.JComboBox();
        cbLinux = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        btnProcess = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        cbCredit = new javax.swing.JCheckBox();
        cbCupon = new javax.swing.JCheckBox();
        cbBank = new javax.swing.JCheckBox();
        cbPromotion = new javax.swing.JCheckBox();
        cbGroup = new javax.swing.JCheckBox();
        cbVender = new javax.swing.JCheckBox();
        cbProduct = new javax.swing.JCheckBox();
        cbBranch = new javax.swing.JCheckBox();
        cbPosconfig = new javax.swing.JCheckBox();
        cbUser = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        cbMenu = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        cbEff = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        cbCharge = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        cbpoint = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        cbestamp = new javax.swing.JCheckBox();
        jLabel17 = new javax.swing.JLabel();
        cbSAP = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        msgCredit = new javax.swing.JLabel();
        msgCoupon = new javax.swing.JLabel();
        msgBank = new javax.swing.JLabel();
        msgPromotion = new javax.swing.JLabel();
        msgGroup = new javax.swing.JLabel();
        msgVender = new javax.swing.JLabel();
        msgProduct = new javax.swing.JLabel();
        msgBranch = new javax.swing.JLabel();
        msgPosconfig = new javax.swing.JLabel();
        msgUser = new javax.swing.JLabel();
        msgMenu = new javax.swing.JLabel();
        msgEff = new javax.swing.JLabel();
        msgCharge = new javax.swing.JLabel();
        msgpoint = new javax.swing.JLabel();
        msgestamp = new javax.swing.JLabel();
        msgSAP = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jPanel8 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 4, 4, new java.awt.Color(24, 14, 14)));
        jPanel1.setToolTipText("");

        jLabel1.setFont(new java.awt.Font("Norasi", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(223, 27, 27));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("โปรแกรมสร้างไฟล์ข้อมูล Master File  ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 975, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "เลือกกลุ่มสาขาที่ต้องการ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Norasi", 0, 14))); // NOI18N

        cmbgroup.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        cmbgroup.setMaximumRowCount(20);
        cmbgroup.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbLinux.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        cbLinux.setText("For POS Linux");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(cbLinux, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(cmbgroup, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(cmbgroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(cbLinux)
                .addGap(32, 32, 32))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        btnProcess.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btnProcess.setText("ประมวลผล");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btnExit.setText("ออก (Exit)");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProcess)
                    .addComponent(btnExit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(9, 9, 9))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(227, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cbCredit.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        cbCredit.setText("แฟ้มข้อมูลบัตรเครดิต");
        cbCredit.setEnabled(false);
        cbCredit.setFocusable(false);
        cbCredit.setRequestFocusEnabled(false);
        cbCredit.setVerifyInputWhenFocusTarget(false);

        cbCupon.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        cbCupon.setText("แฟ้มข้อมูลบัตรตูปองพิเศษ");
        cbCupon.setEnabled(false);
        cbCupon.setFocusable(false);
        cbCupon.setRequestFocusEnabled(false);

        cbBank.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        cbBank.setText("แฟ้มข้อมูลธนาคาร");
        cbBank.setEnabled(false);
        cbBank.setFocusable(false);
        cbBank.setRequestFocusEnabled(false);

        cbPromotion.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        cbPromotion.setText("แฟ้มข้อมูลโปรโมชั่น");
        cbPromotion.setEnabled(false);
        cbPromotion.setFocusable(false);
        cbPromotion.setRequestFocusEnabled(false);

        cbGroup.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        cbGroup.setText("แฟ้มข้อมูลแผนกสินค้า");
        cbGroup.setEnabled(false);
        cbGroup.setFocusable(false);
        cbGroup.setRequestFocusEnabled(false);

        cbVender.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        cbVender.setText("แฟ้มข้อมูลผู้จัดจำหน่าย");
        cbVender.setEnabled(false);
        cbVender.setFocusable(false);
        cbVender.setRequestFocusEnabled(false);

        cbProduct.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        cbProduct.setText("แฟ้มข้อมูลสินค้า");
        cbProduct.setEnabled(false);
        cbProduct.setFocusable(false);
        cbProduct.setRequestFocusEnabled(false);

        cbBranch.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        cbBranch.setText("แฟ้มข้อมูลรหัสสาขา");
        cbBranch.setEnabled(false);
        cbBranch.setFocusable(false);
        cbBranch.setRequestFocusEnabled(false);

        cbPosconfig.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        cbPosconfig.setText("แฟ้มข้อมูลค่าเริ่มต้นระบบ");
        cbPosconfig.setEnabled(false);
        cbPosconfig.setFocusable(false);
        cbPosconfig.setRequestFocusEnabled(false);

        cbUser.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        cbUser.setText("แฟ้มข้อมูลรหัสพนักงาน");
        cbUser.setEnabled(false);
        cbUser.setFocusable(false);
        cbUser.setRequestFocusEnabled(false);

        jLabel2.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jLabel2.setText("แฟ้มข้อมูลบัตรเครดิต");

        jLabel3.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jLabel3.setText("แฟ้มข้อมูลบัตรตูปองพิเศษ");

        jLabel4.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jLabel4.setText("แฟ้มข้อมูลธนาคาร");

        jLabel5.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jLabel5.setText("แฟ้มข้อมูลโปรโมชั่น");

        jLabel6.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jLabel6.setText("แฟ้มข้อมูลแผนกสินค้า");

        jLabel7.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jLabel7.setText("แฟ้มข้อมูลผู้จัดจำหน่าย");

        jLabel8.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jLabel8.setText("แฟ้มข้อมูลสินค้า");

        jLabel9.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jLabel9.setText("แฟ้มข้อมูลรหัสสาขา");

        jLabel10.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jLabel10.setText("แฟ้มข้อมูลค่าเริ่มต้นระบบ");

        jLabel11.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jLabel11.setText("แฟ้มข้อมูลรหัสพนักงาน");

        cbMenu.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        cbMenu.setText("แฟ้มข้อมูลรหัสพนักงาน");
        cbMenu.setEnabled(false);
        cbMenu.setFocusable(false);
        cbMenu.setRequestFocusEnabled(false);

        jLabel12.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jLabel12.setText("แฟ้มข้อมูลเล่มเมนู");

        cbEff.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        cbEff.setText("แฟ้มข้อมูลรหัสพนักงาน");
        cbEff.setEnabled(false);
        cbEff.setFocusable(false);
        cbEff.setRequestFocusEnabled(false);

        jLabel13.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jLabel13.setText("แฟ้มข้อมูลการปรับราคาล่วงหน้า");

        cbCharge.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        cbCharge.setText("แฟ้มข้อมูลรหัสพนักงาน");
        cbCharge.setEnabled(false);
        cbCharge.setFocusable(false);
        cbCharge.setRequestFocusEnabled(false);

        jLabel14.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jLabel14.setText("แฟ้มข้อมูลระบบชาร์จ");

        cbpoint.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        cbpoint.setText("แฟ้มข้อมูลรหัสพนักงาน");
        cbpoint.setEnabled(false);
        cbpoint.setFocusable(false);
        cbpoint.setRequestFocusEnabled(false);

        jLabel15.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jLabel15.setText("แฟ้มข้อมูลโปรโมชั่นรับสิทธ์ชิงรางวัล");

        jLabel16.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jLabel16.setText("แฟ้มข้อมูลโปรโมชั่น E-Stamp");

        cbestamp.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        cbestamp.setText("แฟ้มข้อมูลรหัสพนักงาน");
        cbestamp.setEnabled(false);
        cbestamp.setFocusable(false);
        cbestamp.setRequestFocusEnabled(false);

        jLabel17.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jLabel17.setText("แฟ้มข้อมูล MASTER SAP");

        cbSAP.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        cbSAP.setText("แฟ้มข้อมูลรหัสพนักงาน");
        cbSAP.setEnabled(false);
        cbSAP.setFocusable(false);
        cbSAP.setRequestFocusEnabled(false);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(cbCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(cbCupon, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(cbBank, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(cbPromotion, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(cbGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(cbVender, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(cbProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(cbBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(cbPosconfig, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(cbUser, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(cbMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(cbEff, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(cbCharge, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(cbpoint, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(cbestamp, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(cbSAP, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbCredit)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbCupon)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbBank)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbPromotion)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbGroup)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbVender)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbProduct)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbBranch)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbPosconfig)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbUser)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbMenu)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbEff)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbCharge)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbpoint)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbestamp)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbSAP)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        msgCredit.setBackground(new java.awt.Color(163, 218, 224));
        msgCredit.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        msgCredit.setText("  จำนวนรายการ Update 00000 รายการ");
        msgCredit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        msgCredit.setMaximumSize(new java.awt.Dimension(50, 30));
        msgCredit.setMinimumSize(new java.awt.Dimension(50, 30));
        msgCredit.setOpaque(true);
        msgCredit.setPreferredSize(new java.awt.Dimension(50, 30));

        msgCoupon.setBackground(new java.awt.Color(163, 218, 224));
        msgCoupon.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        msgCoupon.setText("  จำนวนรายการ Update 00000 รายการ");
        msgCoupon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        msgCoupon.setMaximumSize(new java.awt.Dimension(50, 30));
        msgCoupon.setMinimumSize(new java.awt.Dimension(50, 30));
        msgCoupon.setOpaque(true);
        msgCoupon.setPreferredSize(new java.awt.Dimension(50, 30));

        msgBank.setBackground(new java.awt.Color(163, 218, 224));
        msgBank.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        msgBank.setText("  จำนวนรายการ Update 00000 รายการ");
        msgBank.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        msgBank.setMaximumSize(new java.awt.Dimension(50, 30));
        msgBank.setMinimumSize(new java.awt.Dimension(50, 30));
        msgBank.setOpaque(true);
        msgBank.setPreferredSize(new java.awt.Dimension(50, 30));

        msgPromotion.setBackground(new java.awt.Color(163, 218, 224));
        msgPromotion.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        msgPromotion.setText("  จำนวนรายการ Update 00000 รายการ");
        msgPromotion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        msgPromotion.setMaximumSize(new java.awt.Dimension(50, 30));
        msgPromotion.setMinimumSize(new java.awt.Dimension(50, 30));
        msgPromotion.setOpaque(true);
        msgPromotion.setPreferredSize(new java.awt.Dimension(50, 30));

        msgGroup.setBackground(new java.awt.Color(163, 218, 224));
        msgGroup.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        msgGroup.setText("  จำนวนรายการ Update 00000 รายการ");
        msgGroup.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        msgGroup.setMaximumSize(new java.awt.Dimension(50, 30));
        msgGroup.setMinimumSize(new java.awt.Dimension(50, 30));
        msgGroup.setOpaque(true);
        msgGroup.setPreferredSize(new java.awt.Dimension(50, 30));

        msgVender.setBackground(new java.awt.Color(163, 218, 224));
        msgVender.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        msgVender.setText("  จำนวนรายการ Update 00000 รายการ");
        msgVender.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        msgVender.setMaximumSize(new java.awt.Dimension(50, 30));
        msgVender.setMinimumSize(new java.awt.Dimension(50, 30));
        msgVender.setOpaque(true);
        msgVender.setPreferredSize(new java.awt.Dimension(50, 30));

        msgProduct.setBackground(new java.awt.Color(163, 218, 224));
        msgProduct.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        msgProduct.setText("  จำนวนรายการ Update 00000 รายการ");
        msgProduct.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        msgProduct.setMaximumSize(new java.awt.Dimension(50, 30));
        msgProduct.setMinimumSize(new java.awt.Dimension(50, 30));
        msgProduct.setOpaque(true);
        msgProduct.setPreferredSize(new java.awt.Dimension(50, 30));

        msgBranch.setBackground(new java.awt.Color(163, 218, 224));
        msgBranch.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        msgBranch.setText("  จำนวนรายการ Update 00000 รายการ");
        msgBranch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        msgBranch.setMaximumSize(new java.awt.Dimension(50, 30));
        msgBranch.setMinimumSize(new java.awt.Dimension(50, 30));
        msgBranch.setOpaque(true);
        msgBranch.setPreferredSize(new java.awt.Dimension(50, 30));

        msgPosconfig.setBackground(new java.awt.Color(163, 218, 224));
        msgPosconfig.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        msgPosconfig.setText("  จำนวนรายการ Update 00000 รายการ");
        msgPosconfig.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        msgPosconfig.setMaximumSize(new java.awt.Dimension(50, 30));
        msgPosconfig.setMinimumSize(new java.awt.Dimension(50, 30));
        msgPosconfig.setOpaque(true);
        msgPosconfig.setPreferredSize(new java.awt.Dimension(50, 30));

        msgUser.setBackground(new java.awt.Color(163, 218, 224));
        msgUser.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        msgUser.setText("  จำนวนรายการ Update 00000 รายการ");
        msgUser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        msgUser.setMaximumSize(new java.awt.Dimension(50, 30));
        msgUser.setMinimumSize(new java.awt.Dimension(50, 30));
        msgUser.setOpaque(true);
        msgUser.setPreferredSize(new java.awt.Dimension(50, 30));

        msgMenu.setBackground(new java.awt.Color(163, 218, 224));
        msgMenu.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        msgMenu.setText("  จำนวนรายการ Update 00000 รายการ");
        msgMenu.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        msgMenu.setMaximumSize(new java.awt.Dimension(50, 30));
        msgMenu.setMinimumSize(new java.awt.Dimension(50, 30));
        msgMenu.setOpaque(true);
        msgMenu.setPreferredSize(new java.awt.Dimension(50, 30));

        msgEff.setBackground(new java.awt.Color(163, 218, 224));
        msgEff.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        msgEff.setText("  จำนวนรายการ Update 00000 รายการ");
        msgEff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        msgEff.setMaximumSize(new java.awt.Dimension(50, 30));
        msgEff.setMinimumSize(new java.awt.Dimension(50, 30));
        msgEff.setOpaque(true);
        msgEff.setPreferredSize(new java.awt.Dimension(50, 30));

        msgCharge.setBackground(new java.awt.Color(163, 218, 224));
        msgCharge.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        msgCharge.setText("  จำนวนรายการ Update 00000 รายการ");
        msgCharge.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        msgCharge.setMaximumSize(new java.awt.Dimension(50, 30));
        msgCharge.setMinimumSize(new java.awt.Dimension(50, 30));
        msgCharge.setOpaque(true);
        msgCharge.setPreferredSize(new java.awt.Dimension(50, 30));

        msgpoint.setBackground(new java.awt.Color(163, 218, 224));
        msgpoint.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        msgpoint.setText("  จำนวนรายการ Update 00000 รายการ");
        msgpoint.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        msgpoint.setMaximumSize(new java.awt.Dimension(50, 30));
        msgpoint.setMinimumSize(new java.awt.Dimension(50, 30));
        msgpoint.setOpaque(true);
        msgpoint.setPreferredSize(new java.awt.Dimension(50, 30));

        msgestamp.setBackground(new java.awt.Color(163, 218, 224));
        msgestamp.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        msgestamp.setText("  จำนวนรายการ Update 00000 รายการ");
        msgestamp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        msgestamp.setMaximumSize(new java.awt.Dimension(50, 30));
        msgestamp.setMinimumSize(new java.awt.Dimension(50, 30));
        msgestamp.setOpaque(true);
        msgestamp.setPreferredSize(new java.awt.Dimension(50, 30));

        msgSAP.setBackground(new java.awt.Color(163, 218, 224));
        msgSAP.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        msgSAP.setText("  จำนวนรายการ Update 00000 รายการ");
        msgSAP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        msgSAP.setMaximumSize(new java.awt.Dimension(50, 30));
        msgSAP.setMinimumSize(new java.awt.Dimension(50, 30));
        msgSAP.setOpaque(true);
        msgSAP.setPreferredSize(new java.awt.Dimension(50, 30));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(msgEff, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                            .addComponent(msgMenu, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(msgUser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(msgPosconfig, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(msgBranch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(msgProduct, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(msgVender, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(msgGroup, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(msgPromotion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(msgBank, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(msgCoupon, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(msgCredit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(msgCharge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(msgpoint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(msgestamp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(msgSAP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(msgCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(msgCoupon, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(msgBank, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(msgPromotion, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(msgGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(msgVender, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(msgProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(msgBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(msgPosconfig, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(msgUser, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(msgMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(msgEff, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(msgCharge, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(msgpoint, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(msgestamp, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(msgSAP, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        textArea.setRows(5);
        textArea.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Description Process", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Norasi", 0, 14))); // NOI18N
        jScrollPane1.setViewportView(textArea);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 29, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 136, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(1024, 768));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
private void checkuserconfig() {
        //MenuName = Mast1
        UserLogin userrec = UserLogin.userlogin;
        if (userrec.getTran5().equals("1")) {
            btnProcess.setEnabled(false);
        }
        if (userrec.getTran5().equals("2")) {
            btnProcess.setEnabled(true);
        }
        if (userrec.getTran5().equals("3")) {
            btnProcess.setEnabled(true);
        }
    }
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        ExitProgram();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // TODO add your handling code here:
        btnProcessClick();
    }//GEN-LAST:event_btnProcessActionPerformed

    /**
     * @param args the command line arguments
     */
    public void loadbranchgroup() {
        cmbgroup.removeAllItems();
        cmbgroup.addItem("ALL-All Branch Group");
        try {
            stmt = (Statement) dbUtility.con.createStatement();
            String sql = "select * from branchgroup order by bgroupcode ";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                cmbgroup.addItem(cvth.ASCII2Unicode(rs.getString("bgroupcode")) + "-" + cvth.ASCII2Unicode(rs.getString("bgroupname")));
            }
        } catch (SQLException ex) {
            PUtility.ShowMsg(ex.getMessage().toString());
        }

    }

    private void ExitProgram() {
        if (!isProcess) {
            this.dispose();
        }
    }

    private void fromactivate() {
        cbLinux.setSelected(true);
        textArea.removeAll();
    }

    private void btnProcessClick() {
        String[] spli = cmbgroup.getSelectedItem().toString().split("-");
        String type1 = (spli[0].equals("ALL") ? "" : spli[0]);
        String type2 = (spli[0].equals("ALL") ? "ZZZ" : spli[0]);

        //---------------------- SAP
        if (CheckSAPArticle()) {
            if (ar.productIsNotMapArticle(type1, type2)) {
                new showMessage().showMessageWarning("พบรายการสินค้าที่ยังไม่ได้ Map กับ Article Master", "senddatatobranch2.btnProcessClick()");
                listDataNoMap ldnm = new listDataNoMap(this, true, true, ar.getListProductNoMap(), null);
                ldnm.setVisible(true);
                return;
            }
            if (si.branfileNotMapSite()) {
                new showMessage().showMessageWarning("พบสาขาที่ยังไม่ได้ Map กับ Site Master", "senddatatobranch2.btnProcessClick()");
                listDataNoMap ldnm = new listDataNoMap(this, true, false, null, si.getListSiteNoMap());
                ldnm.setVisible(true);
                return;
            }
        }
        //---------------------- SAP

        if (PUtility.ShowConfirmMsg("ยืนยันการสร้างไฟล์สำหรับส่งข้อมูล Master File ไปสาขา...")) {
            Thread SendDataLinux = new Thread(new ProcessSendLinux());
            SendDataLinux.start();
        }
    }

    public void ClearTempPath() {
        File PathTemp = new File(TempPath);
        File PathTempConvert = new File(PathConvert);
        DirectoryUtility dirUtil = new DirectoryUtility();
        File fl[] = PathTemp.listFiles();
        File flConvert[] = PathTempConvert.listFiles();
        try {
            for (int i = 0; i < fl.length; i++) {
                dirUtil.deleteDir(fl[i]);
            }
            if (!dirUtil.deleteDir(PathTemp)) {
                JOptionPane.showMessageDialog(this, "Can'n Delete" + TempPath);
            }
            if (!dirUtil.createDir(PathTemp)) {
                JOptionPane.showMessageDialog(this, "Can'n Create" + TempPath);
            }
            for (int i = 0; i < flConvert.length; i++) {
                dirUtil.deleteDir(flConvert[i]);
            }
            if (!dirUtil.deleteDir(PathTempConvert)) {
                JOptionPane.showMessageDialog(this, "Can'n Delete" + PathTempConvert);
            }
            if (!dirUtil.createDir(PathTempConvert)) {
                JOptionPane.showMessageDialog(this, "Can'n Create" + PathTempConvert);
            }
        } catch (IOException ex) {
        }
    }

    public void ClearMsg() {
        msgCredit.setText("");
        msgCoupon.setText("");
        msgpoint.setText("");
        msgestamp.setText("");
        msgBank.setText("");
        msgPromotion.setText("");
        msgGroup.setText("");
        msgVender.setText("");
        msgProduct.setText("");
        msgBranch.setText("");
        msgPosconfig.setText("");
        msgUser.setText("");
        msgMenu.setText("");
        msgEff.setText("");
        msgCharge.setText("");
        msgSAP.setText("");
        cbCredit.setSelected(false);
        cbCupon.setSelected(false);
        cbBank.setSelected(false);
        cbPromotion.setSelected(false);
        cbGroup.setSelected(false);
        cbVender.setSelected(false);
        cbProduct.setSelected(false);
        cbBranch.setSelected(false);
        cbPosconfig.setSelected(false);
        cbUser.setSelected(false);
        cbMenu.setSelected(false);
        cbEff.setSelected(false);
        cbCharge.setSelected(false);
        cbpoint.setSelected(false);
        cbestamp.setSelected(false);
        cbSAP.setSelected(false);
    }

    public boolean ChkPosconfig(String bcode) {
        boolean ReturnValue = false;
        try {
            Statement stmt = (Statement) dbUtility.con.createStatement();
            String SqlQuery = "select *from posconfigsetup "
                    + "where p_terminal='" + bcode + "' ";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
                ReturnValue = false;
            } else {
                ReturnValue = true;
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return ReturnValue;
    }

    public String charSet(String TempStr) {
        String ReturnValue = "";
        if (!dbUtility.Char_Set.equalsIgnoreCase("utf-8")) {
            ReturnValue = cvth.ASCII2Unicode(TempStr);
        } else {
            ReturnValue = TempStr;
        }
        return ReturnValue;
    }

    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(senddatatobranch2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(senddatatobranch2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(senddatatobranch2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(senddatatobranch2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new senddatatobranch2().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnProcess;
    private javax.swing.JCheckBox cbBank;
    private javax.swing.JCheckBox cbBranch;
    private javax.swing.JCheckBox cbCharge;
    private javax.swing.JCheckBox cbCredit;
    private javax.swing.JCheckBox cbCupon;
    private javax.swing.JCheckBox cbEff;
    private javax.swing.JCheckBox cbGroup;
    private javax.swing.JCheckBox cbLinux;
    private javax.swing.JCheckBox cbMenu;
    private javax.swing.JCheckBox cbPosconfig;
    private javax.swing.JCheckBox cbProduct;
    private javax.swing.JCheckBox cbPromotion;
    private javax.swing.JCheckBox cbSAP;
    private javax.swing.JCheckBox cbUser;
    private javax.swing.JCheckBox cbVender;
    private javax.swing.JCheckBox cbestamp;
    private javax.swing.JCheckBox cbpoint;
    private javax.swing.JComboBox cmbgroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel msgBank;
    private javax.swing.JLabel msgBranch;
    private javax.swing.JLabel msgCharge;
    private javax.swing.JLabel msgCoupon;
    private javax.swing.JLabel msgCredit;
    private javax.swing.JLabel msgEff;
    private javax.swing.JLabel msgGroup;
    private javax.swing.JLabel msgMenu;
    private javax.swing.JLabel msgPosconfig;
    private javax.swing.JLabel msgProduct;
    private javax.swing.JLabel msgPromotion;
    private javax.swing.JLabel msgSAP;
    private javax.swing.JLabel msgUser;
    private javax.swing.JLabel msgVender;
    private javax.swing.JLabel msgestamp;
    private javax.swing.JLabel msgpoint;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables

    private boolean CheckSAPArticle() {
        boolean chk = false;
        try {
            String SqlQuery = "select use_sap_article from borpathsetup ";
            Statement stmt = (Statement) dbUtility.con.createStatement();
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() != 0) {
                if (rec.getString("use_sap_article").equals("Y")) {
                    chk = true;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            chk = false;
        }

        return chk;
    }

    class ProcessSendLinux extends javax.swing.JDialog implements Runnable {

        @Override
        public void run() {

            btnProcess.setEnabled(false);
            btnExit.setEnabled(false);

            if (cbLinux.isSelected()) {
                textArea.setForeground(Color.BLACK);
                textArea.append("******* Start Process(Linux) *******\n");
                String TempStr = cmbgroup.getSelectedItem().toString();
                String[] TempArray = TempStr.split("-");
                String Tempbgroup = TempArray[0];
                String sbgroup = "";
                String ebgroup = "";
                if (Tempbgroup.equals("ALL")) {
                    sbgroup = "";
                    ebgroup = "ZZZ";
                } else {
                    sbgroup = Tempbgroup;
                    ebgroup = Tempbgroup;
                }
                int cnt = 0;
                try {
                    stmt = (Statement) dbUtility.con.createStatement();
                    String sql = "select * from branchgroup where bgroupcode>='" + sbgroup + "' and bgroupcode<='" + ebgroup + "' "
                            + "order by bgroupcode ";
                    ResultSet rs = stmt.executeQuery(sql);
                    System.out.println("sql//" + sql);
                    while (rs.next()) {
                        System.out.println("Count // " + cnt++);
                        ClearTempPath();
                        ClearMsg();
                        isProcessOK = true;
                        String curbcode = cvth.ASCII2Unicode(rs.getString("bgroupcode"));
                        String curbname = cvth.ASCII2Unicode(rs.getString("bgroupname"));
                        if (!ChkPosconfig(curbcode)) {
                            textArea.append("กรุณากำหนด Posconfig สำหรับกลุ่ม " + curbcode);
                            isProcessOK = false;
                        }
                        if (isProcessOK) {
                            SendCredit(curbcode);
                            cbCredit.setSelected(true);
                        }
                        if (isProcessOK) {
                            SendTrancode(curbcode);
                            cbCredit.setSelected(true);
                        }
                        //*********************************************
                        if (isProcessOK) {
                            SendCoupon(curbcode);
                        }
                        if (isProcessOK) {
                            SendCouponList(curbcode);
                        }
                        if (isProcessOK) {
                            SendCouponUnList(curbcode);  //Add New
                        }

                        if (isProcessOK) {
                            SendCouponFixBranch(curbcode);
                            cbCupon.setSelected(true);
                        }
                        if (isProcessOK) {
                            SendCouponFixDate(curbcode);
                        }
                        //*********************************************
                        // for eCoupon
                        //*********************************************
                        if (isProcessOK) {
                            SendeCoupon(curbcode);
                        }
                        if (isProcessOK) {
                            SendeCouponList(curbcode);
                        }
                        if (isProcessOK) {
                            SendeCouponUnList(curbcode);  //Add New
                        }

                        if (isProcessOK) {
                            SendeCouponFixBranch(curbcode);
                            cbCupon.setSelected(true);
                        }
                        //*********************************************

                        if (isProcessOK) {
                            SendBank(curbcode);
                            cbBank.setSelected(true);
                        }
                        if (isProcessOK) {
                            SendProtab(curbcode);
                        }
                        if (isProcessOK) {
                            SendProtabFixBranch(curbcode);
//                            cbPromotion.setSelected(true);
                        }

                        if (isProcessOK) {   //idea
                            SendProtabFixExpDate(curbcode); //idea
                            cbPromotion.setSelected(true); //idea
                        }

                        //*********************************************
                        if (isProcessOK) {
                            SendDept(curbcode);
                            cbGroup.setSelected(true);
                        }
                        if (isProcessOK) {
                            SendVender(curbcode);
                            cbVender.setSelected(true);
                        }
                        if (isProcessOK) {
                            SendProduct(curbcode);
                        }
                        if (isProcessOK) {
                            SendPSet(curbcode);
                        }
                        if (isProcessOK) {
                            SendPosBom(curbcode);
                        }
                        //AddNew 08/07/2013
                        if (isProcessOK) {
                            SendPCourse(curbcode);
                        }
                        if (isProcessOK) {
                            SendSpOption(curbcode);
                        }
                        //-----------------------------
                        if (isProcessOK) {
                            SendPingredent(curbcode);
                            cbProduct.setSelected(true);
                        }
                        if (isProcessOK) {
                            SendBranch(curbcode);
                            cbBranch.setSelected(true);
                        }
                        if (isProcessOK) {
                            SendPosconfig(curbcode);
                            cbPosconfig.setSelected(true);
                        }
                        if (isProcessOK) {
                            SendUser(curbcode);
                        }
                        if (isProcessOK) {
                            SendUserGroup(curbcode);
                            cbUser.setSelected(true);
                        }
                        if (isProcessOK) {
                            SendMenulist(curbcode);
                            cbMenu.setSelected(true);
                        }
                        if (isProcessOK) {
                            Sendeffective(curbcode);
                            cbEff.setSelected(true);
                        }
                        if (isProcessOK) {
                            SendCharge(curbcode);
                        }
                        if (isProcessOK) {
                            SendChargeBranch(curbcode);
                        }
                        if (isProcessOK) {
                            SendChargeType(curbcode);
                        }
                        if (isProcessOK) {
                            SendChargeConfig(curbcode);
                        }
                        if (isProcessOK) {
                            SendChargeSaleType(curbcode);
                        }
                        if (isProcessOK) {
                            SendChargeSpecial(curbcode);
                            cbCharge.setSelected(true);
                        }
                        //*********************************************
                        //โปรโมชั่นรับสิทธิ์ชิงรางวัล
                        //*********************************************
                        if (isProcessOK) {
                            SendPoint(curbcode);
                            cbpoint.setSelected(true);
                        }
                        if (isProcessOK) {
                            SendPointList(curbcode);
                        }
                        if (isProcessOK) {
                            SendPointUnList(curbcode);  //Add New
                        }

                        if (isProcessOK) {
                            SendPointFixBranch(curbcode);
                            cbCupon.setSelected(true);
                        }
                        //*********************************************
                        // ส่วนลดแยกประเภท GP
                        //*********************************************
                        if (isProcessOK) {
                            SendFixGPPromotion(curbcode);
                        }
                        if (isProcessOK) {
                            SendFixGPCoupon(curbcode);
                        }
                        if (isProcessOK) {
                            Sendcustomer(curbcode);
                        }

                        //********************************************* Estamp
                        //1
                        if (isProcessOK) {
                            SendEStampCampaign(); //idea
                        }

                        //2
                        if (isProcessOK) {
                            SendEStampPromotion(); //idea
                        }

                        //3
                        if (isProcessOK) {
                            SendEStampProFixBranchGroup(); //idea
                        }

                        //4
                        if (isProcessOK) {
                            SendEStampProFixBranch();//idea
                        }

                        //5
                        if (isProcessOK) {
                            SendEStampProFixPlu();//idea
                        }

                        //6
                        if (isProcessOK) {
                            SendEStampProUnLinkPlu();//idea
                        }

                        //7
                        if (isProcessOK) {
                            SendEStampProFixExpDate();//idea
                        }

                        //********************************************* 
                        //8
                        if (isProcessOK) {
                            SendEStampProRedeem(); //idea
                        }

                        //9
                        if (isProcessOK) {
                            SendEStampRedeemFixBranchGroup(); //idea
                        }

                        //10
                        if (isProcessOK) {
                            SendEStampRedeemFixBranch();//idea
                        }

                        //11
                        if (isProcessOK) {
                            SendEStampRedeemFixPlu();//idea
                        }

                        //12
                        if (isProcessOK) {
                            SendEStampRedeemUnLinkPlu();//idea
                        }

                        //13
                        if (isProcessOK) {
                            SendEStampRedeemFixExpDate();//idea
                            cbestamp.setSelected(true);
                        }
                        if (isProcessOK) {
                            Sendvoidusr(curbcode);
                        }
                        if (isProcessOK) {
                            Sendvoidconfig(curbcode);
                        }
                        if (isProcessOK) {
                            Sendbranvoid(curbcode);
                        }
                        if (isProcessOK) {
                            Sendmailserver(curbcode);
                        }
                         if (isProcessOK) {
                            Sendvoidmsg(curbcode);
                        }
                          if (isProcessOK) {
                            Sendrefundmsg(curbcode);
                        }
                        //*********************************************
                        if (isProcessOK) {//SAP Master
                            sendSAPSaleDistype(curbcode);
                            sendSAPMovementtype(curbcode);
                            sendSAPDepartment(curbcode);
                            cbSAP.setSelected(true);
                        }
                        sendAllArticle();
                        String FileName = "";
                        String FileZip = "";
                        if (isProcessOK) {
                            FileName = curbcode + "_" + "masterl" + ".zip";
                            FileZip = DataZipPath + "/" + FileName;
                            ZipUnzip uzip = new ZipUnzip();
                            uzip.zip(PathConvert, FileZip);
                            textArea.append(FileName + "....OK" + "\n");
                        } else {
                            textArea.append(FileName + "....false" + "\n");
                        }
                    }
                } catch (SQLException ex) {
                    PUtility.ShowMsg(ex.getMessage().toString());
                }
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(senddatatobranch2.class.getName()).log(Level.SEVERE, null, ex);
                }
                textArea.append("****** End of Process(Linux) ******\n");
                textArea.append("");
            }
            btnProcess.setEnabled(true);
            btnExit.setEnabled(true);
        }

        public boolean SendCredit(String bgroupcode) {
            String FileName = "Credit.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();

            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from creditfile order by crcode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgCredit.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("crbank")) + "\u0009"
                                + charSet(rec.getString("crcode")) + "\u0009"
                                + charSet(rec.getString("crname")) + "\u0009"
                                + DecFmt.format(rec.getDouble("crcharge")) + "\u0009"
                                + charSet(rec.getString("crgetcardno")) + "\u0009"
                                + DecFmt.format(rec.getDouble("crredule"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendCoupon(String bgroupcode) {
            String FileName = "Cupon.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from culink "
                        + "inner join cupon on cupon.cucode=culink.cucode "
                        + "where culink.bgroup='" + bgroupcode + "' "
                        + "order by cupon.cucode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgCoupon.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + "***New" + "\u0009"
                                + charSet(rec.getString("cucode")) + "\u0009"
                                + charSet(rec.getString("cuname")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("cubegin")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("cuend")) + "\u0009"
                                + charSet(rec.getString("cutype")) + "\u0009"
                                + charSet(rec.getString("custrday")) + "\u0009"
                                + DecFmt.format(rec.getDouble("cudisc")) + "\u0009"
                                + DecFmt.format(rec.getDouble("cudiscbath")) + "\u0009"
                                + charSet(rec.getString("chkmember")) + "\u0009"
                                + charSet(rec.getString("cubarcode")) + "\u0009"
                                + charSet(rec.getString("redulediscount")) + "\u0009"
                                + charSet(rec.getString("reduleservice")) + "\u0009"
                                + DecFmt.format(rec.getDouble("cusalemin")) + "\u0009"
                                + charSet(rec.getString("cusaletype")) + "\u0009"
                                + charSet(rec.getString("fixbranch")) + "\u0009"
                                + IntFmt.format(rec.getDouble("cucnt")) + "\u0009" //For New POS Version
                                + charSet(rec.getString("cuauto")) + "\u0009" //For New POS Version  
                                + IntFmt.format(rec.getDouble("cuautolevel")) + "\u0009" //For New POS Version
                                + charSet(rec.getString("cumultiuse")) + "\u0009" //For New POS Version
                                + charSet(rec.getString("usewithother")) + "\u0009" //For New POS Version 
                                + charSet(rec.getString("cutime")) + "\u0009" //For New POS Version 
                                + charSet(rec.getString("cutime2")) + "\u0009" //For New POS Version 
                                + charSet(rec.getString("chkminall")) + "\u0009" //For New POS Version 
                                + charSet(rec.getString("offline")) + "\u0009" //For T2P Offline 
                                + charSet(rec.getString("offlinebirthday")) + "\u0009" //For T2P Offline 
                                + charSet(rec.getString("maisenbirthday")) + "\u0009" //For Maisen Memberday 
                                + IntFmt.format(rec.getDouble("saleqty")) + "\u0009" //For Maisen Memberday 
                                + IntFmt.format(rec.getDouble("freeqty")) + "\u0009" //For Maisen Memberday 
                                + "***End";
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendPoint(String bgroupcode) {
            String FileName = "propoint.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from propointlink "
                        + "inner join propoint on propoint.procode=propointlink.procode "
                        + "where propointlink.bgroup='" + bgroupcode + "' "
                        + "order by propoint.procode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgpoint.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + "***New" + "\u0009"
                                + charSet(rec.getString("procode")) + "\u0009"
                                + charSet(rec.getString("proname")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("probegin")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("proend")) + "\u0009"
                                + charSet(rec.getString("prostrday")) + "\u0009"
                                + charSet(rec.getString("prosaletype")) + "\u0009"
                                + IntFmt.format(rec.getDouble("prosale1")) + "\u0009"
                                + IntFmt.format(rec.getDouble("prosale2")) + "\u0009"
                                + IntFmt.format(rec.getDouble("propoint1")) + "\u0009"
                                + IntFmt.format(rec.getDouble("propoint2")) + "\u0009"
                                + charSet(rec.getString("protitle")) + "\u0009"
                                + charSet(rec.getString("proheader1")) + "\u0009"
                                + charSet(rec.getString("proheader2")) + "\u0009"
                                + charSet(rec.getString("proheader3")) + "\u0009"
                                + charSet(rec.getString("pronumber")) + "\u0009"
                                + charSet(rec.getString("profootter1")) + "\u0009"
                                + charSet(rec.getString("profootter2")) + "\u0009"
                                + charSet(rec.getString("profootter3")) + "\u0009"
                                + charSet(rec.getString("profootter4")) + "\u0009"
                                + "***End";
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendeCoupon(String bgroupcode) {
            String FileName = "eCupon.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from eculink "
                        + "inner join ecupon on ecupon.cucode=eculink.cucode "
                        + "where eculink.bgroup='" + bgroupcode + "' "
                        + "order by ecupon.cucode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgCoupon.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + "***New" + "\u0009"
                                + charSet(rec.getString("cucode")) + "\u0009"
                                + charSet(rec.getString("cuname")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("cubegin")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("cuend")) + "\u0009"
                                + charSet(rec.getString("custrday")) + "\u0009"
                                + DecFmt.format(rec.getDouble("cudiscbath")) + "\u0009"
                                + charSet(rec.getString("cubarcode")) + "\u0009"
                                + charSet(rec.getString("cusaletype")) + "\u0009"
                                + DecFmt.format(rec.getDouble("cusalemin")) + "\u0009"
                                + charSet(rec.getString("campaign_code")) + "\u0009"
                                + IntFmt.format(rec.getDouble("cucnt")) + "\u0009" //For New POS Version
                                + charSet(rec.getString("cumultiuse")) + "\u0009" //For New POS Version
                                + charSet(rec.getString("usewithother")) + "\u0009" //For New POS Version 
                                + charSet(rec.getString("cutime")) + "\u0009" //For New POS Version 
                                + charSet(rec.getString("cutime2")) + "\u0009" //For New POS Version 
                                + charSet(rec.getString("head1")) + "\u0009"
                                + charSet(rec.getString("head2")) + "\u0009"
                                + charSet(rec.getString("head3")) + "\u0009"
                                + charSet(rec.getString("head4")) + "\u0009"
                                + charSet(rec.getString("head5")) + "\u0009"
                                + charSet(rec.getString("head6")) + "\u0009"
                                + charSet(rec.getString("con1")) + "\u0009"
                                + charSet(rec.getString("con2")) + "\u0009"
                                + charSet(rec.getString("con3")) + "\u0009"
                                + charSet(rec.getString("con4")) + "\u0009"
                                + charSet(rec.getString("con5")) + "\u0009"
                                + charSet(rec.getString("con6")) + "\u0009"
                                + charSet(rec.getString("con7")) + "\u0009"
                                + charSet(rec.getString("con8")) + "\u0009"
                                + charSet(rec.getString("con9")) + "\u0009"
                                + charSet(rec.getString("con10")) + "\u0009"
                                + charSet(rec.getString("con11")) + "\u0009"
                                + charSet(rec.getString("con12")) + "\u0009"
                                + charSet(rec.getString("con13")) + "\u0009"
                                + charSet(rec.getString("con14")) + "\u0009"
                                + charSet(rec.getString("con15")) + "\u0009"
                                + charSet(rec.getString("con16")) + "\u0009"
                                + charSet(rec.getString("con17")) + "\u0009"
                                + charSet(rec.getString("con18")) + "\u0009"
                                + charSet(rec.getString("con19")) + "\u0009"
                                + charSet(rec.getString("con20")) + "\u0009"
                                + charSet(rec.getString("con21")) + "\u0009"
                                + charSet(rec.getString("con22")) + "\u0009"
                                + charSet(rec.getString("con23")) + "\u0009"
                                + charSet(rec.getString("con24")) + "\u0009"
                                + charSet(rec.getString("con25")) + "\u0009"
                                + charSet(rec.getString("con26")) + "\u0009"
                                + charSet(rec.getString("con27")) + "\u0009"
                                + charSet(rec.getString("con28")) + "\u0009"
                                + charSet(rec.getString("con29")) + "\u0009"
                                + charSet(rec.getString("con30")) + "\u0009"
                                + charSet(rec.getString("con31")) + "\u0009"
                                + charSet(rec.getString("con32")) + "\u0009"
                                + charSet(rec.getString("con33")) + "\u0009"
                                + charSet(rec.getString("con34")) + "\u0009"
                                + charSet(rec.getString("con35")) + "\u0009"
                                + charSet(rec.getString("formember")) + "\u0009"
                                + "***End";
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendCouponList(String bgroupcode) {
            String FileName = "CuList.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from cuponlist "
                        + "left join culink on cuponlist.cucode=culink.cucode "
                        + "where culink.bgroup='" + bgroupcode + "' "
                        + "order by cuponlist.cucode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgCredit.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("cucode")) + "\u0009"
                                + charSet(rec.getString("pcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendPointList(String bgroupcode) {
            String FileName = "propointlist.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from propointlist "
                        + "left join propointlink on propointlist.procode=propointlink.procode "
                        + "where propointlink.bgroup='" + bgroupcode + "' "
                        + "order by propointlist.procode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgCredit.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("procode")) + "\u0009"
                                + charSet(rec.getString("pcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendeCouponList(String bgroupcode) {
            String FileName = "eCuList.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from ecuponlist "
                        + "left join eculink on ecuponlist.cucode=eculink.cucode "
                        + "where eculink.bgroup='" + bgroupcode + "' "
                        + "order by ecuponlist.cucode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgCredit.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("cucode")) + "\u0009"
                                + charSet(rec.getString("pcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean sendAllArticle() {
            String FileName = "sap_article.txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from product "
                        + "where sap_article<>''  "
                        + "order by pcode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        TempStr = TempStr
                                + "sap_article" + "\u0009"
                                + charSet(rec.getString("pcode")) + "\u0009"
                                + charSet(rec.getString("sap_article")) + "\u0009"
                                + charSet(rec.getString("sap_article_name")) + "\u0009"
                                + charSet(rec.getString("sap_article_barcode")) + "\u0009"
                                + charSet(rec.getString("sap_article_unit")) + "\u0009"
                                + charSet(rec.getString("sap_article_jde")) + "\u0009"
                                + charSet(rec.getString("sap_article_active"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendCouponUnList(String bgroupcode) {
            String FileName = "CuUnList.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from cuponunlist "
                        + "left join culink on cuponunlist.cucode=culink.cucode "
                        + "where culink.bgroup='" + bgroupcode + "' "
                        + "order by cuponunlist.cucode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgCredit.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("cucode")) + "\u0009"
                                + charSet(rec.getString("pcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendPointUnList(String bgroupcode) {
            String FileName = "propointunlist.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from propointunlist "
                        + "left join propointlink on propointunlist.procode=propointlink.procode "
                        + "where propointlink.bgroup='" + bgroupcode + "' "
                        + "order by propointunlist.procode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgCredit.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("procode")) + "\u0009"
                                + charSet(rec.getString("pcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendeCouponUnList(String bgroupcode) {
            String FileName = "eCuUnList.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from ecuponunlist "
                        + "left join eculink on ecuponunlist.cucode=eculink.cucode "
                        + "where eculink.bgroup='" + bgroupcode + "' "
                        + "order by ecuponunlist.cucode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgCredit.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("cucode")) + "\u0009"
                                + charSet(rec.getString("pcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendCouponFixBranch(String bgroupcode) {
            String FileName = "CuFixbranch.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;

            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from fixbranch "
                        + "left join culink on fixbranch.cucode=culink.cucode "
                        + "where culink.bgroup='" + bgroupcode + "' "
                        + "order by fixbranch.cucode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgCredit.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("cucode")) + "\u0009"
                                + charSet(rec.getString("bcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendCouponFixDate(String bgroupcode) {
            String FileName = "CuFixdate.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;

            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from cuponfixdate "
                        + "left join culink on cuponfixdate.cucode=culink.cucode "
                        + "where culink.bgroup='" + bgroupcode + "' "
                        + "order by cuponfixdate.cucode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgCredit.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("cucode")) + "\u0009"
                                + charSet(rec.getString("fixdate"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendPointFixBranch(String bgroupcode) {
            String FileName = "propointfixbranch.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from fixbranchpropoint "
                        + "left join propointlink on fixbranchpropoint.procode=propointlink.procode "
                        + "where propointlink.bgroup='" + bgroupcode + "' "
                        + "order by fixbranchpropoint.procode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgCredit.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("procode")) + "\u0009"
                                + charSet(rec.getString("bcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendeCouponFixBranch(String bgroupcode) {
            String FileName = "eCuFixbranch.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from fixbranchecoupon "
                        + "left join eculink on fixbranchecoupon.cucode=eculink.cucode "
                        + "where eculink.bgroup='" + bgroupcode + "' "
                        + "order by fixbranchecoupon.cucode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgCredit.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("cucode")) + "\u0009"
                                + charSet(rec.getString("bcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendFixGPCoupon(String bgroupcode) {
            String FileName = "Fixgpcoupon.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from fixgpcoupon "
                        + "left join culink on fixgpcoupon.cucode=culink.cucode "
                        + "where culink.bgroup='" + bgroupcode + "' "
                        + "order by fixgpcoupon.cucode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgCredit.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("cucode")) + "\u0009"
                                + charSet(rec.getString("bcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendFixGPPromotion(String bgroupcode) {
            String FileName = "Fixgppromotion.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from fixgppromotion "
                        + "left join branfile on fixgppromotion.bcode=branfile.code "
                        + "where branfile.bgroup='" + bgroupcode + "' "
                        + "order by fixgppromotion.prcode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgCredit.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("prcode")) + "\u0009"
                                + charSet(rec.getString("bcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendBank(String bgroupcode) {
            String FileName = "Bank.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from bankfile "
                        + "order by bcode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgBank.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("bcode")) + "\u0009"
                                + charSet(rec.getString("bname"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendTrancode(String bgroupcode) {
            String FileName = "trancode.txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from trancode "
                        + "order by pcode1 ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgBank.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("pcode1")) + "\u0009"
                                + charSet(rec.getString("pcode2")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pqty")) + "\u0009"
                                + charSet(rec.getString("pactive"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendProtab(String bgroupcode) {
            String FileName = "ProTab.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from protab "
                        + "order by procode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgPromotion.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + "***New" + "\u0009"
                                + charSet(rec.getString("procode")) + "\u0009"
                                + charSet(rec.getString("prodesc")) + "\u0009"
                                + charSet(rec.getString("pstrday")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("pdate1")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("pdate2")) + "\u0009"
                                + charSet(rec.getString("ptime1s")) + "\u0009"
                                + charSet(rec.getString("ptime1e")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pdisc1")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pspdisc1")) + "\u0009"
                                + charSet(rec.getString("pts1")) + "\u0009"
                                + charSet(rec.getString("ptime2s")) + "\u0009"
                                + charSet(rec.getString("ptime2e")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pdisc2")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pspdisc2")) + "\u0009"
                                + charSet(rec.getString("pts2")) + "\u0009"
                                + charSet(rec.getString("ptime3s")) + "\u0009"
                                + charSet(rec.getString("ptime3e")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pdisc3")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pspdisc3")) + "\u0009"
                                + charSet(rec.getString("pts3")) + "\u0009"
                                + charSet(rec.getString("ptype")) + "\u0009"
                                + DecFmt.format(rec.getDouble("psale1")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pfree1")) + "\u0009"
                                + DecFmt.format(rec.getDouble("psum1")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pdiscfree1")) + "\u0009"
                                + DecFmt.format(rec.getDouble("psale41")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pfree41")) + "\u0009"
                                + DecFmt.format(rec.getDouble("psale2")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pfree2")) + "\u0009"
                                + DecFmt.format(rec.getDouble("psum2")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pdiscfree2")) + "\u0009"
                                + DecFmt.format(rec.getDouble("psale42")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pfree42")) + "\u0009"
                                + DecFmt.format(rec.getDouble("psale3")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pfree3")) + "\u0009"
                                + DecFmt.format(rec.getDouble("psum3")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pdiscfree3")) + "\u0009"
                                + DecFmt.format(rec.getDouble("psale43")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pfree43")) + "\u0009"
                                + charSet(rec.getString("redulediscount")) + "\u0009"
                                + charSet(rec.getString("fixbranch")) + "\u0009"
                                + IntFmt.format(rec.getDouble("psale51")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pdiscount51")) + "\u0009"
                                + IntFmt.format(rec.getDouble("psale52")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pdiscount52")) + "\u0009"
                                + IntFmt.format(rec.getDouble("psale53")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pdiscount53")) + "\u0009"
                                //protype6 ช่วง1
                                + IntFmt.format(rec.getDouble("PQuan611")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer611")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht611")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan612")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer612")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht612")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan613")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer613")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht613")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan614")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer614")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht614")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan615")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer615")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht615")) + "\u0009"
                                //protype6 ช่วง2
                                + IntFmt.format(rec.getDouble("PQuan621")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer621")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht621")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan622")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer622")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht622")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan623")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer623")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht623")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan624")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer624")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht624")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan625")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer625")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht625")) + "\u0009"
                                //protype6 ช่วง3
                                + IntFmt.format(rec.getDouble("PQuan631")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer631")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht631")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan632")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer632")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht632")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan633")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer633")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht633")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan634")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer634")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht634")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan635")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer635")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht635")) + "\u0009"
                                //protype7 ช่วง1
                                + DecFmt.format(rec.getDouble("PAmt711")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer711")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht711")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt712")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer712")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht712")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt713")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer713")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht713")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt714")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer714")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht714")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt715")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer715")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht715")) + "\u0009"
                                //protype7 ช่วง2
                                + DecFmt.format(rec.getDouble("PAmt721")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer721")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht721")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt722")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer722")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht722")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt723")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer723")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht723")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt724")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer724")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht724")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt725")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer725")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht725")) + "\u0009"
                                //protype7 ช่วง3
                                + DecFmt.format(rec.getDouble("PAmt731")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer731")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht731")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt732")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer732")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht732")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt733")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer733")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht733")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt734")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer734")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht734")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt735")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer735")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht735")) + "\u0009"
                                + "***End";
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendProtabFixBranch(String bgroupcode) {
            String FileName = "ProFixbranch.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from fixbranchpro "
                        + "order by cucode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgBank.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("cucode")) + "\u0009"
                                + charSet(rec.getString("bcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendProtabFixExpDate(String bgroupcode) {
            String FileName = "ProFixexceptdate.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from fixexceptdatepro "
                        + "order by cucode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgBank.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("cucode")) + "\u0009"
                                + charSet(rec.getString("exp_date"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendDept(String bgroupcode) {
            String FileName = "Depart.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from groupfile "
                        + "order by groupcode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgGroup.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("groupcode")) + "\u0009"
                                + charSet(rec.getString("groupname"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean Sendmailserver(String bgroupcode) {
            String FileName = "mailserver.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from voidmailserver ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        TempStr = TempStr
                                + charSet(rec.getString("sms_account")) + "\u0009"
                                + charSet(rec.getString("sms_password")) + "\u0009"
                                + charSet(rec.getString("mail_server")) + "\u0009"
                                + charSet(rec.getString("mail_address")) + "\u0009"
                                + charSet(rec.getString("mail_password"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }
        public boolean Sendvoidmsg(String bgroupcode) {
            String FileName = "voidmessage.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from voidmessage ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        TempStr = TempStr
                                + charSet(rec.getString("voidcode")) + "\u0009"
                                + charSet(rec.getString("voidmsg")) + "\u0009"
                                + charSet(rec.getString("voidget"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }
        public boolean Sendrefundmsg(String bgroupcode) {
            String FileName = "refundmessage.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from refundmessage ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        TempStr = TempStr
                                + charSet(rec.getString("voidcode")) + "\u0009"
                                + charSet(rec.getString("voidmsg")) + "\u0009"
                                + charSet(rec.getString("chkrefno")) + "\u0009"
                                + charSet(rec.getString("voidget"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }
        public boolean Sendvoidusr(String bgroupcode) {
            String FileName = "voiduser.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from voiduser "
                        + "order by u_code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        TempStr = TempStr
                                + charSet(rec.getString("u_code")) + "\u0009"
                                + charSet(rec.getString("u_name")) + "\u0009"
                                + charSet(rec.getString("u_position")) + "\u0009"
                                + charSet(rec.getString("u_email")) + "\u0009"
                                + charSet(rec.getString("u_phone"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean Sendvoidconfig(String bgroupcode) {
            String FileName = "voidconfig.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from voidconfig "
                        + "order by v_code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        TempStr = TempStr
                                + charSet(rec.getString("v_code")) + "\u0009"
                                + charSet(rec.getString("v_name")) + "\u0009"
                                + charSet(rec.getString("v_voidcnt")) + "\u0009"
                                + charSet(rec.getString("v_voidamt")) + "\u0009"
                                + charSet(rec.getString("v_refundcnt")) + "\u0009"
                                + charSet(rec.getString("v_refundamt")) + "\u0009"
                                + charSet(rec.getString("v_otp")) + "\u0009"
                                + charSet(rec.getString("v_sms")) + "\u0009"
                                + charSet(rec.getString("v_email")) + "\u0009"
                                + charSet(rec.getString("v_otp2")) + "\u0009"
                                + charSet(rec.getString("v_sms2")) + "\u0009"
                                + charSet(rec.getString("v_email2"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean Sendbranvoid(String bgroupcode) {
            String FileName = "branvoid.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from branvoid "
                        + "order by b_code,u_code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        TempStr = TempStr + charSet(rec.getString("b_code")) + "\u0009"
                                + charSet(rec.getString("u_code"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean Sendcustomer(String bgroupcode) {
            String FileName = "customer.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            Calendar ca = Calendar.getInstance();
            ca.add(Calendar.DAY_OF_MONTH, -7);
            Calendar ca2 = Calendar.getInstance(); //ส่งข้อมูลย้อนหลัง 7 วัน
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from customer "
                        + "where lastupdate>='" + SqlDateFmt.format(ca.getTime()) + "' and lastupdate<='" + SqlDateFmt.format(ca2.getTime()) + "' ";

                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgGroup.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr
                                + charSet(rec.getString("sp_code")) + "\u0009"
                                + charSet(rec.getString("sp_desc")) + "\u0009"
                                + charSet(rec.getString("sp_addr1")) + "\u0009"
                                + charSet(rec.getString("sp_addr2")) + "\u0009"
                                + charSet(rec.getString("sp_zip")) + "\u0009"
                                + charSet(rec.getString("tel")) + "\u0009"
                                + charSet(rec.getString("fax")) + "\u0009"
                                + charSet(rec.getString("contack")) + "\u0009"
                                + charSet(rec.getString("remark")) + "\u0009"
                                + charSet(rec.getString("remark2")) + "\u0009"
                                + charSet(rec.getString("email")) + "\u0009"
                                + charSet(rec.getString("headoffice")) + "\u0009"
                                + charSet(rec.getString("branchno")) + "\u0009"
                                + charSet(rec.getString("taxid")) + "\u0009"
                                + charSet(rec.getString("lastupdate"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendVender(String bgroupcode) {
            String FileName = "Supplier.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from vender "
                        + "order by vcode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgVender.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr
                                + charSet(rec.getString("vcode")) + "\u0009"
                                + "" + "\u0009"
                                + charSet(rec.getString("vname")) + "\u0009"
                                + charSet(rec.getString("vaddress")) + "\u0009"
                                + "" + "\u0009"
                                + charSet(rec.getString("vcontack")) + "\u0009"
                                + charSet(rec.getString("vtel")) + "\u0009"
                                + charSet(rec.getString("vfax")) + "\u0009"
                                + charSet(rec.getString("vremark")) + "\u0009"
                                + SqlDateFmt.format(new Date()) + "\u0009"
                                + "";
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean sendSAPSaleDistype(String bgroupcode) {// SAP Master
            String FileName = "SAP_SALE_DISTYPE.TXT";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();

            int reccnt = 0;
            sap_mastercode_distype smd = new sap_mastercode_distype();
            try {
                ArrayList<sap_mastercode_distype> list = smd.seekAll();
                if (list.size() <= 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    for (int i = 0; i < list.size(); i++) {
                        String TempStr = "";
                        reccnt++;
                        msgSAP.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + us.charSet(list.get(i).getDis_sap_code()) + "\u0009"
                                + us.charSet(list.get(i).getDis_sap_name()) + "\u0009"
                                + us.charSet(list.get(i).getDis_sale_type()) + "\u0009"
                                + us.charSet(list.get(i).getDis_sale_description());
                        TextWrite.writeToText(centFileName, TempStr);
                    }
                }
            } catch (Exception e) {
                new showMessage().showMessageError(e.getMessage(), "senddatatobranch2.sendSaleDistype(" + bgroupcode + ")");
                isProcessOK = false;
            }

            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }

            return isProcessOK;
        }

        public boolean sendSAPMovementtype(String bgroupcode) {// SAP Master
            String FileName = "SAP_MOVEMENTTYPE.TXT";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();

            int reccnt = 0;
            sap_mastercode_inout smi = new sap_mastercode_inout();
            try {
                ArrayList<sap_mastercode_inout> list = smi.seekAll();
                if (list.size() <= 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    for (int i = 0; i < list.size(); i++) {
                        String TempStr = "";
                        reccnt++;
                        msgSAP.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + us.charSet(list.get(i).getSap_code()) + "\u0009"//0
                                + us.charSet(list.get(i).getSap_name()) + "\u0009"//1
                                + us.charSet(list.get(i).getSap_type()) + "\u0009" //2
                                + us.charSet(list.get(i).getSap_trantype()) + "\u0009" //3
                                + us.charSet(list.get(i).getSap_active()); //4
                        TextWrite.writeToText(centFileName, TempStr);
                    }
                }
            } catch (Exception e) {
                new showMessage().showMessageError(e.getMessage(), "senddatatobranch2.sendMovementtype(" + bgroupcode + ")");
                isProcessOK = false;
            }

            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean sendSAPDepartment(String bgroupcode) {
            String FileName = "SAP_DEPARTMENT.TXT";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from sap_department "
                        + "order by dept_code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgGroup.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("dept_code")) + "\u0009"
                                + charSet(rec.getString("dept_name")) + "\u0009"
                                + charSet(rec.getString("dept_costcenter")) + "\u0009"
                                + charSet(rec.getString("dept_active"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendProduct(String bgroupcode) {
            String FileName = "Templu.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from blink "
                        + "inner join product on product.pcode=blink.pcode "
                        + "where blink.bgroup='" + bgroupcode + "' "
                        + "order by product.pcode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgProduct.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + "***New" + "\u0009"//0
                                + charSet(rec.getString("pcode")) + "\u0009"//1
                                + charSet(rec.getString("pbarcode")) + "\u0009"//2
                                + charSet(rec.getString("pdesc")) + "\u0009"//3
                                + charSet(rec.getString("preferent")) + "\u0009"//4
                                + charSet(rec.getString("punit1")) + "\u0009"//5
                                + charSet(rec.getString("parea")) + "\u0009"//6
                                + charSet(rec.getString("pnormal")) + "\u0009"//7
                                + charSet(rec.getString("pdiscount")) + "\u0009"//8
                                + charSet(rec.getString("pvat")) + "\u0009"//9
                                + charSet(rec.getString("ptype")) + "\u0009"//10
                                + charSet(rec.getString("pset")) + "\u0009"//11
                                + charSet(rec.getString("pstatus")) + "\u0009"//12
                                + charSet(rec.getString("pstock")) + "\u0009"//13
                                + charSet(rec.getString("pkic")) + "\u0009"//14
                                + charSet(rec.getString("pservice")) + "\u0009"//15
                                + charSet(rec.getString("pgroup")) + "\u0009"//16
                                + charSet(rec.getString("pvender")) + "\u0009"//17
                                + DecFmt.format(rec.getDouble("price1")) + "\u0009"//18
                                + DecFmt.format(rec.getDouble("price2")) + "\u0009"//19
                                + DecFmt.format(rec.getDouble("price3")) + "\u0009"//20
                                + DecFmt.format(rec.getDouble("price4")) + "\u0009"//21
                                + DecFmt.format(rec.getDouble("price5")) + "\u0009"//22
                                + charSet(rec.getString("promotion1")) + "\u0009"//23
                                + charSet(rec.getString("promotion2")) + "\u0009"//24
                                + charSet(rec.getString("promotion3")) + "\u0009"//25
                                + DecFmt.format(rec.getDouble("pmax")) + "\u0009"//26
                                + DecFmt.format(rec.getDouble("pmin")) + "\u0009"//27
                                + DecFmt.format(rec.getDouble("pscost")) + "\u0009"//28
                                + DecFmt.format(rec.getDouble("pacost")) + "\u0009"//29
                                + DecFmt.format(rec.getDouble("plcost")) + "\u0009"//30
                                + charSet(rec.getString("premark")) + "\u0009"//31
                                + charSet(rec.getString("flage")) + "\u0009"//32
                                + charSet(rec.getString("pactive")) + "\u0009"//33
                                + charSet(rec.getString("pfoodtype")) + "\u0009"//34
                                + SqlDateFmt.format(rec.getDate("plastupdate")) + "\u0009"//35
                                + charSet(rec.getString("charge1")) + "\u0009"//36
                                + charSet(rec.getString("charge2")) + "\u0009"//37
                                + charSet(rec.getString("charge3")) + "\u0009"//38
                                + charSet(rec.getString("psetselect")) + "\u0009"//39
                                + IntFmt.format(rec.getInt("psetselectqty")) + "\u0009"//40
                                //Add New 08/07/2013
                                + charSet(rec.getString("porder")) + "\u0009"//41
                                + IntFmt.format(rec.getInt("pcooktime")) + "\u0009"//42
                                + charSet(rec.getString("poption")) + "\u0009"//43
                                + charSet(rec.getString("pkicdesc")) + "\u0009"//44
                                + charSet(rec.getString("pshortdesc")) + "\u0009" //Add New 2014-05-21 //45
                                + charSet(rec.getString("psubunit")) + "\u0009"//Add New 2014-11-06 //46
                                + DecFmt3.format(rec.getDouble("pscale")) + "\u0009" //Add New 2014-11-06 //47
                                + charSet(rec.getString("fix")) + "\u0009"//Add New 2014-11-06 //48

                                /*
                                 * add new SAP mapping
                                 * sap_article, sap_article_name, sap_article_barcode, sap_article_unit, sap_article_jde, sap_article_active
                                 */
                                + us.charSet(rec.getString("sap_article")) + "\u0009"//Add New 2014-11-06//49 = no poscontrol
                                + us.charSet(rec.getString("sap_article_name")) + "\u0009"//Add New 2014-11-06//50 = no poscontrol
                                + us.charSet(rec.getString("sap_article_barcode")) + "\u0009"//Add New 2014-11-06//51
                                + us.charSet(rec.getString("sap_article_unit")) + "\u0009"//Add New 2014-11-06//52 = no poscontrol
                                + us.charSet(rec.getString("sap_article_jde")) + "\u0009"//Add New 2014-11-06//53 = no poscontrol
                                + us.charSet(rec.getString("sap_article_active")) + "\u0009"//Add New 2014-11-06//54 = no poscontrol
                                //=========================================
                                + "***End";
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            //For Bom
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from posbom "
                        + "inner join blink on posbom.pcode=blink.pcode "
                        + "inner join product on product.pcode=posbom.plcode "
                        + "where blink.bgroup='" + bgroupcode + "' "
                        + "order by product.pcode,posbom.plcode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempCode = rec.getString("plcode");
                        double TempPrice1 = 0.00;
                        double TempPrice2 = 0.00;
                        double TempPrice3 = 0.00;
                        double TempPrice4 = 0.00;
                        double TempPrice5 = 0.00;
                        String TempPro1 = "";
                        String TempPro2 = "";
                        String TempPro3 = "";
                        if (rec.getString("fix").equals("L")) {
                            TempPrice1 = 0.00;
                            TempPrice2 = 0.00;
                            TempPrice3 = 0.00;
                            TempPrice4 = 0.00;
                            TempPrice5 = 0.00;
                            TempPro1 = "";
                            TempPro2 = "";
                            TempPro3 = "";
                        } else {
                            try {
                                Statement stmt2 = (Statement) dbUtility.con.createStatement();
                                String SqlQuery2 = "select *from blink "
                                        + "where blink.bgroup='" + bgroupcode + "' and blink.pcode='" + TempCode + "' ";
                                ResultSet rec2 = stmt2.executeQuery(SqlQuery2);
                                rec2.first();
                                if (rec2.getRow() == 0) {
                                } else {
                                    TempPrice1 = rec2.getDouble("price1");
                                    TempPrice2 = rec2.getDouble("price2");
                                    TempPrice3 = rec2.getDouble("price3");
                                    TempPrice4 = rec2.getDouble("price4");
                                    TempPrice5 = rec2.getDouble("price5");

                                    TempPro1 = rec2.getString("promotion1");
                                    TempPro2 = rec2.getString("promotion2");
                                    TempPro3 = rec2.getString("promotion3");
                                }
                                rec2.close();
                                stmt2.close();
                            } catch (SQLException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                        }
                        double Tempprice = 0.0;
                        String TempStr = "";
                        reccnt++;
                        msgProduct.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + "***New" + "\u0009"//0
                                + charSet(rec.getString("plcode")) + "\u0009"//1
                                + charSet(rec.getString("pbarcode")) + "\u0009"//2
                                + charSet(rec.getString("pdesc")) + "\u0009"//3
                                + charSet(rec.getString("preferent")) + "\u0009"//4
                                + charSet(rec.getString("punit1")) + "\u0009"//5
                                + charSet(rec.getString("parea")) + "\u0009"//6
                                + charSet(rec.getString("pnormal")) + "\u0009"//7
                                + charSet(rec.getString("pdiscount")) + "\u0009"//8
                                + charSet(rec.getString("pvat")) + "\u0009"//9
                                + charSet(rec.getString("ptype")) + "\u0009"//10
                                + charSet(rec.getString("pset")) + "\u0009"//11
                                + charSet(rec.getString("pstatus")) + "\u0009"//12
                                + charSet(rec.getString("pstock")) + "\u0009"//13
                                + charSet(rec.getString("pkic")) + "\u0009"//14
                                + charSet(rec.getString("pservice")) + "\u0009"//15
                                + charSet(rec.getString("pgroup")) + "\u0009"//16
                                + charSet(rec.getString("pvender")) + "\u0009"//17
                                + DecFmt.format(TempPrice1) + "\u0009"//18
                                + DecFmt.format(TempPrice2) + "\u0009"//19
                                + DecFmt.format(TempPrice3) + "\u0009"//20
                                + DecFmt.format(TempPrice4) + "\u0009"//21
                                + DecFmt.format(TempPrice5) + "\u0009"//22
                                + charSet(TempPro1) + "\u0009"//23
                                + charSet(TempPro2) + "\u0009"//24
                                + charSet(TempPro3) + "\u0009"//25
                                + DecFmt.format(rec.getDouble("pmax")) + "\u0009"//26
                                + DecFmt.format(rec.getDouble("pmin")) + "\u0009"//27
                                + DecFmt.format(rec.getDouble("pscost")) + "\u0009"//28
                                + DecFmt.format(rec.getDouble("pacost")) + "\u0009"//29
                                + DecFmt.format(rec.getDouble("plcost")) + "\u0009"//30
                                + charSet(rec.getString("premark")) + "\u0009"//31
                                + charSet(rec.getString("flage")) + "\u0009"//32
                                + charSet(rec.getString("pactive")) + "\u0009"//33
                                + charSet(rec.getString("pfoodtype")) + "\u0009"//34
                                + SqlDateFmt.format(rec.getDate("plastupdate")) + "\u0009"//35
                                + charSet(rec.getString("charge1")) + "\u0009"//36
                                + charSet(rec.getString("charge2")) + "\u0009"//37
                                + charSet(rec.getString("charge3")) + "\u0009"//38
                                + charSet(rec.getString("psetselect")) + "\u0009"//39
                                + IntFmt.format(rec.getInt("psetselectqty")) + "\u0009"//40
                                //Add New 08/07/2013
                                + charSet(rec.getString("porder")) + "\u0009"//41
                                + IntFmt.format(rec.getInt("pcooktime")) + "\u0009"//42
                                + charSet(rec.getString("poption")) + "\u0009"//43
                                + charSet(rec.getString("pkicdesc")) + "\u0009"//44
                                + charSet(rec.getString("pshortdesc")) + "\u0009" //Add New 2014-05-21 //45
                                + charSet(rec.getString("psubunit")) + "\u0009"//Add New 2014-11-06 //46
                                + DecFmt3.format(rec.getDouble("pscale")) + "\u0009" //Add New 2014-11-06 //47
                                + charSet(rec.getString("fix")) + "\u0009"//Add New 2014-11-06 //48

                                /*
                                 * add new SAP mapping
                                 * sap_article, sap_article_name, sap_article_barcode, sap_article_unit, sap_article_jde, sap_article_active
                                 */
                                + us.charSet(rec.getString("sap_article")) + "\u0009"//Add New 2014-11-06//49 = no poscontrol
                                + us.charSet(rec.getString("sap_article_name")) + "\u0009"//Add New 2014-11-06//50 = no poscontrol
                                + us.charSet(rec.getString("sap_article_barcode")) + "\u0009"//Add New 2014-11-06//51
                                + us.charSet(rec.getString("sap_article_unit")) + "\u0009"//Add New 2014-11-06//52 = no poscontrol
                                + us.charSet(rec.getString("sap_article_jde")) + "\u0009"//Add New 2014-11-06//53 = no poscontrol
                                + us.charSet(rec.getString("sap_article_active")) + "\u0009"//Add New 2014-11-06//54 = no poscontrol
                                //=========================================
                                + "***End";
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendPSet(String bgroupcode) {
            String FileName = "PSet.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from pset "
                        + "order by pcode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgGroup.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("pcode")) + "\u0009"
                                + charSet(rec.getString("psubcode")) + "\u0009"
                                + IntFmt.format(rec.getInt("psubqty")) + "\u0009"
                                + IntFmt.format(rec.getInt("psetgroup")) + "\u0009"
                                + IntFmt.format(rec.getInt("psetgroupqty")) // Fro New Version
                                ;
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendPosBom(String bgroupcode) {
            String FileName = "posbom.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
//                     String SqlQuery = "select posbom.pcode,posbom.plcode,posbom.pqty,posbom.saletype,formula from posbom "
//                        + "inner join blink on posbom.pcode=blink.pcode and bformula=formula "
//                        + "where blink.bgroup='" + bgroupcode + "' "
//                        + "order by pcode,plcode ";
                String SqlQuery = "select posbom.pcode,posbom.plcode,posbom.pqty,posbom.saletype,formula from posbom "
                        + "left join blink on posbom.pcode=blink.pcode and bformula=formula "
                        + "left join product on  posbom.plcode = product.pcode "
                        + "where blink.bgroup='" + bgroupcode + "' and product.pactive='Y' "
                        + "order by pcode,plcode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgGroup.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("pcode")) + "\u0009"
                                + charSet(rec.getString("plcode")) + "\u0009"
                                + DecFmt3.format(rec.getDouble("pqty")) + "\u0009"
                                + charSet(rec.getString("saletype")) + "\u0009"
                                + IntFmt.format(rec.getInt("formula"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean wSendPSet(String bgroupcode) {
            String FileName = "PSet.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from pset "
                        + "order by pcode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgGroup.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("pcode")) + "\u0009"
                                + charSet(rec.getString("psubcode")) + "\u0009"
                                + IntFmt.format(rec.getInt("psubqty"));

                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendPCourse(String bgroupcode) {
            String FileName = "PCourse.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from pcourse "
                        + "order by pcode,pitemno ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgGroup.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("pcode")) + "\u0009"
                                + IntFmt.format(rec.getInt("pitemno")) + "\u0009"
                                + charSet(rec.getString("psubcode")) + "\u0009"
                                + IntFmt.format(rec.getInt("psubqty")) + "\u0009"
                                + IntFmt.format(rec.getInt("ptime")) + "\u0009"
                                + IntFmt.format(rec.getInt("pkictime")) + "\u0009"
                                + IntFmt.format(rec.getInt("peattime")) + "\u0009"
                                + IntFmt.format(rec.getInt("pservetime")) // Fro New Version
                                ;
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendSpOption(String bgroupcode) {
            String FileName = "Spoption.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from spoptiondetail "
                        + "order by optiongroup,level ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgGroup.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("optiongroup")) + "\u0009"
                                + charSet(rec.getString("optiondetail")) + "\u0009"
                                + IntFmt.format(rec.getInt("level")) // Fro New Version
                                ;
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendPingredent(String bgroupcode) {
            String FileName = "pingredent.txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from pingredent "
                        + "order by pcode,pingcode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgGroup.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("pcode")) + "\u0009"
                                + charSet(rec.getString("pingcode")) + "\u0009"
                                + DecFmt3.format(rec.getDouble("pingqty"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendBranch(String bgroupcode) {
            String FileName = "Bran.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from branfile "
                        + "order by code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgBranch.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("code")) + "\u0009"//0
                                + charSet(rec.getString("name")) + "\u0009"//1
                                + charSet(rec.getString("addressno")) + "\u0009"//2
                                + charSet(rec.getString("locality")) + "\u0009"//3
                                + charSet(rec.getString("subprovince")) + "\u0009"//4
                                + charSet(rec.getString("province")) + "\u0009"//5
                                + charSet(rec.getString("post")) + "\u0009"//6
                                + charSet(rec.getString("tel_no")) + "\u0009"//7
                                + charSet(rec.getString("fax_no")) + "\u0009"//8
                                + charSet(rec.getString("e_mail")) + "\u0009"//9
                                + charSet(rec.getString("manager")) + "\u0009"//10
                                + charSet(rec.getString("location_area")) + "\u0009"//11
                                + DecFmt.format(rec.getDouble("ser_area")) + "\u0009"//12
                                + DecFmt.format(rec.getDouble("cou_area")) + "\u0009"//13
                                + DecFmt.format(rec.getDouble("kic_area")) + "\u0009"//14
                                + DecFmt.format(rec.getDouble("tot_area")) + "\u0009"//15
                                + DecFmt.format(rec.getDouble("cost")) + "\u0009"//16
                                + DecFmt.format(rec.getDouble("charge")) + "\u0009"//17
                                + charSet(rec.getString("flagecost")) + "\u0009"//18
                                + DecFmt3.format(rec.getDouble("gp")) + "\u0009"//19
                                + charSet(rec.getString("flagegp")) + "\u0009"//20
                                + charSet(rec.getString("pactive")) + "\u0009"//21

                                /* add new SAP mapping
                                 **sap_site_code, sap_site_name, sap_site_type, sap_site_costcenter, sap_site_address, sap_site_locality, sap_site_cashbank
                                 */
                                + charSet(rec.getString("companycode")) + "\u0009" // modify 2016-11-14 //22
                                + us.charSet(rec.getString("sap_site_code")) + "\u0009" // modify 2016-11-07 //23
                                + us.charSet(rec.getString("sap_site_name")) + "\u0009" // modify 2016-11-07 //24
                                //                                + charSet(rec.getString("sap_site_type")) + "\u0009" // modify 2016-11-07
                                + us.charSet(rec.getString("sap_site_costcenter")) + "\u0009" // modify 2016-11-07 //25
                                + us.charSet(rec.getString("sap_site_address")) + "\u0009" // modify 2016-11-07 //26
                                + us.charSet(rec.getString("sap_site_locality")) + "\u0009" // modify 2016-11-07 //27
                                + us.charSet(rec.getString("sap_site_cashbank")) + "\u0009" // modify 2016-12-08 //28
                                + us.charSet(rec.getString("sap_tranfer")) + "\u0009" // mdify 2017-08-07 Surapol การโอนหน่วยงาน ZE7
                                + charSet(rec.getString("voidgroup"));    // For Void & Premission
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendBrancWindows(String bgroupcode) {
            String FileName = "Bran.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from branfile "
                        + "order by code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgBranch.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("code")) + "\u0009"
                                + charSet(rec.getString("name")) + "\u0009"
                                + charSet(rec.getString("addressno")) + "\u0009"
                                + charSet(rec.getString("locality")) + "\u0009"
                                + charSet(rec.getString("subprovince")) + "\u0009"
                                + charSet(rec.getString("province")) + "\u0009"
                                + charSet(rec.getString("post")) + "\u0009"
                                + charSet(rec.getString("tel_no")) + "\u0009"
                                + charSet(rec.getString("fax_no")) + "\u0009"
                                + charSet(rec.getString("e_mail")) + "\u0009"
                                + charSet(rec.getString("manager")) + "\u0009"
                                + charSet(rec.getString("location_area")) + "\u0009"
                                + DecFmt.format(rec.getDouble("ser_area")) + "\u0009"
                                + DecFmt.format(rec.getDouble("cou_area")) + "\u0009"
                                + DecFmt.format(rec.getDouble("kic_area")) + "\u0009"
                                + DecFmt.format(rec.getDouble("tot_area")) + "\u0009"
                                + DecFmt.format(rec.getDouble("cost")) + "\u0009"
                                + DecFmt.format(rec.getDouble("charge")) + "\u0009"
                                + charSet(rec.getString("flagecost")) + "\u0009"
                                + DecFmt3.format(rec.getDouble("gp")) + "\u0009"
                                + charSet(rec.getString("flagegp"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendPosconfig(String bgroupcode) {
            String FileName = "PosCon.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from posconfigsetup "
                        + "where p_terminal='" + bgroupcode + "' ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgPosconfig.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("p_terminal")) + "\u0009"
                                + DecFmt.format(rec.getDouble("p_vat")) + "\u0009"
                                + DecFmt.format(rec.getDouble("p_service")) + "\u0009"
                                + charSet(rec.getString("p_vatprn")) + "\u0009"
                                + charSet(rec.getString("p_vattype")) + "\u0009"
                                + IntFmt.format(rec.getInt("p_billcopy")) + "\u0009"
                                + charSet(rec.getString("p_billcopyone")) + "\u0009"
                                + charSet(rec.getString("p_defaultsaletype")) + "\u0009"
                                + charSet(rec.getString("p_empuse")) + "\u0009"
                                + charSet(rec.getString("p_codeprn")) + "\u0009"
                                + charSet(rec.getString("p_checkbillbeforcash")) + "\u0009"
                                + charSet(rec.getString("p_printdetailonrecp")) + "\u0009"
                                + charSet(rec.getString("p_printrecpmessage")) + "\u0009"
                                + charSet(rec.getString("p_memdisc")) + "\u0009"
                                + charSet(rec.getString("p_memdiscchk")) + "\u0009"
                                + charSet(rec.getString("p_memdiscget")) + "\u0009"
                                + charSet(rec.getString("p_memdiscmax")) + "\u0009"
                                + charSet(rec.getString("p_fastdisc")) + "\u0009"
                                + charSet(rec.getString("p_fastdiscchk")) + "\u0009"
                                + charSet(rec.getString("p_fastdiscget")) + "\u0009"
                                + charSet(rec.getString("p_fastdiscmax")) + "\u0009"
                                + charSet(rec.getString("p_empdisc")) + "\u0009"
                                + charSet(rec.getString("p_empdiscchk")) + "\u0009"
                                + charSet(rec.getString("p_empdiscget")) + "\u0009"
                                + charSet(rec.getString("p_empdiscmax")) + "\u0009"
                                + charSet(rec.getString("p_traindisc")) + "\u0009"
                                + charSet(rec.getString("p_traindiscchk")) + "\u0009"
                                + charSet(rec.getString("p_traindiscget")) + "\u0009"
                                + charSet(rec.getString("p_traindiscmax")) + "\u0009"
                                + charSet(rec.getString("p_subdisc")) + "\u0009"
                                + charSet(rec.getString("p_subdiscchk")) + "\u0009"
                                + charSet(rec.getString("p_subdiscget")) + "\u0009"
                                + charSet(rec.getString("p_subdiscmax")) + "\u0009"
                                + charSet(rec.getString("p_discbathchk")) + "\u0009"
                                + charSet(rec.getString("p_discbathmax")) + "\u0009"
                                + charSet(rec.getString("p_promotionchk")) + "\u0009"
                                + charSet(rec.getString("p_spacialchk")) + "\u0009"
                                + charSet(rec.getString("p_discround")) + "\u0009"
                                + charSet(rec.getString("p_serviceround")) + "\u0009"
                                + charSet(rec.getString("p_serchkbysaletype")) + "\u0009"
                                + charSet(rec.getString("p_discchkbysaletype")) + "\u0009"
                                + DecFmt.format(rec.getInt("p_memamount")) + "\u0009"
                                + DecFmt.format(rec.getInt("p_memscore")) + "\u0009"
                                //Addnew 08/07/2013
                                + charSet(rec.getString("p_servicetype")) + "\u0009"
                                + charSet(rec.getString("p_footer1")) + "\u0009"
                                + charSet(rec.getString("p_footer2")) + "\u0009"
                                + charSet(rec.getString("p_footer3")) + "\u0009"
                                + charSet(rec.getString("p_footer4")) + "\u0009"
                                + charSet(rec.getString("p_footer5")) + "\u0009" //Add Message5 09/07/2014
                                + charSet(rec.getString("p_discountgp")) //Add Message5 17/03/2015 Discount GP
                                ;
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendUser(String bgroupcode) {
            String FileName = "UPos.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from posuser "
                        + "order by username ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgUser.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("username")) + "\u0009"
                                + charSet(rec.getString("password")) + "\u0009"
                                + charSet(rec.getString("usergroup")) + "\u0009"
                                + charSet(rec.getString("name")) + "\u0009"
                                + "N" + "\u0009"
                                + "" + "\u0009"
                                + charSet(rec.getString("sale1")) + "\u0009"
                                + charSet(rec.getString("sale2")) + "\u0009"
                                + charSet(rec.getString("sale3")) + "\u0009"
                                + charSet(rec.getString("sale4")) + "\u0009"
                                + charSet(rec.getString("sale5")) + "\u0009"
                                + charSet(rec.getString("sale6")) + "\u0009"
                                + charSet(rec.getString("sale7")) + "\u0009"
                                + charSet(rec.getString("sale8")) + "\u0009"
                                + charSet(rec.getString("sale9")) + "\u0009"
                                + charSet(rec.getString("sale10")) + "\u0009"
                                + charSet(rec.getString("sale11")) + "\u0009"
                                + charSet(rec.getString("sale12")) + "\u0009"
                                + charSet(rec.getString("sale13")) + "\u0009"
                                + charSet(rec.getString("sale14")) + "\u0009"
                                + charSet(rec.getString("sale15")) + "\u0009"
                                + charSet(rec.getString("sale16")) + "\u0009"
                                + charSet(rec.getString("sale17")) + "\u0009"
                                + charSet(rec.getString("sale18")) + "\u0009"
                                + charSet(rec.getString("sale19")) + "\u0009"
                                + charSet(rec.getString("sale20")) + "\u0009"
                                + charSet(rec.getString("sale21")) + "\u0009"
                                + charSet(rec.getString("sale22")) + "\u0009"
                                + charSet(rec.getString("sale23")) + "\u0009"
                                + charSet(rec.getString("sale24")) + "\u0009"
                                + charSet(rec.getString("sale25")) + "\u0009"
                                + charSet(rec.getString("sale26")) + "\u0009"
                                + charSet(rec.getString("sale27")) + "\u0009"
                                + charSet(rec.getString("sale28")) + "\u0009"
                                + charSet(rec.getString("sale29")) + "\u0009"
                                + charSet(rec.getString("sale30")) + "\u0009"
                                + charSet(rec.getString("sale31")) + "\u0009"
                                + charSet(rec.getString("sale32")) + "\u0009"
                                + charSet(rec.getString("sale33")) + "\u0009"
                                + charSet(rec.getString("sale34")) + "\u0009"
                                + charSet(rec.getString("sale35")) + "\u0009"
                                + charSet(rec.getString("sale36")) + "\u0009"
                                + charSet(rec.getString("cont0")) + "\u0009"
                                + charSet(rec.getString("cont1")) + "\u0009"
                                + charSet(rec.getString("cont2")) + "\u0009"
                                + charSet(rec.getString("cont3")) + "\u0009"
                                + charSet(rec.getString("cont4")) + "\u0009"
                                + charSet(rec.getString("cont5")) + "\u0009"
                                + charSet(rec.getString("cont6")) + "\u0009"
                                + charSet(rec.getString("cont7")) + "\u0009"
                                + charSet(rec.getString("cont8")) + "\u0009"
                                + charSet(rec.getString("cont9")) + "\u0009"
                                + charSet(rec.getString("cont10")) + "\u0009"
                                + charSet(rec.getString("cont11")) + "\u0009"
                                + charSet(rec.getString("cont12")) + "\u0009"
                                + charSet(rec.getString("cont13")) + "\u0009"
                                + charSet(rec.getString("cont14")) + "\u0009"
                                + charSet(rec.getString("cont15")) + "\u0009"
                                + charSet(rec.getString("stock0")) + "\u0009"
                                + charSet(rec.getString("stock1")) + "\u0009"
                                + charSet(rec.getString("stock2")) + "\u0009"
                                + charSet(rec.getString("stock3")) + "\u0009"
                                + charSet(rec.getString("stock4")) + "\u0009"
                                + charSet(rec.getString("stock5")) + "\u0009"
                                + charSet(rec.getString("stock6")) + "\u0009"
                                + charSet(rec.getString("stock7")) + "\u0009"
                                + charSet(rec.getString("stock8")) + "\u0009"
                                + charSet(rec.getString("stock9")) + "\u0009"
                                + charSet(rec.getString("stock10")) + "\u0009"
                                + charSet(rec.getString("stock11")) + "\u0009"
                                + charSet(rec.getString("stock12")) + "\u0009"
                                + charSet(rec.getString("stock13")) + "\u0009"
                                + charSet(rec.getString("stock14")) + "\u0009"
                                + charSet(rec.getString("stock15")) + "\u0009"
                                + charSet(rec.getString("stock16")) + "\u0009"
                                + charSet(rec.getString("stock17")) + "\u0009"
                                + charSet(rec.getString("stock18")) + "\u0009"
                                + charSet(rec.getString("stock19")) + "\u0009"
                                + charSet(rec.getString("stock20")) + "\u0009"
                                + charSet(rec.getString("stock21")) + "\u0009"
                                + charSet(rec.getString("stock22")) + "\u0009"
                                + charSet(rec.getString("stock23")) + "\u0009"
                                + charSet(rec.getString("stock24")) + "\u0009"
                                + charSet(rec.getString("stock25")) + "\u0009"
                                + charSet(rec.getString("stock26")) + "\u0009"
                                + charSet(rec.getString("stock27")) + "\u0009"
                                + charSet(rec.getString("stock28")) + "\u0009"
                                + charSet(rec.getString("stock29")) + "\u0009"
                                + charSet(rec.getString("stock30")) + "\u0009"
                                + charSet(rec.getString("stock31")) + "\u0009"
                                + charSet(rec.getString("stock32")) + "\u0009"
                                + charSet(rec.getString("stock33")) + "\u0009"
                                + charSet(rec.getString("stock34")) + "\u0009"
                                + charSet(rec.getString("stock35")) + "\u0009"
                                + charSet(rec.getString("stock36")) + "\u0009"
                                + charSet(rec.getString("stock37")) + "\u0009"
                                + charSet(rec.getString("stock38")) + "\u0009"
                                + charSet(rec.getString("stock39")) + "\u0009"
                                + charSet(rec.getString("stock40")) + "\u0009"
                                + charSet(rec.getString("stock41")) + "\u0009"
                                + charSet(rec.getString("stock42")) + "\u0009"
                                + charSet(rec.getString("stock43")) + "\u0009"
                                + charSet(rec.getString("stock44")) + "\u0009"
                                + charSet(rec.getString("stock45")) + "\u0009"
                                + charSet(rec.getString("lastchangepassword")) + "\u0009"
                                + charSet(rec.getString("branchchange"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendUserGroup(String bgroupcode) {
            String FileName = "UGroup.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from usergroup "
                        + "order by username ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgUser.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("username")) + "\u0009"
                                + "" + "\u0009"
                                + "" + "\u0009"
                                + "N" + "\u0009"
                                + "" + "\u0009"
                                + charSet(rec.getString("sale1")) + "\u0009"
                                + charSet(rec.getString("sale2")) + "\u0009"
                                + charSet(rec.getString("sale3")) + "\u0009"
                                + charSet(rec.getString("sale4")) + "\u0009"
                                + charSet(rec.getString("sale5")) + "\u0009"
                                + charSet(rec.getString("sale6")) + "\u0009"
                                + charSet(rec.getString("sale7")) + "\u0009"
                                + charSet(rec.getString("sale8")) + "\u0009"
                                + charSet(rec.getString("sale9")) + "\u0009"
                                + charSet(rec.getString("sale10")) + "\u0009"
                                + charSet(rec.getString("sale11")) + "\u0009"
                                + charSet(rec.getString("sale12")) + "\u0009"
                                + charSet(rec.getString("sale13")) + "\u0009"
                                + charSet(rec.getString("sale14")) + "\u0009"
                                + charSet(rec.getString("sale15")) + "\u0009"
                                + charSet(rec.getString("sale16")) + "\u0009"
                                + charSet(rec.getString("sale17")) + "\u0009"
                                + charSet(rec.getString("sale18")) + "\u0009"
                                + charSet(rec.getString("sale19")) + "\u0009"
                                + charSet(rec.getString("sale20")) + "\u0009"
                                + charSet(rec.getString("sale21")) + "\u0009"
                                + charSet(rec.getString("sale22")) + "\u0009"
                                + charSet(rec.getString("sale23")) + "\u0009"
                                + charSet(rec.getString("sale24")) + "\u0009"
                                + charSet(rec.getString("sale25")) + "\u0009"
                                + charSet(rec.getString("sale26")) + "\u0009"
                                + charSet(rec.getString("sale27")) + "\u0009"
                                + charSet(rec.getString("sale28")) + "\u0009"
                                + charSet(rec.getString("sale29")) + "\u0009"
                                + charSet(rec.getString("sale30")) + "\u0009"
                                + charSet(rec.getString("sale31")) + "\u0009"
                                + charSet(rec.getString("sale32")) + "\u0009"
                                + charSet(rec.getString("sale33")) + "\u0009"
                                + charSet(rec.getString("sale34")) + "\u0009"
                                + charSet(rec.getString("sale35")) + "\u0009"
                                + charSet(rec.getString("sale36")) + "\u0009"
                                + charSet(rec.getString("cont0")) + "\u0009"
                                + charSet(rec.getString("cont1")) + "\u0009"
                                + charSet(rec.getString("cont2")) + "\u0009"
                                + charSet(rec.getString("cont3")) + "\u0009"
                                + charSet(rec.getString("cont4")) + "\u0009"
                                + charSet(rec.getString("cont5")) + "\u0009"
                                + charSet(rec.getString("cont6")) + "\u0009"
                                + charSet(rec.getString("cont7")) + "\u0009"
                                + charSet(rec.getString("cont8")) + "\u0009"
                                + charSet(rec.getString("cont9")) + "\u0009"
                                + charSet(rec.getString("cont10")) + "\u0009"
                                + charSet(rec.getString("cont11")) + "\u0009"
                                + charSet(rec.getString("cont12")) + "\u0009"
                                + charSet(rec.getString("cont13")) + "\u0009"
                                + charSet(rec.getString("cont14")) + "\u0009"
                                + charSet(rec.getString("cont15")) + "\u0009"
                                + charSet(rec.getString("stock0")) + "\u0009"
                                + charSet(rec.getString("stock1")) + "\u0009"
                                + charSet(rec.getString("stock2")) + "\u0009"
                                + charSet(rec.getString("stock3")) + "\u0009"
                                + charSet(rec.getString("stock4")) + "\u0009"
                                + charSet(rec.getString("stock5")) + "\u0009"
                                + charSet(rec.getString("stock6")) + "\u0009"
                                + charSet(rec.getString("stock7")) + "\u0009"
                                + charSet(rec.getString("stock8")) + "\u0009"
                                + charSet(rec.getString("stock9")) + "\u0009"
                                + charSet(rec.getString("stock10")) + "\u0009"
                                + charSet(rec.getString("stock11")) + "\u0009"
                                + charSet(rec.getString("stock12")) + "\u0009"
                                + charSet(rec.getString("stock13")) + "\u0009"
                                + charSet(rec.getString("stock14")) + "\u0009"
                                + charSet(rec.getString("stock15")) + "\u0009"
                                + charSet(rec.getString("stock16")) + "\u0009"
                                + charSet(rec.getString("stock17")) + "\u0009"
                                + charSet(rec.getString("stock18")) + "\u0009"
                                + charSet(rec.getString("stock19")) + "\u0009"
                                + charSet(rec.getString("stock20")) + "\u0009"
                                + charSet(rec.getString("stock21")) + "\u0009"
                                + charSet(rec.getString("stock22")) + "\u0009"
                                + charSet(rec.getString("stock23")) + "\u0009"
                                + charSet(rec.getString("stock24")) + "\u0009"
                                + charSet(rec.getString("stock25")) + "\u0009"
                                + charSet(rec.getString("stock26")) + "\u0009"
                                + charSet(rec.getString("stock27")) + "\u0009"
                                + charSet(rec.getString("stock28")) + "\u0009"
                                + charSet(rec.getString("stock29")) + "\u0009"
                                + charSet(rec.getString("stock30")) + "\u0009"
                                + charSet(rec.getString("stock31")) + "\u0009"
                                + charSet(rec.getString("stock32")) + "\u0009"
                                + charSet(rec.getString("stock33")) + "\u0009"
                                + charSet(rec.getString("stock34")) + "\u0009"
                                + charSet(rec.getString("stock35")) + "\u0009"
                                + charSet(rec.getString("stock36")) + "\u0009"
                                + charSet(rec.getString("stock37")) + "\u0009"
                                + charSet(rec.getString("stock38")) + "\u0009"
                                + charSet(rec.getString("stock39")) + "\u0009"
                                + charSet(rec.getString("stock40")) + "\u0009"
                                + charSet(rec.getString("stock41")) + "\u0009"
                                + charSet(rec.getString("stock42")) + "\u0009"
                                + charSet(rec.getString("stock43")) + "\u0009"
                                + charSet(rec.getString("stock44")) + "\u0009"
                                + charSet(rec.getString("stock45"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendMenulist(String bgroupcode) {
            String FileName = "menulist.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from menulist "
                        + "inner join menulink on menulink.menucode=menulist.menucode "
                        + "where bgroup='" + bgroupcode + "' "
                        + "order by menulist.menucode,menuitem ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgMenu.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("menucode")) + "\u0009"
                                + IntFmt.format(rec.getInt("menuitem")) + "\u0009"
                                + charSet(rec.getString("plucode")) + "\u0009"
                                + charSet(rec.getString("menuactive"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean Sendeffective(String bgroupcode) {
            String FileName = "effective.txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from effective "
                        + "where bgroup='" + bgroupcode + "' and eff_date>'" + SqlDateFmt.format(new Date()) + "' "
                        + "order by eff_date,pcode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgEff.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("eff_date")) + "\u0009"
                                + charSet(rec.getString("pcode")) + "\u0009"
                                + DecFmt.format(rec.getDouble("price1")) + "\u0009"
                                + DecFmt.format(rec.getDouble("price2")) + "\u0009"
                                + DecFmt.format(rec.getDouble("price3")) + "\u0009"
                                + DecFmt.format(rec.getDouble("price4")) + "\u0009"
                                + DecFmt.format(rec.getDouble("price5")) + "\u0009"
                                + charSet(rec.getString("promotion1")) + "\u0009"
                                + charSet(rec.getString("promotion2")) + "\u0009"
                                + charSet(rec.getString("promotion3"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendCharge(String bgroupcode) {
            String FileName = "chargemaster.txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from chargemaster "
                        + "order by chargegroup,chargecode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgCharge.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("chargecode")) + "\u0009"//0
                                + charSet(rec.getString("chargename")) + "\u0009"//1
                                + charSet(rec.getString("chargegroup")) + "\u0009"//2
                                + charSet(rec.getString("chargebegindate")) + "\u0009"//3
                                + charSet(rec.getString("chargeexpdate")) + "\u0009"//4
                                + DecFmt.format(rec.getDouble("chargeamount")) + "\u0009"//5
                                + charSet(rec.getString("chargestatus")) + "\u0009"//6
                                + charSet(rec.getString("lastupdatefromhr")) + "\u0009"//7
                                + us.charSet(rec.getString("c_costcenter"));//SAP //8
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendChargeBranch(String bgroupcode) {
            String FileName = "chargebranch.txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from branfile "
                        + "order by code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgCharge.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("code")) + "\u0009"
                                + charSet(rec.getString("usercharge")) + "\u0009"
                                + charSet(rec.getString("chargestart")) + "\u0009"
                                + charSet(rec.getString("chargeexp"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendChargeType(String bgroupcode) {
            String FileName = "chargetype.txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from chargetype "
                        + "order by chargetypecode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgCharge.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("chargetypecode")) + "\u0009"
                                + charSet(rec.getString("chargetypename")) + "\u0009"
                                + charSet(rec.getString("chargepersonal")) + "\u0009"
                                + charSet(rec.getString("chargepersonalstart")) + "\u0009"
                                + charSet(rec.getString("chargepersonalstop")) + "\u0009"
                                + charSet(rec.getString("chargedepartment")) + "\u0009"
                                + charSet(rec.getString("chargedepartmentstart")) + "\u0009"
                                + charSet(rec.getString("chargedepartmentstop"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendChargeConfig(String bgroupcode) {
            String FileName = "chargeconfig.txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from chargeconfig ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgCharge.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + DecFmt.format(rec.getDouble("posdownprice")) + "\u0009"
                                + DecFmt.format(rec.getDouble("accdownprice"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendChargeSaleType(String bgroupcode) {
            String FileName = "chargesaletype.txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from chargesaletype ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgCharge.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("d_charge")) + "\u0009"
                                + charSet(rec.getString("p_charge")) + "\u0009"
                                + charSet(rec.getString("s_charge"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendChargeSpecial(String bgroupcode) {
            String FileName = "chargespecial.txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from chargespecial ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgCharge.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("chargecode")) + "\u0009"
                                + charSet(rec.getString("startdate")) + "\u0009"
                                + charSet(rec.getString("stopdate"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean wSendCredit(String bgroupcode) {
            String FileName = "Credit.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();

            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from creditfile order by crcode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgCredit.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("crbank")) + "\u0009"
                                + charSet(rec.getString("crcode")) + "\u0009"
                                + charSet(rec.getString("crname")) + "\u0009"
                                + DecFmt.format(rec.getDouble("crcharge")) + "\u0009"
                                + charSet(rec.getString("crgetcardno")) + "\u0009"
                                + DecFmt.format(rec.getDouble("crredule"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean wSendCoupon(String bgroupcode) {
            String FileName = "Cupon.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from culink "
                        + "inner join cupon on cupon.cucode=culink.cucode "
                        + "where culink.bgroup='" + bgroupcode + "' "
                        + "order by cupon.cucode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgCoupon.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + "***New" + "\u0009"
                                + charSet(rec.getString("cucode")) + "\u0009"
                                + charSet(rec.getString("cuname")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("cubegin")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("cuend")) + "\u0009"
                                + charSet(rec.getString("cutype")) + "\u0009"
                                + charSet(rec.getString("custrday")) + "\u0009"
                                + DecFmt.format(rec.getDouble("cudisc")) + "\u0009"
                                + DecFmt.format(rec.getDouble("cudiscbath")) + "\u0009"
                                + charSet(rec.getString("chkmember")) + "\u0009"
                                + "***End";
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean wSendCouponList(String bgroupcode) {
            String FileName = "CuList.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from cuponlist "
                        + "left join culink on cuponlist.cucode=culink.cucode "
                        + "where culink.bgroup='" + bgroupcode + "' "
                        + "order by cuponlist.cucode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgCredit.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("cucode")) + "\u0009"
                                + charSet(rec.getString("pcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean wSendBank(String bgroupcode) {
            String FileName = "Bank.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from bankfile "
                        + "order by bcode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgBank.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("bcode")) + "\u0009"
                                + charSet(rec.getString("bname"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean wSendProtab(String bgroupcode) {
            String FileName = "ProTab.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from protab "
                        + "order by procode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgPromotion.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + "***New" + "\u0009"
                                + charSet(rec.getString("procode")) + "\u0009"
                                + charSet(rec.getString("prodesc")) + "\u0009"
                                + charSet(rec.getString("pstrday")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("pdate1")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("pdate2")) + "\u0009"
                                + charSet(rec.getString("ptime1s")) + "\u0009"
                                + charSet(rec.getString("ptime1e")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pdisc1")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pspdisc1")) + "\u0009"
                                + charSet(rec.getString("pts1")) + "\u0009"
                                + charSet(rec.getString("ptime2s")) + "\u0009"
                                + charSet(rec.getString("ptime2e")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pdisc2")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pspdisc2")) + "\u0009"
                                + charSet(rec.getString("pts2")) + "\u0009"
                                + charSet(rec.getString("ptime3s")) + "\u0009"
                                + charSet(rec.getString("ptime3e")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pdisc3")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pspdisc3")) + "\u0009"
                                + charSet(rec.getString("pts3")) + "\u0009"
                                + charSet(rec.getString("ptype")) + "\u0009"
                                + DecFmt.format(rec.getDouble("psale1")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pfree1")) + "\u0009"
                                + DecFmt.format(rec.getDouble("psum1")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pdiscfree1")) + "\u0009"
                                + DecFmt.format(rec.getDouble("psale41")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pfree41")) + "\u0009"
                                + DecFmt.format(rec.getDouble("psale2")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pfree2")) + "\u0009"
                                + DecFmt.format(rec.getDouble("psum2")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pdiscfree2")) + "\u0009"
                                + DecFmt.format(rec.getDouble("psale42")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pfree42")) + "\u0009"
                                + DecFmt.format(rec.getDouble("psale3")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pfree3")) + "\u0009"
                                + DecFmt.format(rec.getDouble("psum3")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pdiscfree3")) + "\u0009"
                                + DecFmt.format(rec.getDouble("psale43")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pfree43")) + "\u0009"
                                //protype6 ช่วง1
                                + IntFmt.format(rec.getDouble("PQuan611")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer611")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht611")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan612")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer612")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht612")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan613")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer613")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht613")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan614")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer614")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht614")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan615")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer615")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht615")) + "\u0009"
                                //protype6 ช่วง2
                                + IntFmt.format(rec.getDouble("PQuan621")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer621")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht621")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan622")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer622")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht622")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan623")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer623")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht623")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan624")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer624")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht624")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan625")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer625")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht625")) + "\u0009"
                                //protype6 ช่วง3
                                + IntFmt.format(rec.getDouble("PQuan631")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer631")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht631")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan632")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer632")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht632")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan633")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer633")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht633")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan634")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer634")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht634")) + "\u0009"
                                + IntFmt.format(rec.getDouble("PQuan635")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer635")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht635")) + "\u0009"
                                //protype7 ช่วง1
                                + DecFmt.format(rec.getDouble("PAmt711")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer711")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht711")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt712")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer712")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht712")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt713")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer713")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht713")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt714")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer714")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht714")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt715")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer715")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht715")) + "\u0009"
                                //protype7 ช่วง2
                                + DecFmt.format(rec.getDouble("PAmt721")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer721")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht721")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt722")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer722")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht722")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt723")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer723")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht723")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt724")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer724")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht724")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt725")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer725")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht725")) + "\u0009"
                                //protype7 ช่วง3
                                + DecFmt.format(rec.getDouble("PAmt731")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer731")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht731")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt732")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer732")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht732")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt733")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer733")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht733")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt734")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer734")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht734")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PAmt735")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscPer735")) + "\u0009"
                                + DecFmt.format(rec.getDouble("PDiscBaht735")) + "\u0009"
                                + "***End";
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean wSendDept(String bgroupcode) {
            String FileName = "Depart.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from groupfile "
                        + "order by groupcode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgGroup.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("groupcode")) + "\u0009"
                                + charSet(rec.getString("groupname"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean wSendVender(String bgroupcode) {
            String FileName = "Supplier.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from vender "
                        + "order by vcode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgVender.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr
                                + charSet(rec.getString("vcode")) + "\u0009"
                                + "" + "\u0009"
                                + charSet(rec.getString("vname")) + "\u0009"
                                + charSet(rec.getString("vaddress")) + "\u0009"
                                + "" + "\u0009"
                                + charSet(rec.getString("vcontack")) + "\u0009"
                                + charSet(rec.getString("vtel")) + "\u0009"
                                + charSet(rec.getString("vfax")) + "\u0009"
                                + charSet(rec.getString("vremark")) + "\u0009"
                                + SqlDateFmt.format(new Date()) + "\u0009"
                                + "";
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean wSendProduct(String bgroupcode) {
            String FileName = "Templu.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from blink "
                        + "inner join product on product.pcode=blink.pcode "
                        + "where blink.bgroup='" + bgroupcode + "' "
                        + "order by product.pcode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgProduct.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + "***New" + "\u0009"
                                + charSet(rec.getString("pcode")) + "\u0009"
                                + charSet(rec.getString("pbarcode")) + "\u0009"
                                + charSet(rec.getString("pdesc")) + "\u0009"
                                + charSet(rec.getString("preferent")) + "\u0009"
                                + charSet(rec.getString("punit1")) + "\u0009"
                                + charSet(rec.getString("parea")) + "\u0009"
                                + charSet(rec.getString("pnormal")) + "\u0009"
                                + charSet(rec.getString("pdiscount")) + "\u0009"
                                + charSet(rec.getString("pvat")) + "\u0009"
                                + charSet(rec.getString("ptype")) + "\u0009"
                                + charSet(rec.getString("pset")) + "\u0009"
                                + charSet(rec.getString("pstatus")) + "\u0009"
                                + charSet(rec.getString("pstock")) + "\u0009"
                                + charSet(rec.getString("pkic")) + "\u0009"
                                + charSet(rec.getString("pservice")) + "\u0009"
                                + charSet(rec.getString("pgroup")) + "\u0009"
                                + charSet(rec.getString("pvender")) + "\u0009"
                                + DecFmt.format(rec.getDouble("price1")) + "\u0009"
                                + DecFmt.format(rec.getDouble("price2")) + "\u0009"
                                + DecFmt.format(rec.getDouble("price3")) + "\u0009"
                                + DecFmt.format(rec.getDouble("price4")) + "\u0009"
                                + DecFmt.format(rec.getDouble("price5")) + "\u0009"
                                + charSet(rec.getString("promotion1")) + "\u0009"
                                + charSet(rec.getString("promotion2")) + "\u0009"
                                + charSet(rec.getString("promotion3")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pmax")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pmin")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pscost")) + "\u0009"
                                + DecFmt.format(rec.getDouble("pacost")) + "\u0009"
                                + DecFmt.format(rec.getDouble("plcost")) + "\u0009"
                                + charSet(rec.getString("premark")) + "\u0009"
                                + charSet(rec.getString("flage")) + "\u0009"
                                + charSet(rec.getString("pactive")) + "\u0009"
                                + charSet(rec.getString("pfoodtype")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("plastupdate")) + "\u0009"
                                + "***End";
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean wSendBranch(String bgroupcode) {
            String FileName = "Bran.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from branfile "
                        + "order by code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgBranch.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("code")) + "\u0009"
                                + charSet(rec.getString("name")) + "\u0009"
                                + charSet(rec.getString("addressno")) + "\u0009"
                                + charSet(rec.getString("locality")) + "\u0009"
                                + charSet(rec.getString("subprovince")) + "\u0009"
                                + charSet(rec.getString("province")) + "\u0009"
                                + charSet(rec.getString("post")) + "\u0009"
                                + charSet(rec.getString("tel_no")) + "\u0009"
                                + charSet(rec.getString("fax_no")) + "\u0009"
                                + charSet(rec.getString("e_mail")) + "\u0009"
                                + charSet(rec.getString("manager")) + "\u0009"
                                + charSet(rec.getString("location_area")) + "\u0009"
                                + DecFmt.format(rec.getDouble("ser_area")) + "\u0009"
                                + DecFmt.format(rec.getDouble("cou_area")) + "\u0009"
                                + DecFmt.format(rec.getDouble("kic_area")) + "\u0009"
                                + DecFmt.format(rec.getDouble("tot_area")) + "\u0009"
                                + DecFmt.format(rec.getDouble("cost")) + "\u0009"
                                + DecFmt.format(rec.getDouble("charge")) + "\u0009"
                                + charSet(rec.getString("flagecost")) + "\u0009"
                                + DecFmt3.format(rec.getDouble("gp")) + "\u0009"
                                + charSet(rec.getString("flagegp"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean wSendPosconfig(String bgroupcode) {
            String FileName = "PosCon.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from posconfigsetup "
                        + "where p_terminal='" + bgroupcode + "' ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgPosconfig.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("p_terminal")) + "\u0009"
                                + DecFmt.format(rec.getDouble("p_vat")) + "\u0009"
                                + DecFmt.format(rec.getDouble("p_service")) + "\u0009"
                                + charSet(rec.getString("p_vatprn")) + "\u0009"
                                + charSet(rec.getString("p_vattype")) + "\u0009"
                                + IntFmt.format(rec.getInt("p_billcopy")) + "\u0009"
                                + charSet(rec.getString("p_billcopyone")) + "\u0009"
                                + charSet(rec.getString("p_defaultsaletype")) + "\u0009"
                                + charSet(rec.getString("p_empuse")) + "\u0009"
                                + charSet(rec.getString("p_codeprn")) + "\u0009"
                                + charSet(rec.getString("p_checkbillbeforcash")) + "\u0009"
                                + charSet(rec.getString("p_printdetailonrecp")) + "\u0009"
                                + charSet(rec.getString("p_printrecpmessage")) + "\u0009"
                                + charSet(rec.getString("p_memdisc")) + "\u0009"
                                + charSet(rec.getString("p_memdiscchk")) + "\u0009"
                                + charSet(rec.getString("p_memdiscget")) + "\u0009"
                                + charSet(rec.getString("p_memdiscmax")) + "\u0009"
                                + charSet(rec.getString("p_fastdisc")) + "\u0009"
                                + charSet(rec.getString("p_fastdiscchk")) + "\u0009"
                                + charSet(rec.getString("p_fastdiscget")) + "\u0009"
                                + charSet(rec.getString("p_fastdiscmax")) + "\u0009"
                                + charSet(rec.getString("p_empdisc")) + "\u0009"
                                + charSet(rec.getString("p_empdiscchk")) + "\u0009"
                                + charSet(rec.getString("p_empdiscget")) + "\u0009"
                                + charSet(rec.getString("p_empdiscmax")) + "\u0009"
                                + charSet(rec.getString("p_traindisc")) + "\u0009"
                                + charSet(rec.getString("p_traindiscchk")) + "\u0009"
                                + charSet(rec.getString("p_traindiscget")) + "\u0009"
                                + charSet(rec.getString("p_traindiscmax")) + "\u0009"
                                + charSet(rec.getString("p_subdisc")) + "\u0009"
                                + charSet(rec.getString("p_subdiscchk")) + "\u0009"
                                + charSet(rec.getString("p_subdiscget")) + "\u0009"
                                + charSet(rec.getString("p_subdiscmax")) + "\u0009"
                                + charSet(rec.getString("p_discbathchk")) + "\u0009"
                                + charSet(rec.getString("p_discbathmax")) + "\u0009"
                                + charSet(rec.getString("p_promotionchk")) + "\u0009"
                                + charSet(rec.getString("p_spacialchk")) + "\u0009"
                                + charSet(rec.getString("p_discround")) + "\u0009"
                                + charSet(rec.getString("p_serviceround")) + "\u0009"
                                + charSet(rec.getString("p_serchkbysaletype")) + "\u0009"
                                + charSet(rec.getString("p_discchkbysaletype"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean wSendUser(String bgroupcode) {
            String FileName = "UPos.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from posuser "
                        + "order by username ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgUser.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("username")) + "\u0009"
                                + charSet(rec.getString("password")) + "\u0009"
                                + charSet(rec.getString("usergroup")) + "\u0009"
                                + charSet(rec.getString("name")) + "\u0009"
                                + "N" + "\u0009"
                                + "" + "\u0009"
                                + charSet(rec.getString("sale1")) + "\u0009"
                                + charSet(rec.getString("sale2")) + "\u0009"
                                + charSet(rec.getString("sale3")) + "\u0009"
                                + charSet(rec.getString("sale4")) + "\u0009"
                                + charSet(rec.getString("sale5")) + "\u0009"
                                + charSet(rec.getString("sale6")) + "\u0009"
                                + charSet(rec.getString("sale7")) + "\u0009"
                                + charSet(rec.getString("sale8")) + "\u0009"
                                + charSet(rec.getString("sale9")) + "\u0009"
                                + charSet(rec.getString("sale10")) + "\u0009"
                                + charSet(rec.getString("sale11")) + "\u0009"
                                + charSet(rec.getString("sale12")) + "\u0009"
                                + charSet(rec.getString("sale13")) + "\u0009"
                                + charSet(rec.getString("sale14")) + "\u0009"
                                + charSet(rec.getString("sale15")) + "\u0009"
                                + charSet(rec.getString("sale16")) + "\u0009"
                                + charSet(rec.getString("sale17")) + "\u0009"
                                + charSet(rec.getString("sale18")) + "\u0009"
                                + charSet(rec.getString("sale19")) + "\u0009"
                                + charSet(rec.getString("sale20")) + "\u0009"
                                + charSet(rec.getString("sale21")) + "\u0009"
                                + charSet(rec.getString("sale22")) + "\u0009"
                                + charSet(rec.getString("sale23")) + "\u0009"
                                + charSet(rec.getString("sale24")) + "\u0009"
                                + charSet(rec.getString("sale25")) + "\u0009"
                                + charSet(rec.getString("sale26")) + "\u0009"
                                + charSet(rec.getString("sale27")) + "\u0009"
                                + charSet(rec.getString("sale28")) + "\u0009"
                                + charSet(rec.getString("sale29")) + "\u0009"
                                + charSet(rec.getString("sale30")) + "\u0009"
                                + charSet(rec.getString("sale31")) + "\u0009"
                                + charSet(rec.getString("sale32")) + "\u0009"
                                + charSet(rec.getString("sale33")) + "\u0009"
                                + charSet(rec.getString("sale34")) + "\u0009"
                                + charSet(rec.getString("sale35")) + "\u0009"
                                + charSet(rec.getString("sale36")) + "\u0009"
                                + charSet(rec.getString("cont0")) + "\u0009"
                                + charSet(rec.getString("cont1")) + "\u0009"
                                + charSet(rec.getString("cont2")) + "\u0009"
                                + charSet(rec.getString("cont3")) + "\u0009"
                                + charSet(rec.getString("cont4")) + "\u0009"
                                + charSet(rec.getString("cont5")) + "\u0009"
                                + charSet(rec.getString("cont6")) + "\u0009"
                                + charSet(rec.getString("cont7")) + "\u0009"
                                + charSet(rec.getString("cont8")) + "\u0009"
                                + charSet(rec.getString("cont9")) + "\u0009"
                                + charSet(rec.getString("cont10")) + "\u0009"
                                + charSet(rec.getString("cont11")) + "\u0009"
                                + charSet(rec.getString("cont12")) + "\u0009"
                                + charSet(rec.getString("cont13")) + "\u0009"
                                + charSet(rec.getString("cont14")) + "\u0009"
                                + charSet(rec.getString("cont15")) + "\u0009"
                                + charSet(rec.getString("stock0")) + "\u0009"
                                + charSet(rec.getString("stock1")) + "\u0009"
                                + charSet(rec.getString("stock2")) + "\u0009"
                                + charSet(rec.getString("stock3")) + "\u0009"
                                + charSet(rec.getString("stock4")) + "\u0009"
                                + charSet(rec.getString("stock5")) + "\u0009"
                                + charSet(rec.getString("stock6")) + "\u0009"
                                + charSet(rec.getString("stock7")) + "\u0009"
                                + charSet(rec.getString("stock8")) + "\u0009"
                                + charSet(rec.getString("stock9")) + "\u0009"
                                + charSet(rec.getString("stock10")) + "\u0009"
                                + charSet(rec.getString("stock11")) + "\u0009"
                                + charSet(rec.getString("stock12")) + "\u0009"
                                + charSet(rec.getString("stock13")) + "\u0009"
                                + charSet(rec.getString("stock14")) + "\u0009"
                                + charSet(rec.getString("stock15")) + "\u0009"
                                + charSet(rec.getString("stock16")) + "\u0009"
                                + charSet(rec.getString("stock17")) + "\u0009"
                                + charSet(rec.getString("stock18")) + "\u0009"
                                + charSet(rec.getString("stock19")) + "\u0009"
                                + charSet(rec.getString("stock20")) + "\u0009"
                                + charSet(rec.getString("stock21")) + "\u0009"
                                + charSet(rec.getString("stock22")) + "\u0009"
                                + charSet(rec.getString("stock23")) + "\u0009"
                                + charSet(rec.getString("stock24")) + "\u0009"
                                + charSet(rec.getString("stock25")) + "\u0009"
                                + charSet(rec.getString("stock26")) + "\u0009"
                                + charSet(rec.getString("stock27")) + "\u0009"
                                + charSet(rec.getString("stock28")) + "\u0009"
                                + charSet(rec.getString("stock29")) + "\u0009"
                                + charSet(rec.getString("stock30")) + "\u0009"
                                + charSet(rec.getString("stock31")) + "\u0009"
                                + charSet(rec.getString("stock32")) + "\u0009"
                                + charSet(rec.getString("stock33")) + "\u0009"
                                + charSet(rec.getString("stock34")) + "\u0009"
                                + charSet(rec.getString("stock35")) + "\u0009"
                                + charSet(rec.getString("stock36")) + "\u0009"
                                + charSet(rec.getString("stock37")) + "\u0009"
                                + charSet(rec.getString("stock38")) + "\u0009"
                                + charSet(rec.getString("stock39")) + "\u0009"
                                + charSet(rec.getString("stock40")) + "\u0009"
                                + charSet(rec.getString("stock41")) + "\u0009"
                                + charSet(rec.getString("stock42")) + "\u0009"
                                + charSet(rec.getString("stock43")) + "\u0009"
                                + charSet(rec.getString("stock44")) + "\u0009"
                                + charSet(rec.getString("stock45")) + "\u0009"
                                + charSet(rec.getString("lastchangepassword")) + "\u0009"
                                + charSet(rec.getString("branchchange"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean wSendUserGroup(String bgroupcode) {
            String FileName = "UGroup.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from usergroup "
                        + "order by username ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgUser.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("username")) + "\u0009"
                                + "" + "\u0009"
                                + "" + "\u0009"
                                + "N" + "\u0009"
                                + "" + "\u0009"
                                + charSet(rec.getString("sale1")) + "\u0009"
                                + charSet(rec.getString("sale2")) + "\u0009"
                                + charSet(rec.getString("sale3")) + "\u0009"
                                + charSet(rec.getString("sale4")) + "\u0009"
                                + charSet(rec.getString("sale5")) + "\u0009"
                                + charSet(rec.getString("sale6")) + "\u0009"
                                + charSet(rec.getString("sale7")) + "\u0009"
                                + charSet(rec.getString("sale8")) + "\u0009"
                                + charSet(rec.getString("sale9")) + "\u0009"
                                + charSet(rec.getString("sale10")) + "\u0009"
                                + charSet(rec.getString("sale11")) + "\u0009"
                                + charSet(rec.getString("sale12")) + "\u0009"
                                + charSet(rec.getString("sale13")) + "\u0009"
                                + charSet(rec.getString("sale14")) + "\u0009"
                                + charSet(rec.getString("sale15")) + "\u0009"
                                + charSet(rec.getString("sale16")) + "\u0009"
                                + charSet(rec.getString("sale17")) + "\u0009"
                                + charSet(rec.getString("sale18")) + "\u0009"
                                + charSet(rec.getString("sale19")) + "\u0009"
                                + charSet(rec.getString("sale20")) + "\u0009"
                                + charSet(rec.getString("sale21")) + "\u0009"
                                + charSet(rec.getString("sale22")) + "\u0009"
                                + charSet(rec.getString("sale23")) + "\u0009"
                                + charSet(rec.getString("sale24")) + "\u0009"
                                + charSet(rec.getString("sale25")) + "\u0009"
                                + charSet(rec.getString("sale26")) + "\u0009"
                                + charSet(rec.getString("sale27")) + "\u0009"
                                + charSet(rec.getString("sale28")) + "\u0009"
                                + charSet(rec.getString("sale29")) + "\u0009"
                                + charSet(rec.getString("sale30")) + "\u0009"
                                + charSet(rec.getString("sale31")) + "\u0009"
                                + charSet(rec.getString("sale32")) + "\u0009"
                                + charSet(rec.getString("sale33")) + "\u0009"
                                + charSet(rec.getString("sale34")) + "\u0009"
                                + charSet(rec.getString("sale35")) + "\u0009"
                                + charSet(rec.getString("sale36")) + "\u0009"
                                + charSet(rec.getString("cont0")) + "\u0009"
                                + charSet(rec.getString("cont1")) + "\u0009"
                                + charSet(rec.getString("cont2")) + "\u0009"
                                + charSet(rec.getString("cont3")) + "\u0009"
                                + charSet(rec.getString("cont4")) + "\u0009"
                                + charSet(rec.getString("cont5")) + "\u0009"
                                + charSet(rec.getString("cont6")) + "\u0009"
                                + charSet(rec.getString("cont7")) + "\u0009"
                                + charSet(rec.getString("cont8")) + "\u0009"
                                + charSet(rec.getString("cont9")) + "\u0009"
                                + charSet(rec.getString("cont10")) + "\u0009"
                                + charSet(rec.getString("cont11")) + "\u0009"
                                + charSet(rec.getString("cont12")) + "\u0009"
                                + charSet(rec.getString("cont13")) + "\u0009"
                                + charSet(rec.getString("cont14")) + "\u0009"
                                + charSet(rec.getString("cont15")) + "\u0009"
                                + charSet(rec.getString("stock0")) + "\u0009"
                                + charSet(rec.getString("stock1")) + "\u0009"
                                + charSet(rec.getString("stock2")) + "\u0009"
                                + charSet(rec.getString("stock3")) + "\u0009"
                                + charSet(rec.getString("stock4")) + "\u0009"
                                + charSet(rec.getString("stock5")) + "\u0009"
                                + charSet(rec.getString("stock6")) + "\u0009"
                                + charSet(rec.getString("stock7")) + "\u0009"
                                + charSet(rec.getString("stock8")) + "\u0009"
                                + charSet(rec.getString("stock9")) + "\u0009"
                                + charSet(rec.getString("stock10")) + "\u0009"
                                + charSet(rec.getString("stock11")) + "\u0009"
                                + charSet(rec.getString("stock12")) + "\u0009"
                                + charSet(rec.getString("stock13")) + "\u0009"
                                + charSet(rec.getString("stock14")) + "\u0009"
                                + charSet(rec.getString("stock15")) + "\u0009"
                                + charSet(rec.getString("stock16")) + "\u0009"
                                + charSet(rec.getString("stock17")) + "\u0009"
                                + charSet(rec.getString("stock18")) + "\u0009"
                                + charSet(rec.getString("stock19")) + "\u0009"
                                + charSet(rec.getString("stock20")) + "\u0009"
                                + charSet(rec.getString("stock21")) + "\u0009"
                                + charSet(rec.getString("stock22")) + "\u0009"
                                + charSet(rec.getString("stock23")) + "\u0009"
                                + charSet(rec.getString("stock24")) + "\u0009"
                                + charSet(rec.getString("stock25")) + "\u0009"
                                + charSet(rec.getString("stock26")) + "\u0009"
                                + charSet(rec.getString("stock27")) + "\u0009"
                                + charSet(rec.getString("stock28")) + "\u0009"
                                + charSet(rec.getString("stock29")) + "\u0009"
                                + charSet(rec.getString("stock30")) + "\u0009"
                                + charSet(rec.getString("stock31")) + "\u0009"
                                + charSet(rec.getString("stock32")) + "\u0009"
                                + charSet(rec.getString("stock33")) + "\u0009"
                                + charSet(rec.getString("stock34")) + "\u0009"
                                + charSet(rec.getString("stock35")) + "\u0009"
                                + charSet(rec.getString("stock36")) + "\u0009"
                                + charSet(rec.getString("stock37")) + "\u0009"
                                + charSet(rec.getString("stock38")) + "\u0009"
                                + charSet(rec.getString("stock39")) + "\u0009"
                                + charSet(rec.getString("stock40")) + "\u0009"
                                + charSet(rec.getString("stock41")) + "\u0009"
                                + charSet(rec.getString("stock42")) + "\u0009"
                                + charSet(rec.getString("stock43")) + "\u0009"
                                + charSet(rec.getString("stock44")) + "\u0009"
                                + charSet(rec.getString("stock45"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        private boolean SendEStampCampaign() {
            String FileName = "EStampCampaign.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from stampcampaign "
                        + "order by s_campaigncode ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        msgestamp.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + "***New" + "\u0009"
                                + charSet(rec.getString("s_campaigncode")) + "\u0009"
                                + charSet(rec.getString("s_campaignname")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("s_campaignstart")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("s_campaignend")) + "\u0009"
                                + charSet(rec.getString("s_campaignremark"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        private boolean SendEStampPromotion() {
            String FileName = "EStampPromotion.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from stamppromotion "
                        + "order by sp_code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;

                        TempStr = TempStr + "***New" + "\u0009"
                                + charSet(rec.getString("sp_campaign")) + "\u0009"
                                + charSet(rec.getString("sp_code")) + "\u0009"
                                + charSet(rec.getString("sp_name")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("sp_startdate")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("sp_enddate")) + "\u0009"
                                + charSet(rec.getString("sp_day")) + "\u0009"
                                + charSet(rec.getString("sp_saletype")) + "\u0009"
                                + charSet(rec.getString("sp_saletimeS")) + "\u0009"
                                + charSet(rec.getString("sp_saletimeE")) + "\u0009"
                                + IntFmt.format(rec.getInt("sp_saleitem")) + "\u0009"
                                + IntFmt.format(rec.getInt("sp_point")) + "\u0009"
                                + charSet(rec.getString("sp_usepro")) + "\u0009" //add new estamp
                                + charSet(rec.getString("sp_joycard")); //add new estamp
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        private boolean SendEStampProFixBranchGroup() {
            String FileName = "EStampProFixBranchGroup.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from stamppro_linkbgroup "
                        + "order by s_code,sp_code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgBank.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("s_code")) + "\u0009"
                                + charSet(rec.getString("sp_code")) + "\u0009"
                                + charSet(rec.getString("bgcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        private boolean SendEStampProFixBranch() {
            String FileName = "EStampProFixBranch.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from stamppro_linkbranch "
                        + "order by s_code,sp_code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgBank.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("s_code")) + "\u0009"
                                + charSet(rec.getString("sp_code")) + "\u0009"
                                + charSet(rec.getString("bcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        private boolean SendEStampProFixPlu() {
            String FileName = "EStampProFixPlu.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from stamppro_linkplu "
                        + "order by s_code,sp_code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgBank.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("s_code")) + "\u0009"
                                + charSet(rec.getString("sp_code")) + "\u0009"
                                + charSet(rec.getString("pcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        private boolean SendEStampProUnLinkPlu() {
            String FileName = "EStampProUnLinkPlu.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from stamppro_unlinkplu "
                        + "order by s_code,sp_code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgBank.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("s_code")) + "\u0009"
                                + charSet(rec.getString("sp_code")) + "\u0009"
                                + charSet(rec.getString("unpcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendEStampProFixExpDate() {
            String FileName = "EStampProFixExpDate.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from stamppro_exceptdate "
                        + "order by s_code,sp_code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgBank.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("s_code")) + "\u0009"
                                + charSet(rec.getString("sp_code")) + "\u0009"
                                + charSet(rec.getString("exp_date"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        private boolean SendEStampProRedeem() {
            String FileName = "EStampProRedeem.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from stampredeem "
                        + "order by sr_code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;

                        TempStr = TempStr + "***New" + "\u0009"
                                + charSet(rec.getString("sr_campaign")) + "\u0009"
                                + charSet(rec.getString("sr_code")) + "\u0009"
                                + charSet(rec.getString("sr_name")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("sr_startdate")) + "\u0009"
                                + SqlDateFmt.format(rec.getDate("sr_enddate")) + "\u0009"
                                + charSet(rec.getString("sr_day")) + "\u0009"
                                + charSet(rec.getString("sr_saletype")) + "\u0009"
                                + charSet(rec.getString("sr_saletimeS")) + "\u0009"
                                + charSet(rec.getString("sr_saletimeE")) + "\u0009"
                                + IntFmt.format(rec.getInt("sr_saleitem")) + "\u0009"
                                + IntFmt.format(rec.getInt("sr_point"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        private boolean SendEStampRedeemFixBranchGroup() {
            String FileName = "EStampRedeemFixBranchGroup.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from stampredeem_linkbgroup "
                        + "order by s_code,sr_code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgBank.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("s_code")) + "\u0009"
                                + charSet(rec.getString("sr_code")) + "\u0009"
                                + charSet(rec.getString("bgcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        private boolean SendEStampRedeemFixBranch() {
            String FileName = "EStampRedeemFixBranch.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from stampredeem_linkbranch "
                        + "order by s_code,sr_code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgBank.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("s_code")) + "\u0009"
                                + charSet(rec.getString("sr_code")) + "\u0009"
                                + charSet(rec.getString("bcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        private boolean SendEStampRedeemFixPlu() {
            String FileName = "EStampRedeemFixPlu.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from stampredeem_linkplu "
                        + "order by s_code,sr_code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgBank.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("s_code")) + "\u0009"
                                + charSet(rec.getString("sr_code")) + "\u0009"
                                + charSet(rec.getString("pcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        private boolean SendEStampRedeemUnLinkPlu() {
            String FileName = "EStampRedeemUnLinkPlu.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from stampredeem_unlinkplu "
                        + "order by s_code,sr_code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgBank.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("s_code")) + "\u0009"
                                + charSet(rec.getString("sr_code")) + "\u0009"
                                + charSet(rec.getString("unpcode"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }

        public boolean SendEStampRedeemFixExpDate() {
            String FileName = "EStampRedeemFixExpDate.Txt";
            String centFileName;
            centFileName = TempPath + '/' + FileName;
            TextWriter TextWrite = new TextWriter();
            int reccnt = 0;
            try {
                Statement stmt = (Statement) dbUtility.con.createStatement();
                String SqlQuery = "select *from stampredeem_exceptdate "
                        + "order by s_code,sr_code ";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                    File fObject = new File(centFileName);
                    if (!fObject.canRead()) {
                        TextWrite.writeToText(centFileName, null);
                    }
                } else {
                    do {
                        String TempStr = "";
                        reccnt++;
                        //msgBank.setText("  จำนวนรายการ " + reccnt + " รายการ ");
                        TempStr = TempStr + charSet(rec.getString("s_code")) + "\u0009"
                                + charSet(rec.getString("sr_code")) + "\u0009"
                                + charSet(rec.getString("exp_date"));
                        TextWrite.writeToText(centFileName, TempStr);
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
                isProcessOK = false;
            }
            if (isProcessOK) {
                if (!FileCharset.equals("UTF-8")) {
                    String inFile = TempPath + '/' + FileName;
                    String inCharset = "UTF-8";
                    String outFile = PathConvert + '/' + FileName;
                    String outCharset = FileCharset;
                    cvth.ConverCharSet(inFile, inCharset, outFile, outCharset);
                } else {
                    String inFile = TempPath + '/' + FileName;
                    String outFile = PathConvert + '/' + FileName;
                    cvth.copyfile(inFile, outFile);
                }
            }
            return isProcessOK;
        }
    }

}
